/*
 * currencyapi
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.AvailableCurrencyResponse;
import com.cloudmersive.client.native.model.ConvertedCurrencyResult;
import com.cloudmersive.client.native.model.ExchangeRateResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:34:18.584862700-07:00[America/Los_Angeles]")
public class CurrencyExchangeApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CurrencyExchangeApi() {
    this(new ApiClient());
  }

  public CurrencyExchangeApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Converts a price from the source currency into the destination currency
   * Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
   * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @param sourcePrice Input price, such as 19.99 in source currency (required)
   * @return ConvertedCurrencyResult
   * @throws ApiException if fails to make API call
   */
  public ConvertedCurrencyResult currencyExchangeConvertCurrency(String source, String destination, Double sourcePrice) throws ApiException {
    ApiResponse<ConvertedCurrencyResult> localVarResponse = currencyExchangeConvertCurrencyWithHttpInfo(source, destination, sourcePrice);
    return localVarResponse.getData();
  }

  /**
   * Converts a price from the source currency into the destination currency
   * Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
   * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @param sourcePrice Input price, such as 19.99 in source currency (required)
   * @return ApiResponse&lt;ConvertedCurrencyResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConvertedCurrencyResult> currencyExchangeConvertCurrencyWithHttpInfo(String source, String destination, Double sourcePrice) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = currencyExchangeConvertCurrencyRequestBuilder(source, destination, sourcePrice);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("currencyExchangeConvertCurrency", localVarResponse);
        }
        return new ApiResponse<ConvertedCurrencyResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConvertedCurrencyResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder currencyExchangeConvertCurrencyRequestBuilder(String source, String destination, Double sourcePrice) throws ApiException {
    // verify the required parameter 'source' is set
    if (source == null) {
      throw new ApiException(400, "Missing the required parameter 'source' when calling currencyExchangeConvertCurrency");
    }
    // verify the required parameter 'destination' is set
    if (destination == null) {
      throw new ApiException(400, "Missing the required parameter 'destination' when calling currencyExchangeConvertCurrency");
    }
    // verify the required parameter 'sourcePrice' is set
    if (sourcePrice == null) {
      throw new ApiException(400, "Missing the required parameter 'sourcePrice' when calling currencyExchangeConvertCurrency");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/currency/exchange-rates/convert/{source}/to/{destination}"
        .replace("{source}", ApiClient.urlEncode(source.toString()))
        .replace("{destination}", ApiClient.urlEncode(destination.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourcePrice);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a list of available currencies and corresponding countries
   * Enumerates available currencies and the countries that correspond to these currencies.
   * @return AvailableCurrencyResponse
   * @throws ApiException if fails to make API call
   */
  public AvailableCurrencyResponse currencyExchangeGetAvailableCurrencies() throws ApiException {
    ApiResponse<AvailableCurrencyResponse> localVarResponse = currencyExchangeGetAvailableCurrenciesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get a list of available currencies and corresponding countries
   * Enumerates available currencies and the countries that correspond to these currencies.
   * @return ApiResponse&lt;AvailableCurrencyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AvailableCurrencyResponse> currencyExchangeGetAvailableCurrenciesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = currencyExchangeGetAvailableCurrenciesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("currencyExchangeGetAvailableCurrencies", localVarResponse);
        }
        return new ApiResponse<AvailableCurrencyResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AvailableCurrencyResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder currencyExchangeGetAvailableCurrenciesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/currency/exchange-rates/list-available";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the exchange rate from the source currency into the destination currency
   * Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
   * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @return ExchangeRateResult
   * @throws ApiException if fails to make API call
   */
  public ExchangeRateResult currencyExchangeGetExchangeRate(String source, String destination) throws ApiException {
    ApiResponse<ExchangeRateResult> localVarResponse = currencyExchangeGetExchangeRateWithHttpInfo(source, destination);
    return localVarResponse.getData();
  }

  /**
   * Gets the exchange rate from the source currency into the destination currency
   * Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
   * @param source Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @param destination Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc. (required)
   * @return ApiResponse&lt;ExchangeRateResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExchangeRateResult> currencyExchangeGetExchangeRateWithHttpInfo(String source, String destination) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = currencyExchangeGetExchangeRateRequestBuilder(source, destination);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("currencyExchangeGetExchangeRate", localVarResponse);
        }
        return new ApiResponse<ExchangeRateResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExchangeRateResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder currencyExchangeGetExchangeRateRequestBuilder(String source, String destination) throws ApiException {
    // verify the required parameter 'source' is set
    if (source == null) {
      throw new ApiException(400, "Missing the required parameter 'source' when calling currencyExchangeGetExchangeRate");
    }
    // verify the required parameter 'destination' is set
    if (destination == null) {
      throw new ApiException(400, "Missing the required parameter 'destination' when calling currencyExchangeGetExchangeRate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/currency/exchange-rates/get/{source}/to/{destination}"
        .replace("{source}", ApiClient.urlEncode(source.toString()))
        .replace("{destination}", ApiClient.urlEncode(destination.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
