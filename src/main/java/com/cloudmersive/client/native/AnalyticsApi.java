/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.HateSpeechAnalysisRequest;
import com.cloudmersive.client.native.model.HateSpeechAnalysisResponse;
import com.cloudmersive.client.native.model.ProfanityAnalysisRequest;
import com.cloudmersive.client.native.model.ProfanityAnalysisResponse;
import com.cloudmersive.client.native.model.SentimentAnalysisRequest;
import com.cloudmersive.client.native.model.SentimentAnalysisResponse;
import com.cloudmersive.client.native.model.SimilarityAnalysisRequest;
import com.cloudmersive.client.native.model.SimilarityAnalysisResponse;
import com.cloudmersive.client.native.model.SubjectivityAnalysisRequest;
import com.cloudmersive.client.native.model.SubjectivityAnalysisResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:25:56.674263100-07:00[America/Los_Angeles]")
public class AnalyticsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AnalyticsApi() {
    this(new ApiClient());
  }

  public AnalyticsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Perform Hate Speech Analysis and Detection on Text
   * Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input hate speech analysis request (required)
   * @return HateSpeechAnalysisResponse
   * @throws ApiException if fails to make API call
   */
  public HateSpeechAnalysisResponse analyticsHateSpeech(HateSpeechAnalysisRequest input) throws ApiException {
    ApiResponse<HateSpeechAnalysisResponse> localVarResponse = analyticsHateSpeechWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Perform Hate Speech Analysis and Detection on Text
   * Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input hate speech analysis request (required)
   * @return ApiResponse&lt;HateSpeechAnalysisResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HateSpeechAnalysisResponse> analyticsHateSpeechWithHttpInfo(HateSpeechAnalysisRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyticsHateSpeechRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyticsHateSpeech", localVarResponse);
        }
        return new ApiResponse<HateSpeechAnalysisResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HateSpeechAnalysisResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyticsHateSpeechRequestBuilder(HateSpeechAnalysisRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling analyticsHateSpeech");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/analytics/hate-speech";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Profanity and Obscene Language Analysis and Detection on Text
   * Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input profanity analysis request (required)
   * @return ProfanityAnalysisResponse
   * @throws ApiException if fails to make API call
   */
  public ProfanityAnalysisResponse analyticsProfanity(ProfanityAnalysisRequest input) throws ApiException {
    ApiResponse<ProfanityAnalysisResponse> localVarResponse = analyticsProfanityWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Perform Profanity and Obscene Language Analysis and Detection on Text
   * Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input profanity analysis request (required)
   * @return ApiResponse&lt;ProfanityAnalysisResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProfanityAnalysisResponse> analyticsProfanityWithHttpInfo(ProfanityAnalysisRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyticsProfanityRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyticsProfanity", localVarResponse);
        }
        return new ApiResponse<ProfanityAnalysisResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProfanityAnalysisResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyticsProfanityRequestBuilder(ProfanityAnalysisRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling analyticsProfanity");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/analytics/profanity";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Sentiment Analysis and Classification on Text
   * Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input sentiment analysis request (required)
   * @return SentimentAnalysisResponse
   * @throws ApiException if fails to make API call
   */
  public SentimentAnalysisResponse analyticsSentiment(SentimentAnalysisRequest input) throws ApiException {
    ApiResponse<SentimentAnalysisResponse> localVarResponse = analyticsSentimentWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Perform Sentiment Analysis and Classification on Text
   * Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input sentiment analysis request (required)
   * @return ApiResponse&lt;SentimentAnalysisResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SentimentAnalysisResponse> analyticsSentimentWithHttpInfo(SentimentAnalysisRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyticsSentimentRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyticsSentiment", localVarResponse);
        }
        return new ApiResponse<SentimentAnalysisResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SentimentAnalysisResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyticsSentimentRequestBuilder(SentimentAnalysisRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling analyticsSentiment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/analytics/sentiment";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Semantic Similarity Comparison of Two Strings
   * Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
   * @param input Input similarity analysis request (required)
   * @return SimilarityAnalysisResponse
   * @throws ApiException if fails to make API call
   */
  public SimilarityAnalysisResponse analyticsSimilarity(SimilarityAnalysisRequest input) throws ApiException {
    ApiResponse<SimilarityAnalysisResponse> localVarResponse = analyticsSimilarityWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Perform Semantic Similarity Comparison of Two Strings
   * Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
   * @param input Input similarity analysis request (required)
   * @return ApiResponse&lt;SimilarityAnalysisResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SimilarityAnalysisResponse> analyticsSimilarityWithHttpInfo(SimilarityAnalysisRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyticsSimilarityRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyticsSimilarity", localVarResponse);
        }
        return new ApiResponse<SimilarityAnalysisResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SimilarityAnalysisResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyticsSimilarityRequestBuilder(SimilarityAnalysisRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling analyticsSimilarity");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/analytics/similarity";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Subjectivity and Objectivity Analysis on Text
   * Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input subjectivity analysis request (required)
   * @return SubjectivityAnalysisResponse
   * @throws ApiException if fails to make API call
   */
  public SubjectivityAnalysisResponse analyticsSubjectivity(SubjectivityAnalysisRequest input) throws ApiException {
    ApiResponse<SubjectivityAnalysisResponse> localVarResponse = analyticsSubjectivityWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Perform Subjectivity and Objectivity Analysis on Text
   * Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
   * @param input Input subjectivity analysis request (required)
   * @return ApiResponse&lt;SubjectivityAnalysisResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubjectivityAnalysisResponse> analyticsSubjectivityWithHttpInfo(SubjectivityAnalysisRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = analyticsSubjectivityRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("analyticsSubjectivity", localVarResponse);
        }
        return new ApiResponse<SubjectivityAnalysisResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubjectivityAnalysisResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder analyticsSubjectivityRequestBuilder(SubjectivityAnalysisRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling analyticsSubjectivity");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/analytics/subjectivity";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
