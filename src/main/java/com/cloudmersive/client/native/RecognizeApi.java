/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import java.io.File;
import com.cloudmersive.client.native.model.FindSymbolResult;
import com.cloudmersive.client.native.model.FineTextDetectionResult;
import com.cloudmersive.client.native.model.ImageDescriptionResponse;
import com.cloudmersive.client.native.model.ImageSimilarityHashDistanceRequest;
import com.cloudmersive.client.native.model.ImageSimilarityHashDistanceResponse;
import com.cloudmersive.client.native.model.ImageSimilarityHashResponse;
import com.cloudmersive.client.native.model.ObjectDetectionResult;
import com.cloudmersive.client.native.model.TextDetectionResult;
import com.cloudmersive.client.native.model.VehicleLicensePlateDetectionResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:26:07.726634200-07:00[America/Los_Angeles]")
public class RecognizeApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RecognizeApi() {
    this(new ApiClient());
  }

  public RecognizeApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Describe an image in natural language
   * Generate an English language text description of the image as a sentence.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ImageDescriptionResponse
   * @throws ApiException if fails to make API call
   */
  public ImageDescriptionResponse recognizeDescribe(File imageFile) throws ApiException {
    ApiResponse<ImageDescriptionResponse> localVarResponse = recognizeDescribeWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Describe an image in natural language
   * Generate an English language text description of the image as a sentence.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;ImageDescriptionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageDescriptionResponse> recognizeDescribeWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDescribeRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDescribe", localVarResponse);
        }
        return new ApiResponse<ImageDescriptionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageDescriptionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDescribeRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDescribe");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/describe";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect and unskew a photo of a document
   * Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param postProcessingEffect Optional, post-processing effects to apply to the email, default is None.  Possible values are None and BlackAndWhite (force the image into a black and white view to aid in OCR operations). (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] recognizeDetectAndUnskewDocument(File imageFile, String postProcessingEffect) throws ApiException {
    ApiResponse<byte[]> localVarResponse = recognizeDetectAndUnskewDocumentWithHttpInfo(imageFile, postProcessingEffect);
    return localVarResponse.getData();
  }

  /**
   * Detect and unskew a photo of a document
   * Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param postProcessingEffect Optional, post-processing effects to apply to the email, default is None.  Possible values are None and BlackAndWhite (force the image into a black and white view to aid in OCR operations). (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> recognizeDetectAndUnskewDocumentWithHttpInfo(File imageFile, String postProcessingEffect) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDetectAndUnskewDocumentRequestBuilder(imageFile, postProcessingEffect);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDetectAndUnskewDocument", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDetectAndUnskewDocumentRequestBuilder(File imageFile, String postProcessingEffect) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDetectAndUnskewDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/detect-document/unskew";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (postProcessingEffect != null) {
      localVarRequestBuilder.header("PostProcessingEffect", postProcessingEffect.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect objects including types and locations in an image
   * Identify the position, size and description of objects in an image, along with a recognition confidence level.  Detects both human people and objects in an image.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ObjectDetectionResult
   * @throws ApiException if fails to make API call
   */
  public ObjectDetectionResult recognizeDetectObjects(File imageFile) throws ApiException {
    ApiResponse<ObjectDetectionResult> localVarResponse = recognizeDetectObjectsWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Detect objects including types and locations in an image
   * Identify the position, size and description of objects in an image, along with a recognition confidence level.  Detects both human people and objects in an image.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;ObjectDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectDetectionResult> recognizeDetectObjectsWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDetectObjectsRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDetectObjects", localVarResponse);
        }
        return new ApiResponse<ObjectDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDetectObjectsRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDetectObjects");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/detect-objects";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect people including locations in an image
   * Identify the position, and size of human people in an image, along with a recognition confidence level.  People in the image do NOT need to be facing the camera; they can be facing away, edge-on, etc.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ObjectDetectionResult
   * @throws ApiException if fails to make API call
   */
  public ObjectDetectionResult recognizeDetectPeople(File imageFile) throws ApiException {
    ApiResponse<ObjectDetectionResult> localVarResponse = recognizeDetectPeopleWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Detect people including locations in an image
   * Identify the position, and size of human people in an image, along with a recognition confidence level.  People in the image do NOT need to be facing the camera; they can be facing away, edge-on, etc.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;ObjectDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectDetectionResult> recognizeDetectPeopleWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDetectPeopleRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDetectPeople", localVarResponse);
        }
        return new ApiResponse<ObjectDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDetectPeopleRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDetectPeople");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/detect-people";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect fine text in a photo of a document
   * Identify the position, and size of small/fine text within a photograph of a document.  Identify the location of small text in a photo - such as words and other forms of high density text.  Can be used on a scan of a document or a photograph (e.g. smartphone camera) of a document, page or receipt.  For OCR purposes - please see our Deep Learning OCR APIs.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return FineTextDetectionResult
   * @throws ApiException if fails to make API call
   */
  public FineTextDetectionResult recognizeDetectTextFine(File imageFile) throws ApiException {
    ApiResponse<FineTextDetectionResult> localVarResponse = recognizeDetectTextFineWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Detect fine text in a photo of a document
   * Identify the position, and size of small/fine text within a photograph of a document.  Identify the location of small text in a photo - such as words and other forms of high density text.  Can be used on a scan of a document or a photograph (e.g. smartphone camera) of a document, page or receipt.  For OCR purposes - please see our Deep Learning OCR APIs.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;FineTextDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FineTextDetectionResult> recognizeDetectTextFineWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDetectTextFineRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDetectTextFine", localVarResponse);
        }
        return new ApiResponse<FineTextDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FineTextDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDetectTextFineRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDetectTextFine");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/detect-text/fine";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect large text in a photo
   * Identify the position, and size of large text within a photograph.  Identify the location of large text in a photo - such as signs, titles, etc. and other forms of large, low-density text.  Not suitable for high-density text (e.g. scans of documents, receipts, etc.) for OCR purposes - for OCR, please see our Deep Learning OCR APIs.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return TextDetectionResult
   * @throws ApiException if fails to make API call
   */
  public TextDetectionResult recognizeDetectTextLarge(File imageFile) throws ApiException {
    ApiResponse<TextDetectionResult> localVarResponse = recognizeDetectTextLargeWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Detect large text in a photo
   * Identify the position, and size of large text within a photograph.  Identify the location of large text in a photo - such as signs, titles, etc. and other forms of large, low-density text.  Not suitable for high-density text (e.g. scans of documents, receipts, etc.) for OCR purposes - for OCR, please see our Deep Learning OCR APIs.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;TextDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextDetectionResult> recognizeDetectTextLargeWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDetectTextLargeRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDetectTextLarge", localVarResponse);
        }
        return new ApiResponse<TextDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDetectTextLargeRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDetectTextLarge");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/detect-text/large";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect vehicle license plates in an image
   * Identify the position, and size, and content of vehicle license plates in an image.  License plates should be within 15-20 degrees on-axis to the camera.  Supported image formats are JPG, PNG and BMP.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return VehicleLicensePlateDetectionResult
   * @throws ApiException if fails to make API call
   */
  public VehicleLicensePlateDetectionResult recognizeDetectVehicleLicensePlates(File imageFile) throws ApiException {
    ApiResponse<VehicleLicensePlateDetectionResult> localVarResponse = recognizeDetectVehicleLicensePlatesWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Detect vehicle license plates in an image
   * Identify the position, and size, and content of vehicle license plates in an image.  License plates should be within 15-20 degrees on-axis to the camera.  Supported image formats are JPG, PNG and BMP.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;VehicleLicensePlateDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VehicleLicensePlateDetectionResult> recognizeDetectVehicleLicensePlatesWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeDetectVehicleLicensePlatesRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeDetectVehicleLicensePlates", localVarResponse);
        }
        return new ApiResponse<VehicleLicensePlateDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VehicleLicensePlateDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeDetectVehicleLicensePlatesRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeDetectVehicleLicensePlates");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/detect-vehicle-license-plates";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Find the location of a symbol in an image
   * Determine if an image contains a symbol, and if so, the location of that symbol in the image.
   * @param inputImage Image file to search through for the target image. (required)
   * @param targetImage Image to find in the input image. (required)
   * @return FindSymbolResult
   * @throws ApiException if fails to make API call
   */
  public FindSymbolResult recognizeFindSymbol(File inputImage, File targetImage) throws ApiException {
    ApiResponse<FindSymbolResult> localVarResponse = recognizeFindSymbolWithHttpInfo(inputImage, targetImage);
    return localVarResponse.getData();
  }

  /**
   * Find the location of a symbol in an image
   * Determine if an image contains a symbol, and if so, the location of that symbol in the image.
   * @param inputImage Image file to search through for the target image. (required)
   * @param targetImage Image to find in the input image. (required)
   * @return ApiResponse&lt;FindSymbolResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindSymbolResult> recognizeFindSymbolWithHttpInfo(File inputImage, File targetImage) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeFindSymbolRequestBuilder(inputImage, targetImage);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeFindSymbol", localVarResponse);
        }
        return new ApiResponse<FindSymbolResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindSymbolResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeFindSymbolRequestBuilder(File inputImage, File targetImage) throws ApiException {
    // verify the required parameter 'inputImage' is set
    if (inputImage == null) {
      throw new ApiException(400, "Missing the required parameter 'inputImage' when calling recognizeFindSymbol");
    }
    // verify the required parameter 'targetImage' is set
    if (targetImage == null) {
      throw new ApiException(400, "Missing the required parameter 'targetImage' when calling recognizeFindSymbol");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/find/symbol";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Compare two images for similarity
   * Generates an image similarity score using Deep Learning between 0.0 and 1.0, values closer to 1.0 indicate greater similarity
   * @param baseImage Image file to compare against.  Common file formats such as PNG, JPEG are supported. (required)
   * @param comparisonImage Image to compare to the base image. (required)
   * @param recognitionMode Optional, specify the recognition mode; possible values are Normal, Basic and Advanced.  Default is Normal. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] recognizeSimilarityCompare(File baseImage, File comparisonImage, String recognitionMode) throws ApiException {
    ApiResponse<byte[]> localVarResponse = recognizeSimilarityCompareWithHttpInfo(baseImage, comparisonImage, recognitionMode);
    return localVarResponse.getData();
  }

  /**
   * Compare two images for similarity
   * Generates an image similarity score using Deep Learning between 0.0 and 1.0, values closer to 1.0 indicate greater similarity
   * @param baseImage Image file to compare against.  Common file formats such as PNG, JPEG are supported. (required)
   * @param comparisonImage Image to compare to the base image. (required)
   * @param recognitionMode Optional, specify the recognition mode; possible values are Normal, Basic and Advanced.  Default is Normal. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> recognizeSimilarityCompareWithHttpInfo(File baseImage, File comparisonImage, String recognitionMode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeSimilarityCompareRequestBuilder(baseImage, comparisonImage, recognitionMode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeSimilarityCompare", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeSimilarityCompareRequestBuilder(File baseImage, File comparisonImage, String recognitionMode) throws ApiException {
    // verify the required parameter 'baseImage' is set
    if (baseImage == null) {
      throw new ApiException(400, "Missing the required parameter 'baseImage' when calling recognizeSimilarityCompare");
    }
    // verify the required parameter 'comparisonImage' is set
    if (comparisonImage == null) {
      throw new ApiException(400, "Missing the required parameter 'comparisonImage' when calling recognizeSimilarityCompare");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/similarity/compare";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (recognitionMode != null) {
      localVarRequestBuilder.header("recognitionMode", recognitionMode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Generate a perceptual image hash
   * Generates a hash value for the image; hash values that are closer together in terms of Hamming Distance are more similar.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param recognitionMode Optional, specify the recognition mode; possible values are Normal, Basic and Advanced.  Default is Normal. (optional)
   * @return ImageSimilarityHashResponse
   * @throws ApiException if fails to make API call
   */
  public ImageSimilarityHashResponse recognizeSimilarityHash(File imageFile, String recognitionMode) throws ApiException {
    ApiResponse<ImageSimilarityHashResponse> localVarResponse = recognizeSimilarityHashWithHttpInfo(imageFile, recognitionMode);
    return localVarResponse.getData();
  }

  /**
   * Generate a perceptual image hash
   * Generates a hash value for the image; hash values that are closer together in terms of Hamming Distance are more similar.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param recognitionMode Optional, specify the recognition mode; possible values are Normal, Basic and Advanced.  Default is Normal. (optional)
   * @return ApiResponse&lt;ImageSimilarityHashResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageSimilarityHashResponse> recognizeSimilarityHashWithHttpInfo(File imageFile, String recognitionMode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeSimilarityHashRequestBuilder(imageFile, recognitionMode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeSimilarityHash", localVarResponse);
        }
        return new ApiResponse<ImageSimilarityHashResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageSimilarityHashResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeSimilarityHashRequestBuilder(File imageFile, String recognitionMode) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling recognizeSimilarityHash");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/similarity/hash";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (recognitionMode != null) {
      localVarRequestBuilder.header("recognitionMode", recognitionMode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Calculates the similarity between two perceptual image hashes
   * Calculates the similarity between two perceptual image hashes by computing the Hamming Distance between them.
   * @param request  (required)
   * @return ImageSimilarityHashDistanceResponse
   * @throws ApiException if fails to make API call
   */
  public ImageSimilarityHashDistanceResponse recognizeSimilarityHashDistance(ImageSimilarityHashDistanceRequest request) throws ApiException {
    ApiResponse<ImageSimilarityHashDistanceResponse> localVarResponse = recognizeSimilarityHashDistanceWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Calculates the similarity between two perceptual image hashes
   * Calculates the similarity between two perceptual image hashes by computing the Hamming Distance between them.
   * @param request  (required)
   * @return ApiResponse&lt;ImageSimilarityHashDistanceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageSimilarityHashDistanceResponse> recognizeSimilarityHashDistanceWithHttpInfo(ImageSimilarityHashDistanceRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = recognizeSimilarityHashDistanceRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("recognizeSimilarityHashDistance", localVarResponse);
        }
        return new ApiResponse<ImageSimilarityHashDistanceResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageSimilarityHashDistanceResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder recognizeSimilarityHashDistanceRequestBuilder(ImageSimilarityHashDistanceRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling recognizeSimilarityHashDistance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/recognize/similarity/hash/distance";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
