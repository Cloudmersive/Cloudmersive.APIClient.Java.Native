/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.AddPdfAnnotationRequest;
import java.math.BigDecimal;
import java.io.File;
import com.cloudmersive.client.native.model.GetPdfAnnotationsResult;
import com.cloudmersive.client.native.model.PdfFormFields;
import com.cloudmersive.client.native.model.PdfMetadata;
import com.cloudmersive.client.native.model.PdfTextByPageResult;
import com.cloudmersive.client.native.model.SetPdfFormFieldsRequest;
import com.cloudmersive.client.native.model.SetPdfMetadataRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:26:27.275021200-07:00[America/Los_Angeles]")
public class EditPdfApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EditPdfApi() {
    this(new ApiClient());
  }

  public EditPdfApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Add one or more PDF annotations, comments in the PDF document
   * Adds one or more annotations, comments to a PDF document.
   * @param request  (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfAddAnnotations(AddPdfAnnotationRequest request) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfAddAnnotationsWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Add one or more PDF annotations, comments in the PDF document
   * Adds one or more annotations, comments to a PDF document.
   * @param request  (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfAddAnnotationsWithHttpInfo(AddPdfAnnotationRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfAddAnnotationsRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfAddAnnotations", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfAddAnnotationsRequestBuilder(AddPdfAnnotationRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editPdfAddAnnotations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/annotations/add-item";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert a PDF file to PDF/A
   * Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized PDF.
   * @param inputFile Input file to perform the operation on. (required)
   * @param conformanceLevel Optional: Select the conformance level for PDF/A - specify &#39;1b&#39; for PDF/A-1b or specify &#39;2b&#39; for PDF/A-2b; default is PDF/A-1b (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfConvertToPdfA(File inputFile, String conformanceLevel) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfConvertToPdfAWithHttpInfo(inputFile, conformanceLevel);
    return localVarResponse.getData();
  }

  /**
   * Convert a PDF file to PDF/A
   * Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized PDF.
   * @param inputFile Input file to perform the operation on. (required)
   * @param conformanceLevel Optional: Select the conformance level for PDF/A - specify &#39;1b&#39; for PDF/A-1b or specify &#39;2b&#39; for PDF/A-2b; default is PDF/A-1b (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfConvertToPdfAWithHttpInfo(File inputFile, String conformanceLevel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfConvertToPdfARequestBuilder(inputFile, conformanceLevel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfConvertToPdfA", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfConvertToPdfARequestBuilder(File inputFile, String conformanceLevel) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfConvertToPdfA");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/optimize/pdf-a";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (conformanceLevel != null) {
      localVarRequestBuilder.header("conformanceLevel", conformanceLevel.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Decrypt and password-protect a PDF
   * Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.
   * @param password Valid password for the PDF file (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfDecrypt(String password, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfDecryptWithHttpInfo(password, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Decrypt and password-protect a PDF
   * Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.
   * @param password Valid password for the PDF file (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfDecryptWithHttpInfo(String password, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfDecryptRequestBuilder(password, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfDecrypt", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfDecryptRequestBuilder(String password, File inputFile) throws ApiException {
    // verify the required parameter 'password' is set
    if (password == null) {
      throw new ApiException(400, "Missing the required parameter 'password' when calling editPdfDecrypt");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfDecrypt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/decrypt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (password != null) {
      localVarRequestBuilder.header("password", password.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove, delete pages from a PDF document
   * Remove one or more pages from a PDF document
   * @param pageStart Page number (1 based) to start deleting pages from (inclusive). (required)
   * @param pageEnd Page number (1 based) to stop deleting pages from (inclusive). (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfDeletePages(Integer pageStart, Integer pageEnd, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfDeletePagesWithHttpInfo(pageStart, pageEnd, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Remove, delete pages from a PDF document
   * Remove one or more pages from a PDF document
   * @param pageStart Page number (1 based) to start deleting pages from (inclusive). (required)
   * @param pageEnd Page number (1 based) to stop deleting pages from (inclusive). (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfDeletePagesWithHttpInfo(Integer pageStart, Integer pageEnd, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfDeletePagesRequestBuilder(pageStart, pageEnd, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfDeletePages", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfDeletePagesRequestBuilder(Integer pageStart, Integer pageEnd, File inputFile) throws ApiException {
    // verify the required parameter 'pageStart' is set
    if (pageStart == null) {
      throw new ApiException(400, "Missing the required parameter 'pageStart' when calling editPdfDeletePages");
    }
    // verify the required parameter 'pageEnd' is set
    if (pageEnd == null) {
      throw new ApiException(400, "Missing the required parameter 'pageEnd' when calling editPdfDeletePages");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfDeletePages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/pages/delete";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (pageStart != null) {
      localVarRequestBuilder.header("pageStart", pageStart.toString());
    }
    if (pageEnd != null) {
      localVarRequestBuilder.header("pageEnd", pageEnd.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Encrypt and password-protect a PDF
   * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
   * @param inputFile Input file to perform the operation on. (required)
   * @param userPassword Password of a user (reader) of the PDF file (optional)
   * @param ownerPassword Password of a owner (creator/editor) of the PDF file (optional)
   * @param encryptionKeyLength Possible values are \&quot;128\&quot; (128-bit RC4 encryption) and \&quot;256\&quot; (256-bit AES encryption).  Default is 256. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfEncrypt(File inputFile, String userPassword, String ownerPassword, String encryptionKeyLength) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfEncryptWithHttpInfo(inputFile, userPassword, ownerPassword, encryptionKeyLength);
    return localVarResponse.getData();
  }

  /**
   * Encrypt and password-protect a PDF
   * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
   * @param inputFile Input file to perform the operation on. (required)
   * @param userPassword Password of a user (reader) of the PDF file (optional)
   * @param ownerPassword Password of a owner (creator/editor) of the PDF file (optional)
   * @param encryptionKeyLength Possible values are \&quot;128\&quot; (128-bit RC4 encryption) and \&quot;256\&quot; (256-bit AES encryption).  Default is 256. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfEncryptWithHttpInfo(File inputFile, String userPassword, String ownerPassword, String encryptionKeyLength) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfEncryptRequestBuilder(inputFile, userPassword, ownerPassword, encryptionKeyLength);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfEncrypt", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfEncryptRequestBuilder(File inputFile, String userPassword, String ownerPassword, String encryptionKeyLength) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfEncrypt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/encrypt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (userPassword != null) {
      localVarRequestBuilder.header("userPassword", userPassword.toString());
    }
    if (ownerPassword != null) {
      localVarRequestBuilder.header("ownerPassword", ownerPassword.toString());
    }
    if (encryptionKeyLength != null) {
      localVarRequestBuilder.header("encryptionKeyLength", encryptionKeyLength.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get PDF annotations, including comments in the document
   * Enumerates the annotations, including comments and notes, in a PDF document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetPdfAnnotationsResult
   * @throws ApiException if fails to make API call
   */
  public GetPdfAnnotationsResult editPdfGetAnnotations(File inputFile) throws ApiException {
    ApiResponse<GetPdfAnnotationsResult> localVarResponse = editPdfGetAnnotationsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get PDF annotations, including comments in the document
   * Enumerates the annotations, including comments and notes, in a PDF document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetPdfAnnotationsResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetPdfAnnotationsResult> editPdfGetAnnotationsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfGetAnnotationsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfGetAnnotations", localVarResponse);
        }
        return new ApiResponse<GetPdfAnnotationsResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetPdfAnnotationsResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfGetAnnotationsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfGetAnnotations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/annotations/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets PDF Form fields and values
   * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
   * @param inputFile Input file to perform the operation on. (required)
   * @return PdfFormFields
   * @throws ApiException if fails to make API call
   */
  public PdfFormFields editPdfGetFormFields(File inputFile) throws ApiException {
    ApiResponse<PdfFormFields> localVarResponse = editPdfGetFormFieldsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Gets PDF Form fields and values
   * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;PdfFormFields&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PdfFormFields> editPdfGetFormFieldsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfGetFormFieldsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfGetFormFields", localVarResponse);
        }
        return new ApiResponse<PdfFormFields>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PdfFormFields>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfGetFormFieldsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfGetFormFields");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/form/get-fields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get PDF document metadata
   * Returns the metadata from the PDF document, including Title, Author, etc.
   * @param inputFile Input file to perform the operation on. (required)
   * @return PdfMetadata
   * @throws ApiException if fails to make API call
   */
  public PdfMetadata editPdfGetMetadata(File inputFile) throws ApiException {
    ApiResponse<PdfMetadata> localVarResponse = editPdfGetMetadataWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get PDF document metadata
   * Returns the metadata from the PDF document, including Title, Author, etc.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;PdfMetadata&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PdfMetadata> editPdfGetMetadataWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfGetMetadataRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfGetMetadata", localVarResponse);
        }
        return new ApiResponse<PdfMetadata>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PdfMetadata>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfGetMetadataRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfGetMetadata");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/get-metadata";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get text in a PDF document by page
   * Gets the text in a PDF by page
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
   * @return PdfTextByPageResult
   * @throws ApiException if fails to make API call
   */
  public PdfTextByPageResult editPdfGetPdfTextByPages(File inputFile, String textFormattingMode) throws ApiException {
    ApiResponse<PdfTextByPageResult> localVarResponse = editPdfGetPdfTextByPagesWithHttpInfo(inputFile, textFormattingMode);
    return localVarResponse.getData();
  }

  /**
   * Get text in a PDF document by page
   * Gets the text in a PDF by page
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
   * @return ApiResponse&lt;PdfTextByPageResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PdfTextByPageResult> editPdfGetPdfTextByPagesWithHttpInfo(File inputFile, String textFormattingMode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfGetPdfTextByPagesRequestBuilder(inputFile, textFormattingMode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfGetPdfTextByPages", localVarResponse);
        }
        return new ApiResponse<PdfTextByPageResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PdfTextByPageResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfGetPdfTextByPagesRequestBuilder(File inputFile, String textFormattingMode) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfGetPdfTextByPages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/pages/get-text";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (textFormattingMode != null) {
      localVarRequestBuilder.header("textFormattingMode", textFormattingMode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert, copy pages from one PDF document into another
   * Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
   * @param pageStartSource Page number (1 based) to start copying pages from (inclusive) in the Source file. (required)
   * @param pageEndSource Page number (1 based) to stop copying pages pages from (inclusive) in the Source file. (required)
   * @param pageInsertBeforeDesitnation Page number (1 based) to insert the pages before in the Destination file. (required)
   * @param sourceFile Source PDF file to copy pages from. (required)
   * @param destinationFile Destination PDF file to copy pages into. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfInsertPages(Integer pageStartSource, Integer pageEndSource, Integer pageInsertBeforeDesitnation, File sourceFile, File destinationFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfInsertPagesWithHttpInfo(pageStartSource, pageEndSource, pageInsertBeforeDesitnation, sourceFile, destinationFile);
    return localVarResponse.getData();
  }

  /**
   * Insert, copy pages from one PDF document into another
   * Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
   * @param pageStartSource Page number (1 based) to start copying pages from (inclusive) in the Source file. (required)
   * @param pageEndSource Page number (1 based) to stop copying pages pages from (inclusive) in the Source file. (required)
   * @param pageInsertBeforeDesitnation Page number (1 based) to insert the pages before in the Destination file. (required)
   * @param sourceFile Source PDF file to copy pages from. (required)
   * @param destinationFile Destination PDF file to copy pages into. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfInsertPagesWithHttpInfo(Integer pageStartSource, Integer pageEndSource, Integer pageInsertBeforeDesitnation, File sourceFile, File destinationFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfInsertPagesRequestBuilder(pageStartSource, pageEndSource, pageInsertBeforeDesitnation, sourceFile, destinationFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfInsertPages", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfInsertPagesRequestBuilder(Integer pageStartSource, Integer pageEndSource, Integer pageInsertBeforeDesitnation, File sourceFile, File destinationFile) throws ApiException {
    // verify the required parameter 'pageStartSource' is set
    if (pageStartSource == null) {
      throw new ApiException(400, "Missing the required parameter 'pageStartSource' when calling editPdfInsertPages");
    }
    // verify the required parameter 'pageEndSource' is set
    if (pageEndSource == null) {
      throw new ApiException(400, "Missing the required parameter 'pageEndSource' when calling editPdfInsertPages");
    }
    // verify the required parameter 'pageInsertBeforeDesitnation' is set
    if (pageInsertBeforeDesitnation == null) {
      throw new ApiException(400, "Missing the required parameter 'pageInsertBeforeDesitnation' when calling editPdfInsertPages");
    }
    // verify the required parameter 'sourceFile' is set
    if (sourceFile == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceFile' when calling editPdfInsertPages");
    }
    // verify the required parameter 'destinationFile' is set
    if (destinationFile == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationFile' when calling editPdfInsertPages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/pages/insert";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (pageStartSource != null) {
      localVarRequestBuilder.header("pageStartSource", pageStartSource.toString());
    }
    if (pageEndSource != null) {
      localVarRequestBuilder.header("pageEndSource", pageEndSource.toString());
    }
    if (pageInsertBeforeDesitnation != null) {
      localVarRequestBuilder.header("pageInsertBeforeDesitnation", pageInsertBeforeDesitnation.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Linearize and optimize a PDF for streaming download
   * Linearizes the content of a PDF to optimize it for streaming download, particularly over web streaming.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfLinearize(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfLinearizeWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Linearize and optimize a PDF for streaming download
   * Linearizes the content of a PDF to optimize it for streaming download, particularly over web streaming.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfLinearizeWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfLinearizeRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfLinearize", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfLinearizeRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfLinearize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/optimize/linearize";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rasterize a PDF to an image-based PDF
   * Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfRasterize(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfRasterizeWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Rasterize a PDF to an image-based PDF
   * Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfRasterizeWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfRasterizeRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfRasterize", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfRasterizeRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfRasterize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/rasterize";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reduce the file size and optimize a PDF
   * Reduces the file size and optimizes the content of a PDF to minimize its file size.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Quality level for the images in the PDF, ranging from 0.0 (low quality) to 1.0 (high quality); default is 0.3 (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfReduceFileSize(File inputFile, BigDecimal quality) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfReduceFileSizeWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Reduce the file size and optimize a PDF
   * Reduces the file size and optimizes the content of a PDF to minimize its file size.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Quality level for the images in the PDF, ranging from 0.0 (low quality) to 1.0 (high quality); default is 0.3 (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfReduceFileSizeWithHttpInfo(File inputFile, BigDecimal quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfReduceFileSizeRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfReduceFileSize", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfReduceFileSizeRequestBuilder(File inputFile, BigDecimal quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfReduceFileSize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/optimize/reduce-file-size";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove all PDF annotations, including comments in the document
   * Removes all of the annotations, including comments and notes, in a PDF document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfRemoveAllAnnotations(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfRemoveAllAnnotationsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Remove all PDF annotations, including comments in the document
   * Removes all of the annotations, including comments and notes, in a PDF document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfRemoveAllAnnotationsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfRemoveAllAnnotationsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfRemoveAllAnnotations", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfRemoveAllAnnotationsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfRemoveAllAnnotations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/annotations/remove-all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove a specific PDF annotation, comment in the document
   * Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.
   * @param annotationIndex The 0-based index of the annotation in the document (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfRemoveAnnotationItem(Integer annotationIndex, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfRemoveAnnotationItemWithHttpInfo(annotationIndex, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Remove a specific PDF annotation, comment in the document
   * Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.
   * @param annotationIndex The 0-based index of the annotation in the document (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfRemoveAnnotationItemWithHttpInfo(Integer annotationIndex, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfRemoveAnnotationItemRequestBuilder(annotationIndex, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfRemoveAnnotationItem", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfRemoveAnnotationItemRequestBuilder(Integer annotationIndex, File inputFile) throws ApiException {
    // verify the required parameter 'annotationIndex' is set
    if (annotationIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'annotationIndex' when calling editPdfRemoveAnnotationItem");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfRemoveAnnotationItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/annotations/remove-item";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (annotationIndex != null) {
      localVarRequestBuilder.header("annotationIndex", annotationIndex.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Change PDF Document&#39;s Paper Size
   * Resizes a PDF document&#39;s paper size.
   * @param paperSize The desired paper size for the resized PDF document. Size ranges from A7 (smallest) to A0 (largest). (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfResize(String paperSize, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfResizeWithHttpInfo(paperSize, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Change PDF Document&#39;s Paper Size
   * Resizes a PDF document&#39;s paper size.
   * @param paperSize The desired paper size for the resized PDF document. Size ranges from A7 (smallest) to A0 (largest). (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfResizeWithHttpInfo(String paperSize, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfResizeRequestBuilder(paperSize, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfResize", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfResizeRequestBuilder(String paperSize, File inputFile) throws ApiException {
    // verify the required parameter 'paperSize' is set
    if (paperSize == null) {
      throw new ApiException(400, "Missing the required parameter 'paperSize' when calling editPdfResize");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfResize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/resize";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (paperSize != null) {
      localVarRequestBuilder.header("paperSize", paperSize.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate all pages in a PDF document
   * Rotate all of the pages in a PDF document by a multiple of 90 degrees
   * @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfRotateAllPages(Integer rotationAngle, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfRotateAllPagesWithHttpInfo(rotationAngle, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Rotate all pages in a PDF document
   * Rotate all of the pages in a PDF document by a multiple of 90 degrees
   * @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfRotateAllPagesWithHttpInfo(Integer rotationAngle, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfRotateAllPagesRequestBuilder(rotationAngle, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfRotateAllPages", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfRotateAllPagesRequestBuilder(Integer rotationAngle, File inputFile) throws ApiException {
    // verify the required parameter 'rotationAngle' is set
    if (rotationAngle == null) {
      throw new ApiException(400, "Missing the required parameter 'rotationAngle' when calling editPdfRotateAllPages");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfRotateAllPages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/pages/rotate/all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (rotationAngle != null) {
      localVarRequestBuilder.header("rotationAngle", rotationAngle.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate a range, subset of pages in a PDF document
   * Rotate a range of specific pages in a PDF document by a multiple of 90 degrees
   * @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. (required)
   * @param pageStart Page number (1 based) to start rotating pages from (inclusive). (required)
   * @param pageEnd Page number (1 based) to stop rotating pages from (inclusive). (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfRotatePageRange(Integer rotationAngle, Integer pageStart, Integer pageEnd, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfRotatePageRangeWithHttpInfo(rotationAngle, pageStart, pageEnd, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Rotate a range, subset of pages in a PDF document
   * Rotate a range of specific pages in a PDF document by a multiple of 90 degrees
   * @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc. (required)
   * @param pageStart Page number (1 based) to start rotating pages from (inclusive). (required)
   * @param pageEnd Page number (1 based) to stop rotating pages from (inclusive). (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfRotatePageRangeWithHttpInfo(Integer rotationAngle, Integer pageStart, Integer pageEnd, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfRotatePageRangeRequestBuilder(rotationAngle, pageStart, pageEnd, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfRotatePageRange", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfRotatePageRangeRequestBuilder(Integer rotationAngle, Integer pageStart, Integer pageEnd, File inputFile) throws ApiException {
    // verify the required parameter 'rotationAngle' is set
    if (rotationAngle == null) {
      throw new ApiException(400, "Missing the required parameter 'rotationAngle' when calling editPdfRotatePageRange");
    }
    // verify the required parameter 'pageStart' is set
    if (pageStart == null) {
      throw new ApiException(400, "Missing the required parameter 'pageStart' when calling editPdfRotatePageRange");
    }
    // verify the required parameter 'pageEnd' is set
    if (pageEnd == null) {
      throw new ApiException(400, "Missing the required parameter 'pageEnd' when calling editPdfRotatePageRange");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfRotatePageRange");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/pages/rotate/page-range";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (rotationAngle != null) {
      localVarRequestBuilder.header("rotationAngle", rotationAngle.toString());
    }
    if (pageStart != null) {
      localVarRequestBuilder.header("pageStart", pageStart.toString());
    }
    if (pageEnd != null) {
      localVarRequestBuilder.header("pageEnd", pageEnd.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Sets ands fills PDF Form field values
   * Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
   * @param fieldValues  (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfSetFormFields(SetPdfFormFieldsRequest fieldValues) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfSetFormFieldsWithHttpInfo(fieldValues);
    return localVarResponse.getData();
  }

  /**
   * Sets ands fills PDF Form field values
   * Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
   * @param fieldValues  (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfSetFormFieldsWithHttpInfo(SetPdfFormFieldsRequest fieldValues) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfSetFormFieldsRequestBuilder(fieldValues);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfSetFormFields", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfSetFormFieldsRequestBuilder(SetPdfFormFieldsRequest fieldValues) throws ApiException {
    // verify the required parameter 'fieldValues' is set
    if (fieldValues == null) {
      throw new ApiException(400, "Missing the required parameter 'fieldValues' when calling editPdfSetFormFields");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/form/set-fields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fieldValues);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Sets PDF document metadata
   * Sets (writes) metadata into the input PDF document, including Title, Author, etc.
   * @param request  (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfSetMetadata(SetPdfMetadataRequest request) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfSetMetadataWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Sets PDF document metadata
   * Sets (writes) metadata into the input PDF document, including Title, Author, etc.
   * @param request  (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfSetMetadataWithHttpInfo(SetPdfMetadataRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfSetMetadataRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfSetMetadata", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfSetMetadataRequestBuilder(SetPdfMetadataRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editPdfSetMetadata");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/set-metadata";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Encrypt, password-protect and set restricted permissions on a PDF
   * Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
   * @param ownerPassword Password of a owner (creator/editor) of the PDF file (required) (required)
   * @param userPassword Password of a user (reader) of the PDF file (optional) (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @param encryptionKeyLength Possible values are \&quot;128\&quot; (128-bit RC4 encryption) and \&quot;256\&quot; (256-bit AES encryption).  Default is 256. (optional)
   * @param allowPrinting Set to false to disable printing through DRM.  Default is true. (optional)
   * @param allowDocumentAssembly Set to false to disable document assembly through DRM.  Default is true. (optional)
   * @param allowContentExtraction Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)
   * @param allowFormFilling Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)
   * @param allowEditing Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)
   * @param allowAnnotations Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)
   * @param allowDegradedPrinting Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfSetPermissions(String ownerPassword, String userPassword, File inputFile, String encryptionKeyLength, Boolean allowPrinting, Boolean allowDocumentAssembly, Boolean allowContentExtraction, Boolean allowFormFilling, Boolean allowEditing, Boolean allowAnnotations, Boolean allowDegradedPrinting) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfSetPermissionsWithHttpInfo(ownerPassword, userPassword, inputFile, encryptionKeyLength, allowPrinting, allowDocumentAssembly, allowContentExtraction, allowFormFilling, allowEditing, allowAnnotations, allowDegradedPrinting);
    return localVarResponse.getData();
  }

  /**
   * Encrypt, password-protect and set restricted permissions on a PDF
   * Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
   * @param ownerPassword Password of a owner (creator/editor) of the PDF file (required) (required)
   * @param userPassword Password of a user (reader) of the PDF file (optional) (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @param encryptionKeyLength Possible values are \&quot;128\&quot; (128-bit RC4 encryption) and \&quot;256\&quot; (256-bit AES encryption).  Default is 256. (optional)
   * @param allowPrinting Set to false to disable printing through DRM.  Default is true. (optional)
   * @param allowDocumentAssembly Set to false to disable document assembly through DRM.  Default is true. (optional)
   * @param allowContentExtraction Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)
   * @param allowFormFilling Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)
   * @param allowEditing Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)
   * @param allowAnnotations Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)
   * @param allowDegradedPrinting Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfSetPermissionsWithHttpInfo(String ownerPassword, String userPassword, File inputFile, String encryptionKeyLength, Boolean allowPrinting, Boolean allowDocumentAssembly, Boolean allowContentExtraction, Boolean allowFormFilling, Boolean allowEditing, Boolean allowAnnotations, Boolean allowDegradedPrinting) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfSetPermissionsRequestBuilder(ownerPassword, userPassword, inputFile, encryptionKeyLength, allowPrinting, allowDocumentAssembly, allowContentExtraction, allowFormFilling, allowEditing, allowAnnotations, allowDegradedPrinting);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfSetPermissions", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfSetPermissionsRequestBuilder(String ownerPassword, String userPassword, File inputFile, String encryptionKeyLength, Boolean allowPrinting, Boolean allowDocumentAssembly, Boolean allowContentExtraction, Boolean allowFormFilling, Boolean allowEditing, Boolean allowAnnotations, Boolean allowDegradedPrinting) throws ApiException {
    // verify the required parameter 'ownerPassword' is set
    if (ownerPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'ownerPassword' when calling editPdfSetPermissions");
    }
    // verify the required parameter 'userPassword' is set
    if (userPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'userPassword' when calling editPdfSetPermissions");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfSetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/encrypt/set-permissions";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (ownerPassword != null) {
      localVarRequestBuilder.header("ownerPassword", ownerPassword.toString());
    }
    if (userPassword != null) {
      localVarRequestBuilder.header("userPassword", userPassword.toString());
    }
    if (encryptionKeyLength != null) {
      localVarRequestBuilder.header("encryptionKeyLength", encryptionKeyLength.toString());
    }
    if (allowPrinting != null) {
      localVarRequestBuilder.header("allowPrinting", allowPrinting.toString());
    }
    if (allowDocumentAssembly != null) {
      localVarRequestBuilder.header("allowDocumentAssembly", allowDocumentAssembly.toString());
    }
    if (allowContentExtraction != null) {
      localVarRequestBuilder.header("allowContentExtraction", allowContentExtraction.toString());
    }
    if (allowFormFilling != null) {
      localVarRequestBuilder.header("allowFormFilling", allowFormFilling.toString());
    }
    if (allowEditing != null) {
      localVarRequestBuilder.header("allowEditing", allowEditing.toString());
    }
    if (allowAnnotations != null) {
      localVarRequestBuilder.header("allowAnnotations", allowAnnotations.toString());
    }
    if (allowDegradedPrinting != null) {
      localVarRequestBuilder.header("allowDegradedPrinting", allowDegradedPrinting.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a text watermark to a PDF
   * Adds a text watermark to a PDF
   * @param watermarkText Watermark text to add to the PDF (required) (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @param fontName Font Family Name for the watermark text; default is Times New Roman (optional)
   * @param fontSize Font Size in points of the text; default is 150 (optional)
   * @param fontColor Font color in hexadecimal or HTML color name; default is Red (optional)
   * @param fontTransparency Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editPdfWatermarkText(String watermarkText, File inputFile, String fontName, BigDecimal fontSize, String fontColor, BigDecimal fontTransparency) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editPdfWatermarkTextWithHttpInfo(watermarkText, inputFile, fontName, fontSize, fontColor, fontTransparency);
    return localVarResponse.getData();
  }

  /**
   * Add a text watermark to a PDF
   * Adds a text watermark to a PDF
   * @param watermarkText Watermark text to add to the PDF (required) (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @param fontName Font Family Name for the watermark text; default is Times New Roman (optional)
   * @param fontSize Font Size in points of the text; default is 150 (optional)
   * @param fontColor Font color in hexadecimal or HTML color name; default is Red (optional)
   * @param fontTransparency Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editPdfWatermarkTextWithHttpInfo(String watermarkText, File inputFile, String fontName, BigDecimal fontSize, String fontColor, BigDecimal fontTransparency) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPdfWatermarkTextRequestBuilder(watermarkText, inputFile, fontName, fontSize, fontColor, fontTransparency);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPdfWatermarkText", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPdfWatermarkTextRequestBuilder(String watermarkText, File inputFile, String fontName, BigDecimal fontSize, String fontColor, BigDecimal fontTransparency) throws ApiException {
    // verify the required parameter 'watermarkText' is set
    if (watermarkText == null) {
      throw new ApiException(400, "Missing the required parameter 'watermarkText' when calling editPdfWatermarkText");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editPdfWatermarkText");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pdf/watermark/text";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (watermarkText != null) {
      localVarRequestBuilder.header("watermarkText", watermarkText.toString());
    }
    if (fontName != null) {
      localVarRequestBuilder.header("fontName", fontName.toString());
    }
    if (fontSize != null) {
      localVarRequestBuilder.header("fontSize", fontSize.toString());
    }
    if (fontColor != null) {
      localVarRequestBuilder.header("fontColor", fontColor.toString());
    }
    if (fontTransparency != null) {
      localVarRequestBuilder.header("fontTransparency", fontTransparency.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
