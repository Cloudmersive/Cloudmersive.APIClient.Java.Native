/*
 * securityapi
 * The security APIs help you detect and block security threats.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.StringAutomaticThreatDetection;
import com.cloudmersive.client.native.model.StringInsecureDeserializationJsonDetection;
import com.cloudmersive.client.native.model.StringSqlInjectionDetectionResult;
import com.cloudmersive.client.native.model.StringXssProtectionResult;
import com.cloudmersive.client.native.model.StringXxeDetectionResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:28:42.827276700-07:00[America/Los_Angeles]")
public class ContentThreatDetectionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ContentThreatDetectionApi() {
    this(new ApiClient());
  }

  public ContentThreatDetectionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Automatically detect threats in an input string
   * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
   * @param value User-facing text input. (required)
   * @return StringAutomaticThreatDetection
   * @throws ApiException if fails to make API call
   */
  public StringAutomaticThreatDetection contentThreatDetectionAutomaticThreatDetectionString(String value) throws ApiException {
    ApiResponse<StringAutomaticThreatDetection> localVarResponse = contentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo(value);
    return localVarResponse.getData();
  }

  /**
   * Automatically detect threats in an input string
   * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
   * @param value User-facing text input. (required)
   * @return ApiResponse&lt;StringAutomaticThreatDetection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringAutomaticThreatDetection> contentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo(String value) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = contentThreatDetectionAutomaticThreatDetectionStringRequestBuilder(value);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("contentThreatDetectionAutomaticThreatDetectionString", localVarResponse);
        }
        return new ApiResponse<StringAutomaticThreatDetection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StringAutomaticThreatDetection>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder contentThreatDetectionAutomaticThreatDetectionStringRequestBuilder(String value) throws ApiException {
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling contentThreatDetectionAutomaticThreatDetectionString");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security/threat-detection/content/automatic/detect/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(value));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check text input for SQL Injection (SQLI) attacks
   * Detects SQL Injection (SQLI) attacks from text input.
   * @param value User-facing text input. (required)
   * @return StringSqlInjectionDetectionResult
   * @throws ApiException if fails to make API call
   */
  public StringSqlInjectionDetectionResult contentThreatDetectionCheckSqlInjectionString(String value) throws ApiException {
    ApiResponse<StringSqlInjectionDetectionResult> localVarResponse = contentThreatDetectionCheckSqlInjectionStringWithHttpInfo(value);
    return localVarResponse.getData();
  }

  /**
   * Check text input for SQL Injection (SQLI) attacks
   * Detects SQL Injection (SQLI) attacks from text input.
   * @param value User-facing text input. (required)
   * @return ApiResponse&lt;StringSqlInjectionDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringSqlInjectionDetectionResult> contentThreatDetectionCheckSqlInjectionStringWithHttpInfo(String value) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = contentThreatDetectionCheckSqlInjectionStringRequestBuilder(value);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("contentThreatDetectionCheckSqlInjectionString", localVarResponse);
        }
        return new ApiResponse<StringSqlInjectionDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StringSqlInjectionDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder contentThreatDetectionCheckSqlInjectionStringRequestBuilder(String value) throws ApiException {
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling contentThreatDetectionCheckSqlInjectionString");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security/threat-detection/content/sql-injection/detect/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(value));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Protect text input from XML External Entity (XXE) attacks
   * Detects XXE (XML External Entity) attacks from XML text input.
   * @param value User-facing text input. (required)
   * @return StringXxeDetectionResult
   * @throws ApiException if fails to make API call
   */
  public StringXxeDetectionResult contentThreatDetectionCheckXxe(String value) throws ApiException {
    ApiResponse<StringXxeDetectionResult> localVarResponse = contentThreatDetectionCheckXxeWithHttpInfo(value);
    return localVarResponse.getData();
  }

  /**
   * Protect text input from XML External Entity (XXE) attacks
   * Detects XXE (XML External Entity) attacks from XML text input.
   * @param value User-facing text input. (required)
   * @return ApiResponse&lt;StringXxeDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringXxeDetectionResult> contentThreatDetectionCheckXxeWithHttpInfo(String value) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = contentThreatDetectionCheckXxeRequestBuilder(value);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("contentThreatDetectionCheckXxe", localVarResponse);
        }
        return new ApiResponse<StringXxeDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StringXxeDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder contentThreatDetectionCheckXxeRequestBuilder(String value) throws ApiException {
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling contentThreatDetectionCheckXxe");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security/threat-detection/content/xxe/detect/xml/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(value));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect Insecure Deserialization JSON (JID) attacks in a string
   * Detects Insecure Deserialization JSON (JID) attacks from text input.
   * @param value User-facing text input. (required)
   * @return StringInsecureDeserializationJsonDetection
   * @throws ApiException if fails to make API call
   */
  public StringInsecureDeserializationJsonDetection contentThreatDetectionDetectInsecureDeserializationJsonString(String value) throws ApiException {
    ApiResponse<StringInsecureDeserializationJsonDetection> localVarResponse = contentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo(value);
    return localVarResponse.getData();
  }

  /**
   * Detect Insecure Deserialization JSON (JID) attacks in a string
   * Detects Insecure Deserialization JSON (JID) attacks from text input.
   * @param value User-facing text input. (required)
   * @return ApiResponse&lt;StringInsecureDeserializationJsonDetection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringInsecureDeserializationJsonDetection> contentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo(String value) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = contentThreatDetectionDetectInsecureDeserializationJsonStringRequestBuilder(value);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("contentThreatDetectionDetectInsecureDeserializationJsonString", localVarResponse);
        }
        return new ApiResponse<StringInsecureDeserializationJsonDetection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StringInsecureDeserializationJsonDetection>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder contentThreatDetectionDetectInsecureDeserializationJsonStringRequestBuilder(String value) throws ApiException {
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling contentThreatDetectionDetectInsecureDeserializationJsonString");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security/threat-detection/content/insecure-deserialization/json/detect/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(value));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
   * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
   * @param value User-facing text input. (required)
   * @return StringXssProtectionResult
   * @throws ApiException if fails to make API call
   */
  public StringXssProtectionResult contentThreatDetectionProtectXss(String value) throws ApiException {
    ApiResponse<StringXssProtectionResult> localVarResponse = contentThreatDetectionProtectXssWithHttpInfo(value);
    return localVarResponse.getData();
  }

  /**
   * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
   * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
   * @param value User-facing text input. (required)
   * @return ApiResponse&lt;StringXssProtectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringXssProtectionResult> contentThreatDetectionProtectXssWithHttpInfo(String value) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = contentThreatDetectionProtectXssRequestBuilder(value);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("contentThreatDetectionProtectXss", localVarResponse);
        }
        return new ApiResponse<StringXssProtectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StringXssProtectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder contentThreatDetectionProtectXssRequestBuilder(String value) throws ApiException {
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling contentThreatDetectionProtectXss");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security/threat-detection/content/xss/detect/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(value));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
