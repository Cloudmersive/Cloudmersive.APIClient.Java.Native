/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.AutodetectGetInfoResult;
import com.cloudmersive.client.native.model.AutodetectToJpgResult;
import com.cloudmersive.client.native.model.AutodetectToPngResult;
import com.cloudmersive.client.native.model.AutodetectToThumbnailsResult;
import com.cloudmersive.client.native.model.CsvCollection;
import com.cloudmersive.client.native.model.DocxToJpgResult;
import com.cloudmersive.client.native.model.DocxToPngResult;
import com.cloudmersive.client.native.model.EmlToHtmlResult;
import com.cloudmersive.client.native.model.EmlToJpgResult;
import com.cloudmersive.client.native.model.EmlToPngResult;
import java.io.File;
import com.cloudmersive.client.native.model.GetFileTypeIconResult;
import com.cloudmersive.client.native.model.KeynoteToJpgResult;
import com.cloudmersive.client.native.model.KeynoteToPngResult;
import com.cloudmersive.client.native.model.MsgToHtmlResult;
import com.cloudmersive.client.native.model.MsgToJpgResult;
import com.cloudmersive.client.native.model.MsgToPngResult;
import com.cloudmersive.client.native.model.OdpToJpgResult;
import com.cloudmersive.client.native.model.OdpToPngResult;
import com.cloudmersive.client.native.model.OdsToJpgResult;
import com.cloudmersive.client.native.model.OdsToPngResult;
import com.cloudmersive.client.native.model.OdtToJpgResult;
import com.cloudmersive.client.native.model.OdtToPngResult;
import com.cloudmersive.client.native.model.PdfToJpgResult;
import com.cloudmersive.client.native.model.PdfToPngResult;
import com.cloudmersive.client.native.model.PptxToPngResult;
import com.cloudmersive.client.native.model.RtfToJpgResult;
import com.cloudmersive.client.native.model.RtfToPngResult;
import com.cloudmersive.client.native.model.TextConversionResult;
import com.cloudmersive.client.native.model.XlsxToPngResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:28:09.672516700-07:00[America/Los_Angeles]")
public class ConvertDocumentApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ConvertDocumentApi() {
    this(new ApiClient());
  }

  public ConvertDocumentApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get document type information
   * Auto-detects a document&#39;s type information; does not require file extension.  Analyzes file contents to confirm file type.  Even if no file extension is present, the auto-detect system will reliably analyze the contents of the file and identify its file type.  Supports over 100 image file formats, Office document file formats, PDF, and more.
   * @param inputFile Input file to perform the operation on. (required)
   * @return AutodetectGetInfoResult
   * @throws ApiException if fails to make API call
   */
  public AutodetectGetInfoResult convertDocumentAutodetectGetInfo(File inputFile) throws ApiException {
    ApiResponse<AutodetectGetInfoResult> localVarResponse = convertDocumentAutodetectGetInfoWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get document type information
   * Auto-detects a document&#39;s type information; does not require file extension.  Analyzes file contents to confirm file type.  Even if no file extension is present, the auto-detect system will reliably analyze the contents of the file and identify its file type.  Supports over 100 image file formats, Office document file formats, PDF, and more.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;AutodetectGetInfoResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AutodetectGetInfoResult> convertDocumentAutodetectGetInfoWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectGetInfoRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectGetInfo", localVarResponse);
        }
        return new ApiResponse<AutodetectGetInfoResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AutodetectGetInfoResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectGetInfoRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectGetInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/get-info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Document to JPG/JPEG image array
   * Automatically detect file type and convert it to an array of JPG/JPEG Images.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return AutodetectToJpgResult
   * @throws ApiException if fails to make API call
   */
  public AutodetectToJpgResult convertDocumentAutodetectToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<AutodetectToJpgResult> localVarResponse = convertDocumentAutodetectToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert Document to JPG/JPEG image array
   * Automatically detect file type and convert it to an array of JPG/JPEG Images.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;AutodetectToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AutodetectToJpgResult> convertDocumentAutodetectToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectToJpg", localVarResponse);
        }
        return new ApiResponse<AutodetectToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AutodetectToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Document to PDF
   * Automatically detect file type and convert it to PDF.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentAutodetectToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentAutodetectToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Document to PDF
   * Automatically detect file type and convert it to PDF.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentAutodetectToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Document to PNG array
   * Automatically detect file type and convert it to an array of PNG images.  Supports all of the major Office document file formats, over 100 image formats, and even multi-page TIFF files.
   * @param inputFile Input file to perform the operation on. (required)
   * @return AutodetectToPngResult
   * @throws ApiException if fails to make API call
   */
  public AutodetectToPngResult convertDocumentAutodetectToPngArray(File inputFile) throws ApiException {
    ApiResponse<AutodetectToPngResult> localVarResponse = convertDocumentAutodetectToPngArrayWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Document to PNG array
   * Automatically detect file type and convert it to an array of PNG images.  Supports all of the major Office document file formats, over 100 image formats, and even multi-page TIFF files.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;AutodetectToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AutodetectToPngResult> convertDocumentAutodetectToPngArrayWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectToPngArrayRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectToPngArray", localVarResponse);
        }
        return new ApiResponse<AutodetectToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AutodetectToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectToPngArrayRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectToPngArray");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert File to Thumbnail Image
   * Automatically detect file type and convert it to a PNG thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048.
   * @param inputFile Input file to perform the operation on. (required)
   * @param maxWidth Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param maxHeight Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param extension Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentAutodetectToThumbnail(File inputFile, Integer maxWidth, Integer maxHeight, String extension) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentAutodetectToThumbnailWithHttpInfo(inputFile, maxWidth, maxHeight, extension);
    return localVarResponse.getData();
  }

  /**
   * Convert File to Thumbnail Image
   * Automatically detect file type and convert it to a PNG thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048.
   * @param inputFile Input file to perform the operation on. (required)
   * @param maxWidth Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param maxHeight Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param extension Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentAutodetectToThumbnailWithHttpInfo(File inputFile, Integer maxWidth, Integer maxHeight, String extension) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectToThumbnailRequestBuilder(inputFile, maxWidth, maxHeight, extension);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectToThumbnail", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectToThumbnailRequestBuilder(File inputFile, Integer maxWidth, Integer maxHeight, String extension) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectToThumbnail");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/to/thumbnail";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (maxWidth != null) {
      localVarRequestBuilder.header("maxWidth", maxWidth.toString());
    }
    if (maxHeight != null) {
      localVarRequestBuilder.header("maxHeight", maxHeight.toString());
    }
    if (extension != null) {
      localVarRequestBuilder.header("extension", extension.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert File to Thumbnail Image Object
   * Automatically detect file type and convert it to an array of PNG thumbnails, returned as an object. May specify the number of pages for multiple thumbnails; default is one thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048.
   * @param inputFile Input file to perform the operation on. (required)
   * @param pages Optional; Specify how many pages of the document will be converted to thumbnails. Default is 1 page. (optional)
   * @param maxWidth Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param maxHeight Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param extension Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. (optional)
   * @return AutodetectToThumbnailsResult
   * @throws ApiException if fails to make API call
   */
  public AutodetectToThumbnailsResult convertDocumentAutodetectToThumbnailsAdvanced(File inputFile, Integer pages, Integer maxWidth, Integer maxHeight, String extension) throws ApiException {
    ApiResponse<AutodetectToThumbnailsResult> localVarResponse = convertDocumentAutodetectToThumbnailsAdvancedWithHttpInfo(inputFile, pages, maxWidth, maxHeight, extension);
    return localVarResponse.getData();
  }

  /**
   * Convert File to Thumbnail Image Object
   * Automatically detect file type and convert it to an array of PNG thumbnails, returned as an object. May specify the number of pages for multiple thumbnails; default is one thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048.
   * @param inputFile Input file to perform the operation on. (required)
   * @param pages Optional; Specify how many pages of the document will be converted to thumbnails. Default is 1 page. (optional)
   * @param maxWidth Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param maxHeight Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128. (optional)
   * @param extension Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon. (optional)
   * @return ApiResponse&lt;AutodetectToThumbnailsResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AutodetectToThumbnailsResult> convertDocumentAutodetectToThumbnailsAdvancedWithHttpInfo(File inputFile, Integer pages, Integer maxWidth, Integer maxHeight, String extension) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectToThumbnailsAdvancedRequestBuilder(inputFile, pages, maxWidth, maxHeight, extension);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectToThumbnailsAdvanced", localVarResponse);
        }
        return new ApiResponse<AutodetectToThumbnailsResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AutodetectToThumbnailsResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectToThumbnailsAdvancedRequestBuilder(File inputFile, Integer pages, Integer maxWidth, Integer maxHeight, String extension) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectToThumbnailsAdvanced");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/to/thumbnail/advanced";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (pages != null) {
      localVarRequestBuilder.header("pages", pages.toString());
    }
    if (maxWidth != null) {
      localVarRequestBuilder.header("maxWidth", maxWidth.toString());
    }
    if (maxHeight != null) {
      localVarRequestBuilder.header("maxHeight", maxHeight.toString());
    }
    if (extension != null) {
      localVarRequestBuilder.header("extension", extension.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Document to Text (txt)
   * Automatically detect file type and convert it to Text.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.  For spreadsheets, all worksheets will be included.  If you wish to exclude certain pages, worksheets, slides, etc. use the Split document API first, or the delete pages/slides/worksheet APIs first to adjust the document to the target state prior to converting to text.
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentAutodetectToTxt(File inputFile, String textFormattingMode) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentAutodetectToTxtWithHttpInfo(inputFile, textFormattingMode);
    return localVarResponse.getData();
  }

  /**
   * Convert Document to Text (txt)
   * Automatically detect file type and convert it to Text.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.  For spreadsheets, all worksheets will be included.  If you wish to exclude certain pages, worksheets, slides, etc. use the Split document API first, or the delete pages/slides/worksheet APIs first to adjust the document to the target state prior to converting to text.
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentAutodetectToTxtWithHttpInfo(File inputFile, String textFormattingMode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentAutodetectToTxtRequestBuilder(inputFile, textFormattingMode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentAutodetectToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentAutodetectToTxtRequestBuilder(File inputFile, String textFormattingMode) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentAutodetectToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (textFormattingMode != null) {
      localVarRequestBuilder.header("textFormattingMode", textFormattingMode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Multiple CSV Files into a Single XLSX Spreadsheet
   * Convert multiple Comma-Separated Values (CSV) files into a single Excel XLSX Spreadsheet, with one worksheet corresponding to each CSV file.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param worksheetNames Optional; Specify the name of each CSV&#39;s worksheet in order, separated with commas (e.g. \&quot;worksheet1,worksheet2,worksheet3\&quot;). Defaults to the names of the input CSV files. Recommended when inputting the files directly, without file names. (optional)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentCsvMultiToXlsx(File inputFile1, File inputFile2, String worksheetNames, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentCsvMultiToXlsxWithHttpInfo(inputFile1, inputFile2, worksheetNames, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Convert Multiple CSV Files into a Single XLSX Spreadsheet
   * Convert multiple Comma-Separated Values (CSV) files into a single Excel XLSX Spreadsheet, with one worksheet corresponding to each CSV file.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param worksheetNames Optional; Specify the name of each CSV&#39;s worksheet in order, separated with commas (e.g. \&quot;worksheet1,worksheet2,worksheet3\&quot;). Defaults to the names of the input CSV files. Recommended when inputting the files directly, without file names. (optional)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentCsvMultiToXlsxWithHttpInfo(File inputFile1, File inputFile2, String worksheetNames, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentCsvMultiToXlsxRequestBuilder(inputFile1, inputFile2, worksheetNames, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentCsvMultiToXlsx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentCsvMultiToXlsxRequestBuilder(File inputFile1, File inputFile2, String worksheetNames, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling convertDocumentCsvMultiToXlsx");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling convertDocumentCsvMultiToXlsx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/csv/multi/to/xlsx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (worksheetNames != null) {
      localVarRequestBuilder.header("worksheetNames", worksheetNames.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert CSV to HTML document
   * Convert Comma-Separated Values (CSV) file to HTML document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentCsvToHtml(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentCsvToHtmlWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert CSV to HTML document
   * Convert Comma-Separated Values (CSV) file to HTML document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentCsvToHtmlWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentCsvToHtmlRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentCsvToHtml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentCsvToHtmlRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentCsvToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/csv/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert CSV to PDF document
   * Convert Comma-Separated Values (CSV) file to PDF document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentCsvToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentCsvToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert CSV to PDF document
   * Convert Comma-Separated Values (CSV) file to PDF document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentCsvToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentCsvToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentCsvToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentCsvToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentCsvToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/csv/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert CSV to Excel XLSX Spreadsheet
   * Convert CSV file to Office Excel XLSX Workbooks file format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentCsvToXlsx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentCsvToXlsxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert CSV to Excel XLSX Spreadsheet
   * Convert CSV file to Office Excel XLSX Workbooks file format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentCsvToXlsxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentCsvToXlsxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentCsvToXlsx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentCsvToXlsxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentCsvToXlsx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/csv/to/xlsx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOC (97-03) Document to DOCX
   * Convert/upgrade Office Word (97-2003 Format) Documents (doc) to the modern DOCX format
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentDocToDocx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentDocToDocxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOC (97-03) Document to DOCX
   * Convert/upgrade Office Word (97-2003 Format) Documents (doc) to the modern DOCX format
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentDocToDocxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocToDocxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocToDocx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocToDocxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocToDocx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/doc/to/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOC (97-03) Document to PDF
   * Convert Office Word (97-2003 Format) Documents (doc) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentDocToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentDocToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOC (97-03) Document to PDF
   * Convert Office Word (97-2003 Format) Documents (doc) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentDocToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/doc/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOC (97-03) Document to Text (txt)
   * Convert Office Word DOC (97-03) Document (doc) to text
   * @param inputFile Input file to perform the operation on. (required)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentDocToTxt(File inputFile) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentDocToTxtWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOC (97-03) Document to Text (txt)
   * Convert Office Word DOC (97-03) Document (doc) to text
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentDocToTxtWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocToTxtRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocToTxtRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/doc/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to Legacy Word DOC (97-03)
   * Convert/downgrade modern Office Word DOCX Documents (DOCX) to the legacy Word DOC (97-2003 Format) format
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentDocxToDoc(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentDocxToDocWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to Legacy Word DOC (97-03)
   * Convert/downgrade modern Office Word DOCX Documents (DOCX) to the legacy Word DOC (97-2003 Format) format
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentDocxToDocWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToDocRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToDoc", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToDocRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToDoc");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/doc";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to HTML Document
   * Convert Office Word Document (DOCX) to HTML Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentDocxToHtml(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentDocxToHtmlWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to HTML Document
   * Convert Office Word Document (DOCX) to HTML Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentDocxToHtmlWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToHtmlRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToHtml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToHtmlRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to JPG/JPEG image array
   * Converts an Office Word Document (DOCX) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return DocxToJpgResult
   * @throws ApiException if fails to make API call
   */
  public DocxToJpgResult convertDocumentDocxToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<DocxToJpgResult> localVarResponse = convertDocumentDocxToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to JPG/JPEG image array
   * Converts an Office Word Document (DOCX) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;DocxToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxToJpgResult> convertDocumentDocxToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToJpg", localVarResponse);
        }
        return new ApiResponse<DocxToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to PDF
   * Convert Office Word Documents (docx) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentDocxToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentDocxToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to PDF
   * Convert Office Word Documents (docx) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentDocxToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to PNG image array
   * Converts an Office Word Document (DOCX) file to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocxToPngResult
   * @throws ApiException if fails to make API call
   */
  public DocxToPngResult convertDocumentDocxToPng(File inputFile) throws ApiException {
    ApiResponse<DocxToPngResult> localVarResponse = convertDocumentDocxToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to PNG image array
   * Converts an Office Word Document (DOCX) file to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocxToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxToPngResult> convertDocumentDocxToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToPng", localVarResponse);
        }
        return new ApiResponse<DocxToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to RTF
   * Convert an Office Word Document (DOCX) to Rich Text Format Document (RTF)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentDocxToRtf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentDocxToRtfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to RTF
   * Convert an Office Word Document (DOCX) to Rich Text Format Document (RTF)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentDocxToRtfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToRtfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToRtf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToRtfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToRtf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/rtf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Word DOCX Document to Text (txt)
   * Convert Office Word Documents (docx) to text
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;minimizeWhitespace&#39;. (optional)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentDocxToTxt(File inputFile, String textFormattingMode) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentDocxToTxtWithHttpInfo(inputFile, textFormattingMode);
    return localVarResponse.getData();
  }

  /**
   * Convert Word DOCX Document to Text (txt)
   * Convert Office Word Documents (docx) to text
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;minimizeWhitespace&#39;. (optional)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentDocxToTxtWithHttpInfo(File inputFile, String textFormattingMode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentDocxToTxtRequestBuilder(inputFile, textFormattingMode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentDocxToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentDocxToTxtRequestBuilder(File inputFile, String textFormattingMode) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentDocxToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/docx/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (textFormattingMode != null) {
      localVarRequestBuilder.header("textFormattingMode", textFormattingMode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email EML file to HTML string
   * Convert Outlook Email EML file to HTML string and attachments. Supports images if they are base 64 inline.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @param includeAttachments Optional; If false, the response object will not include any attachment files from the input file. Default is true. (optional)
   * @return EmlToHtmlResult
   * @throws ApiException if fails to make API call
   */
  public EmlToHtmlResult convertDocumentEmlToHtml(File inputFile, Boolean bodyOnly, Boolean includeAttachments) throws ApiException {
    ApiResponse<EmlToHtmlResult> localVarResponse = convertDocumentEmlToHtmlWithHttpInfo(inputFile, bodyOnly, includeAttachments);
    return localVarResponse.getData();
  }

  /**
   * Convert Email EML file to HTML string
   * Convert Outlook Email EML file to HTML string and attachments. Supports images if they are base 64 inline.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @param includeAttachments Optional; If false, the response object will not include any attachment files from the input file. Default is true. (optional)
   * @return ApiResponse&lt;EmlToHtmlResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmlToHtmlResult> convertDocumentEmlToHtmlWithHttpInfo(File inputFile, Boolean bodyOnly, Boolean includeAttachments) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentEmlToHtmlRequestBuilder(inputFile, bodyOnly, includeAttachments);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentEmlToHtml", localVarResponse);
        }
        return new ApiResponse<EmlToHtmlResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmlToHtmlResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentEmlToHtmlRequestBuilder(File inputFile, Boolean bodyOnly, Boolean includeAttachments) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentEmlToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/eml/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (bodyOnly != null) {
      localVarRequestBuilder.header("bodyOnly", bodyOnly.toString());
    }
    if (includeAttachments != null) {
      localVarRequestBuilder.header("includeAttachments", includeAttachments.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email EML file to JPG/JPEG image array
   * Converts an Outlook Email File (EML) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return EmlToJpgResult
   * @throws ApiException if fails to make API call
   */
  public EmlToJpgResult convertDocumentEmlToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<EmlToJpgResult> localVarResponse = convertDocumentEmlToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert Email EML file to JPG/JPEG image array
   * Converts an Outlook Email File (EML) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;EmlToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmlToJpgResult> convertDocumentEmlToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentEmlToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentEmlToJpg", localVarResponse);
        }
        return new ApiResponse<EmlToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmlToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentEmlToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentEmlToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/eml/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email EML file to PDF document
   * Convert Outlook Email EML file to PDF document. Supports images if they are base 64 inline.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentEmlToPdf(File inputFile, Boolean bodyOnly) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentEmlToPdfWithHttpInfo(inputFile, bodyOnly);
    return localVarResponse.getData();
  }

  /**
   * Convert Email EML file to PDF document
   * Convert Outlook Email EML file to PDF document. Supports images if they are base 64 inline.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentEmlToPdfWithHttpInfo(File inputFile, Boolean bodyOnly) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentEmlToPdfRequestBuilder(inputFile, bodyOnly);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentEmlToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentEmlToPdfRequestBuilder(File inputFile, Boolean bodyOnly) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentEmlToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/eml/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (bodyOnly != null) {
      localVarRequestBuilder.header("bodyOnly", bodyOnly.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email EML file to PNG image array
   * Converts an Outlook Email File (EML) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return EmlToPngResult
   * @throws ApiException if fails to make API call
   */
  public EmlToPngResult convertDocumentEmlToPng(File inputFile) throws ApiException {
    ApiResponse<EmlToPngResult> localVarResponse = convertDocumentEmlToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Email EML file to PNG image array
   * Converts an Outlook Email File (EML) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;EmlToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmlToPngResult> convertDocumentEmlToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentEmlToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentEmlToPng", localVarResponse);
        }
        return new ApiResponse<EmlToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmlToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentEmlToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentEmlToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/eml/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get PNG icon file for the file extension
   * Returns a PNG icon for the given file format extension as a file for download. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.
   * @param fileExtension Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. (required)
   * @param iconSize Optional; The desired width of the icon, preserving its aspect ratio. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentGetFileTypeIcon(String fileExtension, Integer iconSize) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentGetFileTypeIconWithHttpInfo(fileExtension, iconSize);
    return localVarResponse.getData();
  }

  /**
   * Get PNG icon file for the file extension
   * Returns a PNG icon for the given file format extension as a file for download. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.
   * @param fileExtension Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. (required)
   * @param iconSize Optional; The desired width of the icon, preserving its aspect ratio. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentGetFileTypeIconWithHttpInfo(String fileExtension, Integer iconSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentGetFileTypeIconRequestBuilder(fileExtension, iconSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentGetFileTypeIcon", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentGetFileTypeIconRequestBuilder(String fileExtension, Integer iconSize) throws ApiException {
    // verify the required parameter 'fileExtension' is set
    if (fileExtension == null) {
      throw new ApiException(400, "Missing the required parameter 'fileExtension' when calling convertDocumentGetFileTypeIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/get-icon";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileExtension != null) {
      localVarRequestBuilder.header("fileExtension", fileExtension.toString());
    }
    if (iconSize != null) {
      localVarRequestBuilder.header("iconSize", iconSize.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get PNG icon byte array for the file extension
   * Returns a PNG icon for the given file format extension directly as a byte array. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.
   * @param fileExtension Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. (required)
   * @param iconSize Optional; The desired width of the icon, preserving its aspect ratio. (optional)
   * @return GetFileTypeIconResult
   * @throws ApiException if fails to make API call
   */
  public GetFileTypeIconResult convertDocumentGetFileTypeIconAdvanced(String fileExtension, Integer iconSize) throws ApiException {
    ApiResponse<GetFileTypeIconResult> localVarResponse = convertDocumentGetFileTypeIconAdvancedWithHttpInfo(fileExtension, iconSize);
    return localVarResponse.getData();
  }

  /**
   * Get PNG icon byte array for the file extension
   * Returns a PNG icon for the given file format extension directly as a byte array. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.
   * @param fileExtension Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters. (required)
   * @param iconSize Optional; The desired width of the icon, preserving its aspect ratio. (optional)
   * @return ApiResponse&lt;GetFileTypeIconResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetFileTypeIconResult> convertDocumentGetFileTypeIconAdvancedWithHttpInfo(String fileExtension, Integer iconSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentGetFileTypeIconAdvancedRequestBuilder(fileExtension, iconSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentGetFileTypeIconAdvanced", localVarResponse);
        }
        return new ApiResponse<GetFileTypeIconResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetFileTypeIconResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentGetFileTypeIconAdvancedRequestBuilder(String fileExtension, Integer iconSize) throws ApiException {
    // verify the required parameter 'fileExtension' is set
    if (fileExtension == null) {
      throw new ApiException(400, "Missing the required parameter 'fileExtension' when calling convertDocumentGetFileTypeIconAdvanced");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/autodetect/get-icon/advanced";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileExtension != null) {
      localVarRequestBuilder.header("fileExtension", fileExtension.toString());
    }
    if (iconSize != null) {
      localVarRequestBuilder.header("iconSize", iconSize.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert HTML document file to PDF Document
   * Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to PDF.  To use external files such as images, use an absolute URL to the file.
   * @param inputFile Input file to perform the operation on. (required)
   * @param includeBackgroundGraphics Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true. (optional)
   * @param scaleFactor Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentHtmlToPdf(File inputFile, Boolean includeBackgroundGraphics, Integer scaleFactor) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentHtmlToPdfWithHttpInfo(inputFile, includeBackgroundGraphics, scaleFactor);
    return localVarResponse.getData();
  }

  /**
   * Convert HTML document file to PDF Document
   * Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to PDF.  To use external files such as images, use an absolute URL to the file.
   * @param inputFile Input file to perform the operation on. (required)
   * @param includeBackgroundGraphics Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true. (optional)
   * @param scaleFactor Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentHtmlToPdfWithHttpInfo(File inputFile, Boolean includeBackgroundGraphics, Integer scaleFactor) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentHtmlToPdfRequestBuilder(inputFile, includeBackgroundGraphics, scaleFactor);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentHtmlToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentHtmlToPdfRequestBuilder(File inputFile, Boolean includeBackgroundGraphics, Integer scaleFactor) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentHtmlToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/html/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (includeBackgroundGraphics != null) {
      localVarRequestBuilder.header("includeBackgroundGraphics", includeBackgroundGraphics.toString());
    }
    if (scaleFactor != null) {
      localVarRequestBuilder.header("scaleFactor", scaleFactor.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert HTML document file to PNG image array
   * Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to an array of PNG images, one for each page.  To use external files in your HTML such as images, use an absolute URL to the file.
   * @param inputFile Input file to perform the operation on. (required)
   * @return PdfToPngResult
   * @throws ApiException if fails to make API call
   */
  public PdfToPngResult convertDocumentHtmlToPng(File inputFile) throws ApiException {
    ApiResponse<PdfToPngResult> localVarResponse = convertDocumentHtmlToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert HTML document file to PNG image array
   * Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to an array of PNG images, one for each page.  To use external files in your HTML such as images, use an absolute URL to the file.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;PdfToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PdfToPngResult> convertDocumentHtmlToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentHtmlToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentHtmlToPng", localVarResponse);
        }
        return new ApiResponse<PdfToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PdfToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentHtmlToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentHtmlToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/html/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * HTML Document file to Text (txt)
   * HTML document to text
   * @param inputFile Input file to perform the operation on. (required)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentHtmlToTxt(File inputFile) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentHtmlToTxtWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * HTML Document file to Text (txt)
   * HTML document to text
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentHtmlToTxtWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentHtmlToTxtRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentHtmlToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentHtmlToTxtRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentHtmlToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/html/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Keynote Presentation (KEY) to JPG/JPEG image array
   * Converts a Mac Keynote Presentation (KEY) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return KeynoteToJpgResult
   * @throws ApiException if fails to make API call
   */
  public KeynoteToJpgResult convertDocumentKeynoteToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<KeynoteToJpgResult> localVarResponse = convertDocumentKeynoteToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert Keynote Presentation (KEY) to JPG/JPEG image array
   * Converts a Mac Keynote Presentation (KEY) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;KeynoteToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeynoteToJpgResult> convertDocumentKeynoteToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentKeynoteToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentKeynoteToJpg", localVarResponse);
        }
        return new ApiResponse<KeynoteToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeynoteToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentKeynoteToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentKeynoteToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/key/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Keynote Presentation (KEY) to PDF
   * Convert Mac Keynote Presentation (KEY) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentKeynoteToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentKeynoteToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Keynote Presentation (KEY) to PDF
   * Convert Mac Keynote Presentation (KEY) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentKeynoteToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentKeynoteToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentKeynoteToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentKeynoteToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentKeynoteToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/key/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Keynote Presentation (KEY) to PNG image array
   * Converts a Mac Keynote Presentation (KEY) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return KeynoteToPngResult
   * @throws ApiException if fails to make API call
   */
  public KeynoteToPngResult convertDocumentKeynoteToPng(File inputFile) throws ApiException {
    ApiResponse<KeynoteToPngResult> localVarResponse = convertDocumentKeynoteToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Keynote Presentation (KEY) to PNG image array
   * Converts a Mac Keynote Presentation (KEY) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;KeynoteToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeynoteToPngResult> convertDocumentKeynoteToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentKeynoteToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentKeynoteToPng", localVarResponse);
        }
        return new ApiResponse<KeynoteToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeynoteToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentKeynoteToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentKeynoteToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/key/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Keynote Presentation (KEY) to PPTX
   * Convert Mac Keynote Presentation (KEY) to PowerPoint Presentation (PPTX)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentKeynoteToPptx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentKeynoteToPptxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Keynote Presentation (KEY) to PPTX
   * Convert Mac Keynote Presentation (KEY) to PowerPoint Presentation (PPTX)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentKeynoteToPptxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentKeynoteToPptxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentKeynoteToPptx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentKeynoteToPptxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentKeynoteToPptx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/key/to/pptx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email MSG file to HTML string
   * Convert Outlook Email MSG file to HTML string and attachments. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the MSG. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @param includeAttachments Optional; If false, the response object will not include any attachment files from the input file. Default is true. (optional)
   * @return MsgToHtmlResult
   * @throws ApiException if fails to make API call
   */
  public MsgToHtmlResult convertDocumentMsgToHtml(File inputFile, Boolean bodyOnly, Boolean includeAttachments) throws ApiException {
    ApiResponse<MsgToHtmlResult> localVarResponse = convertDocumentMsgToHtmlWithHttpInfo(inputFile, bodyOnly, includeAttachments);
    return localVarResponse.getData();
  }

  /**
   * Convert Email MSG file to HTML string
   * Convert Outlook Email MSG file to HTML string and attachments. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the MSG. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @param includeAttachments Optional; If false, the response object will not include any attachment files from the input file. Default is true. (optional)
   * @return ApiResponse&lt;MsgToHtmlResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MsgToHtmlResult> convertDocumentMsgToHtmlWithHttpInfo(File inputFile, Boolean bodyOnly, Boolean includeAttachments) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentMsgToHtmlRequestBuilder(inputFile, bodyOnly, includeAttachments);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentMsgToHtml", localVarResponse);
        }
        return new ApiResponse<MsgToHtmlResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MsgToHtmlResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentMsgToHtmlRequestBuilder(File inputFile, Boolean bodyOnly, Boolean includeAttachments) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentMsgToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/msg/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (bodyOnly != null) {
      localVarRequestBuilder.header("bodyOnly", bodyOnly.toString());
    }
    if (includeAttachments != null) {
      localVarRequestBuilder.header("includeAttachments", includeAttachments.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email MSG file to JPG/JPEG image array
   * Converts an Outlook Message File (MSG) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return MsgToJpgResult
   * @throws ApiException if fails to make API call
   */
  public MsgToJpgResult convertDocumentMsgToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<MsgToJpgResult> localVarResponse = convertDocumentMsgToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert Email MSG file to JPG/JPEG image array
   * Converts an Outlook Message File (MSG) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;MsgToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MsgToJpgResult> convertDocumentMsgToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentMsgToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentMsgToJpg", localVarResponse);
        }
        return new ApiResponse<MsgToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MsgToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentMsgToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentMsgToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/msg/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email MSG file to PDF document
   * Convert Outlook Email MSG file to PDF document. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentMsgToPdf(File inputFile, Boolean bodyOnly) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentMsgToPdfWithHttpInfo(inputFile, bodyOnly);
    return localVarResponse.getData();
  }

  /**
   * Convert Email MSG file to PDF document
   * Convert Outlook Email MSG file to PDF document. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.
   * @param inputFile Input file to perform the operation on. (required)
   * @param bodyOnly Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentMsgToPdfWithHttpInfo(File inputFile, Boolean bodyOnly) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentMsgToPdfRequestBuilder(inputFile, bodyOnly);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentMsgToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentMsgToPdfRequestBuilder(File inputFile, Boolean bodyOnly) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentMsgToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/msg/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (bodyOnly != null) {
      localVarRequestBuilder.header("bodyOnly", bodyOnly.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Email MSG file to PNG image array
   * Converts an Outlook Email Message File (MSG) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return MsgToPngResult
   * @throws ApiException if fails to make API call
   */
  public MsgToPngResult convertDocumentMsgToPng(File inputFile) throws ApiException {
    ApiResponse<MsgToPngResult> localVarResponse = convertDocumentMsgToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Email MSG file to PNG image array
   * Converts an Outlook Email Message File (MSG) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;MsgToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MsgToPngResult> convertDocumentMsgToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentMsgToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentMsgToPng", localVarResponse);
        }
        return new ApiResponse<MsgToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MsgToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentMsgToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentMsgToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/msg/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODP Presentation to JPG/JPEG image array
   * Converts an Open Document Presentation (ODP) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return OdpToJpgResult
   * @throws ApiException if fails to make API call
   */
  public OdpToJpgResult convertDocumentOdpToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<OdpToJpgResult> localVarResponse = convertDocumentOdpToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert ODP Presentation to JPG/JPEG image array
   * Converts an Open Document Presentation (ODP) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;OdpToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OdpToJpgResult> convertDocumentOdpToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdpToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdpToJpg", localVarResponse);
        }
        return new ApiResponse<OdpToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OdpToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdpToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdpToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odp/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODP Presentation to PDF
   * Convert Office Open Document Presentation (ODP) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentOdpToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentOdpToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODP Presentation to PDF
   * Convert Office Open Document Presentation (ODP) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentOdpToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdpToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdpToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdpToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdpToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odp/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODP Presentation to PNG image array
   * Converts an Office Open Document Presentation (ODP) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return OdpToPngResult
   * @throws ApiException if fails to make API call
   */
  public OdpToPngResult convertDocumentOdpToPng(File inputFile) throws ApiException {
    ApiResponse<OdpToPngResult> localVarResponse = convertDocumentOdpToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODP Presentation to PNG image array
   * Converts an Office Open Document Presentation (ODP) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;OdpToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OdpToPngResult> convertDocumentOdpToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdpToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdpToPng", localVarResponse);
        }
        return new ApiResponse<OdpToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OdpToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdpToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdpToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odp/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODP Presentation to PPTX
   * Convert Office Open Document Presentation (ODP) to PowerPoint Presentation (PPTX)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentOdpToPptx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentOdpToPptxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODP Presentation to PPTX
   * Convert Office Open Document Presentation (ODP) to PowerPoint Presentation (PPTX)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentOdpToPptxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdpToPptxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdpToPptx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdpToPptxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdpToPptx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odp/to/pptx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODS Spreadsheet to JPG/JPEG image array
   * Converts an Open Document Spreadsheet (ODS) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return OdsToJpgResult
   * @throws ApiException if fails to make API call
   */
  public OdsToJpgResult convertDocumentOdsToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<OdsToJpgResult> localVarResponse = convertDocumentOdsToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert ODS Spreadsheet to JPG/JPEG image array
   * Converts an Open Document Spreadsheet (ODS) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;OdsToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OdsToJpgResult> convertDocumentOdsToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdsToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdsToJpg", localVarResponse);
        }
        return new ApiResponse<OdsToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OdsToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdsToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdsToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/ods/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODS Spreadsheet to PDF
   * Convert Office Open Document Spreadsheet (ODS) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentOdsToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentOdsToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODS Spreadsheet to PDF
   * Convert Office Open Document Spreadsheet (ODS) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentOdsToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdsToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdsToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdsToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdsToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/ods/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODS Spreadsheet to PNG image array
   * Converts an Office Open Document Spreadsheet (ODS) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return OdsToPngResult
   * @throws ApiException if fails to make API call
   */
  public OdsToPngResult convertDocumentOdsToPng(File inputFile) throws ApiException {
    ApiResponse<OdsToPngResult> localVarResponse = convertDocumentOdsToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODS Spreadsheet to PNG image array
   * Converts an Office Open Document Spreadsheet (ODS) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;OdsToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OdsToPngResult> convertDocumentOdsToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdsToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdsToPng", localVarResponse);
        }
        return new ApiResponse<OdsToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OdsToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdsToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdsToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/ods/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODS Spreadsheet to XLSX
   * Convert Office Open Document Spreadsheet (ODS) to Excel Spreadsheet (XLSX)
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentOdsToXlsx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentOdsToXlsxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODS Spreadsheet to XLSX
   * Convert Office Open Document Spreadsheet (ODS) to Excel Spreadsheet (XLSX)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentOdsToXlsxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdsToXlsxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdsToXlsx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdsToXlsxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdsToXlsx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/ods/to/xlsx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODT Text File to Word DOCX
   * Convert Office Open Document Text File (ODT) to Word DOCX Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentOdtToDocx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentOdtToDocxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODT Text File to Word DOCX
   * Convert Office Open Document Text File (ODT) to Word DOCX Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentOdtToDocxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdtToDocxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdtToDocx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdtToDocxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdtToDocx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odt/to/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODT Text File to JPG/JPEG image array
   * Converts an Open Document Text File (ODT) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return OdtToJpgResult
   * @throws ApiException if fails to make API call
   */
  public OdtToJpgResult convertDocumentOdtToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<OdtToJpgResult> localVarResponse = convertDocumentOdtToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert ODT Text File to JPG/JPEG image array
   * Converts an Open Document Text File (ODT) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;OdtToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OdtToJpgResult> convertDocumentOdtToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdtToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdtToJpg", localVarResponse);
        }
        return new ApiResponse<OdtToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OdtToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdtToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdtToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odt/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODT Text File to PDF
   * Convert Office Open Document Text File (ODT) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentOdtToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentOdtToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODT Text File to PDF
   * Convert Office Open Document Text File (ODT) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentOdtToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdtToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdtToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdtToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdtToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odt/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert ODT Text File to PNG image array
   * Converts an Office Open Document Text File (ODT) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return OdtToPngResult
   * @throws ApiException if fails to make API call
   */
  public OdtToPngResult convertDocumentOdtToPng(File inputFile) throws ApiException {
    ApiResponse<OdtToPngResult> localVarResponse = convertDocumentOdtToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert ODT Text File to PNG image array
   * Converts an Office Open Document Text File (ODT) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;OdtToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OdtToPngResult> convertDocumentOdtToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentOdtToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentOdtToPng", localVarResponse);
        }
        return new ApiResponse<OdtToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OdtToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentOdtToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentOdtToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/odt/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF to Word DOCX Document
   * Convert standard PDF to Office Word Documents (docx).    Converts a PDF at high fidelity into Word format, where it can be easily edited and processed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPdfToDocx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPdfToDocxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF to Word DOCX Document
   * Convert standard PDF to Office Word Documents (docx).    Converts a PDF at high fidelity into Word format, where it can be easily edited and processed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPdfToDocxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToDocxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToDocx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToDocxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToDocx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF to Word DOCX Document based on rasterized version of the PDF
   * Convert standard PDF to Office Word Documents (docx), but first rasterize the PDF.    Converts a PDF at high fidelity into Word format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPdfToDocxRasterize(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPdfToDocxRasterizeWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF to Word DOCX Document based on rasterized version of the PDF
   * Convert standard PDF to Office Word Documents (docx), but first rasterize the PDF.    Converts a PDF at high fidelity into Word format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPdfToDocxRasterizeWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToDocxRasterizeRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToDocxRasterize", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToDocxRasterizeRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToDocxRasterize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/docx/rasterize";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF to JPG/JPEG image array
   * Converts a PDF Document to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return PdfToJpgResult
   * @throws ApiException if fails to make API call
   */
  public PdfToJpgResult convertDocumentPdfToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<PdfToJpgResult> localVarResponse = convertDocumentPdfToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF to JPG/JPEG image array
   * Converts a PDF Document to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;PdfToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PdfToJpgResult> convertDocumentPdfToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToJpg", localVarResponse);
        }
        return new ApiResponse<PdfToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PdfToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF to PNG Image Array
   * Convert PDF document to PNG array, one image per page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return PdfToPngResult
   * @throws ApiException if fails to make API call
   */
  public PdfToPngResult convertDocumentPdfToPngArray(File inputFile) throws ApiException {
    ApiResponse<PdfToPngResult> localVarResponse = convertDocumentPdfToPngArrayWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF to PNG Image Array
   * Convert PDF document to PNG array, one image per page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;PdfToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PdfToPngResult> convertDocumentPdfToPngArrayWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToPngArrayRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToPngArray", localVarResponse);
        }
        return new ApiResponse<PdfToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PdfToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToPngArrayRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToPngArray");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF to Single PNG image
   * Convert PDF document to a single tall PNG image, by stacking/concatenating the images vertically into a single \&quot;tall\&quot; image
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPdfToPngSingle(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPdfToPngSingleWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF to Single PNG image
   * Convert PDF document to a single tall PNG image, by stacking/concatenating the images vertically into a single \&quot;tall\&quot; image
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPdfToPngSingleWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToPngSingleRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToPngSingle", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToPngSingleRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToPngSingle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/png/merge-single";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF to PowerPoint PPTX Presentation
   * Convert standard PDF to Office PowerPoint Presentation (pptx).  Converts a PDF file at high fidelity into PowerPoint format, where it can be easily edited and processed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPdfToPptx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPdfToPptxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF to PowerPoint PPTX Presentation
   * Convert standard PDF to Office PowerPoint Presentation (pptx).  Converts a PDF file at high fidelity into PowerPoint format, where it can be easily edited and processed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPdfToPptxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToPptxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToPptx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToPptxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToPptx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/pptx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PDF Document to Text (txt)
   * PDF document to text
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting PDF to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentPdfToTxt(File inputFile, String textFormattingMode) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentPdfToTxtWithHttpInfo(inputFile, textFormattingMode);
    return localVarResponse.getData();
  }

  /**
   * Convert PDF Document to Text (txt)
   * PDF document to text
   * @param inputFile Input file to perform the operation on. (required)
   * @param textFormattingMode Optional; specify how whitespace should be handled when converting PDF to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentPdfToTxtWithHttpInfo(File inputFile, String textFormattingMode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPdfToTxtRequestBuilder(inputFile, textFormattingMode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPdfToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPdfToTxtRequestBuilder(File inputFile, String textFormattingMode) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPdfToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pdf/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (textFormattingMode != null) {
      localVarRequestBuilder.header("textFormattingMode", textFormattingMode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PNG Array to PDF
   * Convert an array of PNG images, one image per page, into a newly-created PDF.  Supports images of different sizes as input.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPngArrayToPdf(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPngArrayToPdfWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Convert PNG Array to PDF
   * Convert an array of PNG images, one image per page, into a newly-created PDF.  Supports images of different sizes as input.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPngArrayToPdfWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPngArrayToPdfRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPngArrayToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPngArrayToPdfRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling convertDocumentPngArrayToPdf");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling convertDocumentPngArrayToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/png/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PowerPoint PPT (97-03) Presentation to PDF
   * Convert Office PowerPoint (97-2003) Documents (ppt) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPptToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPptToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PowerPoint PPT (97-03) Presentation to PDF
   * Convert Office PowerPoint (97-2003) Documents (ppt) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPptToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPptToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPptToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPptToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPptToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/ppt/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PowerPoint PPT (97-03) Presentation to PPTX
   * Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to modern PPTX
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPptToPptx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPptToPptxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PowerPoint PPT (97-03) Presentation to PPTX
   * Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to modern PPTX
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPptToPptxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPptToPptxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPptToPptx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPptToPptxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPptToPptx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/ppt/to/pptx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PowerPoint PPTX Presentation to PDF
   * Convert Office PowerPoint Documents (pptx) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentPptxToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentPptxToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PowerPoint PPTX Presentation to PDF
   * Convert Office PowerPoint Documents (pptx) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentPptxToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPptxToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPptxToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPptxToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPptxToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pptx/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PowerPoint PPTX to PNG image array
   * Converts a PowerPoint Presentation (PPTX) file to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return PptxToPngResult
   * @throws ApiException if fails to make API call
   */
  public PptxToPngResult convertDocumentPptxToPng(File inputFile) throws ApiException {
    ApiResponse<PptxToPngResult> localVarResponse = convertDocumentPptxToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PowerPoint PPTX to PNG image array
   * Converts a PowerPoint Presentation (PPTX) file to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;PptxToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PptxToPngResult> convertDocumentPptxToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPptxToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPptxToPng", localVarResponse);
        }
        return new ApiResponse<PptxToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PptxToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPptxToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPptxToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pptx/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PowerPoint PPTX presentation to Legacy PowerPoint PPT (97-03)
   * Convert/downgrade modern Office PowerPoint PPTX Presentation to the legacy PowerPoint PPT (97-2003 Format) format
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object convertDocumentPptxToPpt() throws ApiException {
    ApiResponse<Object> localVarResponse = convertDocumentPptxToPptWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Convert PowerPoint PPTX presentation to Legacy PowerPoint PPT (97-03)
   * Convert/downgrade modern Office PowerPoint PPTX Presentation to the legacy PowerPoint PPT (97-2003 Format) format
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> convertDocumentPptxToPptWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPptxToPptRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPptxToPpt", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPptxToPptRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pptx/to/ppt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert PowerPoint PPTX Presentation to Text (txt)
   * Convert Office PowerPoint Documents (pptx) to standard Text
   * @param inputFile Input file to perform the operation on. (required)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentPptxToTxt(File inputFile) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentPptxToTxtWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert PowerPoint PPTX Presentation to Text (txt)
   * Convert Office PowerPoint Documents (pptx) to standard Text
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentPptxToTxtWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentPptxToTxtRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentPptxToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentPptxToTxtRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentPptxToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/pptx/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Rich Text Format RTF to DOCX Document
   * Convert Rich Text Format Document (RTF) to Word DOCX Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentRtfToDocx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentRtfToDocxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Rich Text Format RTF to DOCX Document
   * Convert Rich Text Format Document (RTF) to Word DOCX Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentRtfToDocxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentRtfToDocxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentRtfToDocx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentRtfToDocxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentRtfToDocx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/rtf/to/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Rich Text Format RTF to HTML Document
   * Convert Rich Text Format Document (RTF) to HTML Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentRtfToHtml(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentRtfToHtmlWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Rich Text Format RTF to HTML Document
   * Convert Rich Text Format Document (RTF) to HTML Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentRtfToHtmlWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentRtfToHtmlRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentRtfToHtml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentRtfToHtmlRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentRtfToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/rtf/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Rich Text Format RTF to JPG/JPEG image array
   * Converts a Rich Text Format Document (RTF) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return RtfToJpgResult
   * @throws ApiException if fails to make API call
   */
  public RtfToJpgResult convertDocumentRtfToJpg(File inputFile, Integer quality) throws ApiException {
    ApiResponse<RtfToJpgResult> localVarResponse = convertDocumentRtfToJpgWithHttpInfo(inputFile, quality);
    return localVarResponse.getData();
  }

  /**
   * Convert Rich Text Format RTF to JPG/JPEG image array
   * Converts a Rich Text Format Document (RTF) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.
   * @param inputFile Input file to perform the operation on. (required)
   * @param quality Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75. (optional)
   * @return ApiResponse&lt;RtfToJpgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RtfToJpgResult> convertDocumentRtfToJpgWithHttpInfo(File inputFile, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentRtfToJpgRequestBuilder(inputFile, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentRtfToJpg", localVarResponse);
        }
        return new ApiResponse<RtfToJpgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RtfToJpgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentRtfToJpgRequestBuilder(File inputFile, Integer quality) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentRtfToJpg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/rtf/to/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (quality != null) {
      localVarRequestBuilder.header("quality", quality.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Rich Text Format RTF to PDF
   * Convert Rich Text Format Document (RTF) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentRtfToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentRtfToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Rich Text Format RTF to PDF
   * Convert Rich Text Format Document (RTF) to standard PDF
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentRtfToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentRtfToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentRtfToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentRtfToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentRtfToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/rtf/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Rich Text Format RTF to PNG image array
   * Converts a Rich Text Format Document (RTF) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return RtfToPngResult
   * @throws ApiException if fails to make API call
   */
  public RtfToPngResult convertDocumentRtfToPng(File inputFile) throws ApiException {
    ApiResponse<RtfToPngResult> localVarResponse = convertDocumentRtfToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Rich Text Format RTF to PNG image array
   * Converts a Rich Text Format Document (RTF) to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;RtfToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RtfToPngResult> convertDocumentRtfToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentRtfToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentRtfToPng", localVarResponse);
        }
        return new ApiResponse<RtfToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RtfToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentRtfToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentRtfToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/rtf/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLS (97-03) Spreadsheet to CSV
   * Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard CSV format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsToCsv(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsToCsvWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLS (97-03) Spreadsheet to CSV
   * Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard CSV format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsToCsvWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsToCsvRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsToCsv", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsToCsvRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsToCsv");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xls/to/csv";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLS (97-03) Spreadsheet to PDF
   * Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.  Converts all worksheets in the workbook to PDF.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLS (97-03) Spreadsheet to PDF
   * Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.  Converts all worksheets in the workbook to PDF.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xls/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLS (97-03) Spreadsheet to XLSX
   * Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern XLSX format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsToXlsx(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsToXlsxWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLS (97-03) Spreadsheet to XLSX
   * Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern XLSX format.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsToXlsxWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsToXlsxRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsToXlsx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsToXlsxRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsToXlsx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xls/to/xlsx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX Spreadsheet to CSV, Single Worksheet
   * Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.  If the input file contains multiple worksheets, the first one is used.  If you wish to convert all of the worksheets (not just the first one), be sure to use the xlsx/to/csv/multi API.
   * @param inputFile Input file to perform the operation on. (required)
   * @param outputEncoding Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsxToCsv(File inputFile, String outputEncoding) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsxToCsvWithHttpInfo(inputFile, outputEncoding);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX Spreadsheet to CSV, Single Worksheet
   * Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.  If the input file contains multiple worksheets, the first one is used.  If you wish to convert all of the worksheets (not just the first one), be sure to use the xlsx/to/csv/multi API.
   * @param inputFile Input file to perform the operation on. (required)
   * @param outputEncoding Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsxToCsvWithHttpInfo(File inputFile, String outputEncoding) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToCsvRequestBuilder(inputFile, outputEncoding);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToCsv", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToCsvRequestBuilder(File inputFile, String outputEncoding) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToCsv");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/csv";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (outputEncoding != null) {
      localVarRequestBuilder.header("outputEncoding", outputEncoding.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets
   * Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format, with support for multiple worksheets.  Supports both XLSX and XLSB file Excel formats.  Returns multiple CSV files, one for each worksheet (tab) in the spreadsheet.
   * @param inputFile Input file to perform the operation on. (required)
   * @param outputEncoding Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. (optional)
   * @return CsvCollection
   * @throws ApiException if fails to make API call
   */
  public CsvCollection convertDocumentXlsxToCsvMulti(File inputFile, String outputEncoding) throws ApiException {
    ApiResponse<CsvCollection> localVarResponse = convertDocumentXlsxToCsvMultiWithHttpInfo(inputFile, outputEncoding);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets
   * Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format, with support for multiple worksheets.  Supports both XLSX and XLSB file Excel formats.  Returns multiple CSV files, one for each worksheet (tab) in the spreadsheet.
   * @param inputFile Input file to perform the operation on. (required)
   * @param outputEncoding Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8. (optional)
   * @return ApiResponse&lt;CsvCollection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CsvCollection> convertDocumentXlsxToCsvMultiWithHttpInfo(File inputFile, String outputEncoding) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToCsvMultiRequestBuilder(inputFile, outputEncoding);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToCsvMulti", localVarResponse);
        }
        return new ApiResponse<CsvCollection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CsvCollection>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToCsvMultiRequestBuilder(File inputFile, String outputEncoding) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToCsvMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/csv/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (outputEncoding != null) {
      localVarRequestBuilder.header("outputEncoding", outputEncoding.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX Spreadsheet to HTML Document
   * Convert Office Excel Spreadsheet (XLSX) to HTML Document.  Converts all worksheets to HTML.  Supports both XLSX and XLSB Excel file formats.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsxToHtml(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsxToHtmlWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX Spreadsheet to HTML Document
   * Convert Office Excel Spreadsheet (XLSX) to HTML Document.  Converts all worksheets to HTML.  Supports both XLSX and XLSB Excel file formats.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsxToHtmlWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToHtmlRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToHtml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToHtmlRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX Spreadsheet to PDF
   * Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel file formats.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsxToPdf(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsxToPdfWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX Spreadsheet to PDF
   * Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel file formats.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsxToPdfWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToPdfRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToPdfRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX spreadsheet to PNG image array
   * Converts an Excel Spreadsheet (XLSX) file to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return XlsxToPngResult
   * @throws ApiException if fails to make API call
   */
  public XlsxToPngResult convertDocumentXlsxToPng(File inputFile) throws ApiException {
    ApiResponse<XlsxToPngResult> localVarResponse = convertDocumentXlsxToPngWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX spreadsheet to PNG image array
   * Converts an Excel Spreadsheet (XLSX) file to an array of PNG images, one for each page.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;XlsxToPngResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XlsxToPngResult> convertDocumentXlsxToPngWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToPngRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToPng", localVarResponse);
        }
        return new ApiResponse<XlsxToPngResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XlsxToPngResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToPngRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX Spreadsheet to Text (txt)
   * Convert Office Excel Workbooks (XLSX) to standard Text.  Converts all worksheets in the workbook to Text.  Supports both XLSX and XLSB file formats.  When a spreadsheet contains multiple worksheets, will export all of the text from all of the worksheets.  If you wish to export the text from only one worksheet, try using the Split XLSX API to split the spreadsheet into multiple worksheet files, and then run XLSX to Text on the individual worksheet file that you need to extract the text from.
   * @param inputFile Input file to perform the operation on. (required)
   * @return TextConversionResult
   * @throws ApiException if fails to make API call
   */
  public TextConversionResult convertDocumentXlsxToTxt(File inputFile) throws ApiException {
    ApiResponse<TextConversionResult> localVarResponse = convertDocumentXlsxToTxtWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX Spreadsheet to Text (txt)
   * Convert Office Excel Workbooks (XLSX) to standard Text.  Converts all worksheets in the workbook to Text.  Supports both XLSX and XLSB file formats.  When a spreadsheet contains multiple worksheets, will export all of the text from all of the worksheets.  If you wish to export the text from only one worksheet, try using the Split XLSX API to split the spreadsheet into multiple worksheet files, and then run XLSX to Text on the individual worksheet file that you need to extract the text from.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;TextConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextConversionResult> convertDocumentXlsxToTxtWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToTxtRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToTxt", localVarResponse);
        }
        return new ApiResponse<TextConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToTxtRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX Spreadsheet to Legacy Excel XLS (97-03)
   * Convert/downgrade modern Office Excel XLSX Spreadsheet to the legacy Excel XLS (97-2003 Format) format
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDocumentXlsxToXls(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDocumentXlsxToXlsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX Spreadsheet to Legacy Excel XLS (97-03)
   * Convert/downgrade modern Office Excel XLSX Spreadsheet to the legacy Excel XLS (97-2003 Format) format
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDocumentXlsxToXlsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDocumentXlsxToXlsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDocumentXlsxToXls", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDocumentXlsxToXlsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDocumentXlsxToXls");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/xls";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
