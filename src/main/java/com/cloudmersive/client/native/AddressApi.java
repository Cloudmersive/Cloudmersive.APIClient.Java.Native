/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.CountryListResult;
import com.cloudmersive.client.native.model.GetTimezonesRequest;
import com.cloudmersive.client.native.model.GetTimezonesResponse;
import com.cloudmersive.client.native.model.NormalizeAddressResponse;
import com.cloudmersive.client.native.model.ParseAddressRequest;
import com.cloudmersive.client.native.model.ParseAddressResponse;
import com.cloudmersive.client.native.model.ReverseGeocodeAddressRequest;
import com.cloudmersive.client.native.model.ReverseGeocodeAddressResponse;
import com.cloudmersive.client.native.model.ValidateAddressRequest;
import com.cloudmersive.client.native.model.ValidateAddressResponse;
import com.cloudmersive.client.native.model.ValidateCityRequest;
import com.cloudmersive.client.native.model.ValidateCityResponse;
import com.cloudmersive.client.native.model.ValidateCountryRequest;
import com.cloudmersive.client.native.model.ValidateCountryResponse;
import com.cloudmersive.client.native.model.ValidatePostalCodeRequest;
import com.cloudmersive.client.native.model.ValidatePostalCodeResponse;
import com.cloudmersive.client.native.model.ValidateStateRequest;
import com.cloudmersive.client.native.model.ValidateStateResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:25:52.145220700-07:00[America/Los_Angeles]")
public class AddressApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AddressApi() {
    this(new ApiClient());
  }

  public AddressApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Check if a country is a member of the European Union (EU)
   * Checks if the input country is a member of the European Union or not.
   * @param input Input request (required)
   * @return ValidateCountryResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateCountryResponse addressCheckEUMembership(ValidateCountryRequest input) throws ApiException {
    ApiResponse<ValidateCountryResponse> localVarResponse = addressCheckEUMembershipWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Check if a country is a member of the European Union (EU)
   * Checks if the input country is a member of the European Union or not.
   * @param input Input request (required)
   * @return ApiResponse&lt;ValidateCountryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateCountryResponse> addressCheckEUMembershipWithHttpInfo(ValidateCountryRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressCheckEUMembershipRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressCheckEUMembership", localVarResponse);
        }
        return new ApiResponse<ValidateCountryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateCountryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressCheckEUMembershipRequestBuilder(ValidateCountryRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressCheckEUMembership");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/country/check-eu-membership";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate and normalize country information, return ISO 3166-1 country codes and country name
   * Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
   * @param input Input request (required)
   * @return ValidateCountryResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateCountryResponse addressCountry(ValidateCountryRequest input) throws ApiException {
    ApiResponse<ValidateCountryResponse> localVarResponse = addressCountryWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Validate and normalize country information, return ISO 3166-1 country codes and country name
   * Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
   * @param input Input request (required)
   * @return ApiResponse&lt;ValidateCountryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateCountryResponse> addressCountryWithHttpInfo(ValidateCountryRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressCountryRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressCountry", localVarResponse);
        }
        return new ApiResponse<ValidateCountryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateCountryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressCountryRequestBuilder(ValidateCountryRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressCountry");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/country";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a list of ISO 3166-1 countries
   * Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
   * @return CountryListResult
   * @throws ApiException if fails to make API call
   */
  public CountryListResult addressCountryList() throws ApiException {
    ApiResponse<CountryListResult> localVarResponse = addressCountryListWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get a list of ISO 3166-1 countries
   * Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
   * @return ApiResponse&lt;CountryListResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountryListResult> addressCountryListWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressCountryListRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressCountryList", localVarResponse);
        }
        return new ApiResponse<CountryListResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountryListResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressCountryListRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/country/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Geocode a street address into latitude and longitude
   * Geocodes a street address into latitude and longitude.
   * @param input Input parse request (required)
   * @return ValidateAddressResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateAddressResponse addressGeocode(ValidateAddressRequest input) throws ApiException {
    ApiResponse<ValidateAddressResponse> localVarResponse = addressGeocodeWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Geocode a street address into latitude and longitude
   * Geocodes a street address into latitude and longitude.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;ValidateAddressResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateAddressResponse> addressGeocodeWithHttpInfo(ValidateAddressRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressGeocodeRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressGeocode", localVarResponse);
        }
        return new ApiResponse<ValidateAddressResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateAddressResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressGeocodeRequestBuilder(ValidateAddressRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressGeocode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/geocode";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the currency of the input country
   * Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
   * @param input Input request (required)
   * @return ValidateCountryResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateCountryResponse addressGetCountryCurrency(ValidateCountryRequest input) throws ApiException {
    ApiResponse<ValidateCountryResponse> localVarResponse = addressGetCountryCurrencyWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get the currency of the input country
   * Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
   * @param input Input request (required)
   * @return ApiResponse&lt;ValidateCountryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateCountryResponse> addressGetCountryCurrencyWithHttpInfo(ValidateCountryRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressGetCountryCurrencyRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressGetCountryCurrency", localVarResponse);
        }
        return new ApiResponse<ValidateCountryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateCountryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressGetCountryCurrencyRequestBuilder(ValidateCountryRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressGetCountryCurrency");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/country/get-currency";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the region, subregion and continent of the country
   * Gets the continent information including region and subregion for the input country.
   * @param input Input request (required)
   * @return ValidateCountryResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateCountryResponse addressGetCountryRegion(ValidateCountryRequest input) throws ApiException {
    ApiResponse<ValidateCountryResponse> localVarResponse = addressGetCountryRegionWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get the region, subregion and continent of the country
   * Gets the continent information including region and subregion for the input country.
   * @param input Input request (required)
   * @return ApiResponse&lt;ValidateCountryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateCountryResponse> addressGetCountryRegionWithHttpInfo(ValidateCountryRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressGetCountryRegionRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressGetCountryRegion", localVarResponse);
        }
        return new ApiResponse<ValidateCountryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateCountryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressGetCountryRegionRequestBuilder(ValidateCountryRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressGetCountryRegion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/country/get-region";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets IANA/Olsen time zones for a country
   * Gets the IANA/Olsen time zones for a country.
   * @param input Input request (required)
   * @return GetTimezonesResponse
   * @throws ApiException if fails to make API call
   */
  public GetTimezonesResponse addressGetTimezone(GetTimezonesRequest input) throws ApiException {
    ApiResponse<GetTimezonesResponse> localVarResponse = addressGetTimezoneWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Gets IANA/Olsen time zones for a country
   * Gets the IANA/Olsen time zones for a country.
   * @param input Input request (required)
   * @return ApiResponse&lt;GetTimezonesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetTimezonesResponse> addressGetTimezoneWithHttpInfo(GetTimezonesRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressGetTimezoneRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressGetTimezone", localVarResponse);
        }
        return new ApiResponse<GetTimezonesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetTimezonesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressGetTimezoneRequestBuilder(GetTimezonesRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressGetTimezone");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/country/get-timezones";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Normalize a street address
   * Normalizes an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
   * @param input Input parse request (required)
   * @return NormalizeAddressResponse
   * @throws ApiException if fails to make API call
   */
  public NormalizeAddressResponse addressNormalizeAddress(ValidateAddressRequest input) throws ApiException {
    ApiResponse<NormalizeAddressResponse> localVarResponse = addressNormalizeAddressWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Normalize a street address
   * Normalizes an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;NormalizeAddressResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NormalizeAddressResponse> addressNormalizeAddressWithHttpInfo(ValidateAddressRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressNormalizeAddressRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressNormalizeAddress", localVarResponse);
        }
        return new ApiResponse<NormalizeAddressResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NormalizeAddressResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressNormalizeAddressRequestBuilder(ValidateAddressRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressNormalizeAddress");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/street-address/normalize";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Parse an unstructured input text string into an international, formatted address
   * Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
   * @param input Input parse request (required)
   * @return ParseAddressResponse
   * @throws ApiException if fails to make API call
   */
  public ParseAddressResponse addressParseString(ParseAddressRequest input) throws ApiException {
    ApiResponse<ParseAddressResponse> localVarResponse = addressParseStringWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Parse an unstructured input text string into an international, formatted address
   * Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;ParseAddressResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ParseAddressResponse> addressParseStringWithHttpInfo(ParseAddressRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressParseStringRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressParseString", localVarResponse);
        }
        return new ApiResponse<ParseAddressResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ParseAddressResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressParseStringRequestBuilder(ParseAddressRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressParseString");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/parse";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reverse geocode a lattitude and longitude into an address
   * Converts lattitude and longitude coordinates into an address through reverse-geocoding.
   * @param input Input reverse geocoding request (required)
   * @return ReverseGeocodeAddressResponse
   * @throws ApiException if fails to make API call
   */
  public ReverseGeocodeAddressResponse addressReverseGeocodeAddress(ReverseGeocodeAddressRequest input) throws ApiException {
    ApiResponse<ReverseGeocodeAddressResponse> localVarResponse = addressReverseGeocodeAddressWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Reverse geocode a lattitude and longitude into an address
   * Converts lattitude and longitude coordinates into an address through reverse-geocoding.
   * @param input Input reverse geocoding request (required)
   * @return ApiResponse&lt;ReverseGeocodeAddressResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReverseGeocodeAddressResponse> addressReverseGeocodeAddressWithHttpInfo(ReverseGeocodeAddressRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressReverseGeocodeAddressRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressReverseGeocodeAddress", localVarResponse);
        }
        return new ApiResponse<ReverseGeocodeAddressResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReverseGeocodeAddressResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressReverseGeocodeAddressRequestBuilder(ReverseGeocodeAddressRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressReverseGeocodeAddress");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/geocode/reverse";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a street address
   * Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
   * @param input Input parse request (required)
   * @return ValidateAddressResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateAddressResponse addressValidateAddress(ValidateAddressRequest input) throws ApiException {
    ApiResponse<ValidateAddressResponse> localVarResponse = addressValidateAddressWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Validate a street address
   * Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;ValidateAddressResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateAddressResponse> addressValidateAddressWithHttpInfo(ValidateAddressRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressValidateAddressRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressValidateAddress", localVarResponse);
        }
        return new ApiResponse<ValidateAddressResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateAddressResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressValidateAddressRequestBuilder(ValidateAddressRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressValidateAddress");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/street-address";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a City and State/Province combination, get location information about it
   * Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
   * @param input Input parse request (required)
   * @return ValidateCityResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateCityResponse addressValidateCity(ValidateCityRequest input) throws ApiException {
    ApiResponse<ValidateCityResponse> localVarResponse = addressValidateCityWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Validate a City and State/Province combination, get location information about it
   * Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;ValidateCityResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateCityResponse> addressValidateCityWithHttpInfo(ValidateCityRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressValidateCityRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressValidateCity", localVarResponse);
        }
        return new ApiResponse<ValidateCityResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateCityResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressValidateCityRequestBuilder(ValidateCityRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressValidateCity");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/city";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a postal code, get location information about it
   * Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
   * @param input Input parse request (required)
   * @return ValidatePostalCodeResponse
   * @throws ApiException if fails to make API call
   */
  public ValidatePostalCodeResponse addressValidatePostalCode(ValidatePostalCodeRequest input) throws ApiException {
    ApiResponse<ValidatePostalCodeResponse> localVarResponse = addressValidatePostalCodeWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Validate a postal code, get location information about it
   * Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;ValidatePostalCodeResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidatePostalCodeResponse> addressValidatePostalCodeWithHttpInfo(ValidatePostalCodeRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressValidatePostalCodeRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressValidatePostalCode", localVarResponse);
        }
        return new ApiResponse<ValidatePostalCodeResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidatePostalCodeResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressValidatePostalCodeRequestBuilder(ValidatePostalCodeRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressValidatePostalCode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/postal-code";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a state or province, name or abbreviation, get location information about it
   * Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
   * @param input Input parse request (required)
   * @return ValidateStateResponse
   * @throws ApiException if fails to make API call
   */
  public ValidateStateResponse addressValidateState(ValidateStateRequest input) throws ApiException {
    ApiResponse<ValidateStateResponse> localVarResponse = addressValidateStateWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Validate a state or province, name or abbreviation, get location information about it
   * Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
   * @param input Input parse request (required)
   * @return ApiResponse&lt;ValidateStateResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateStateResponse> addressValidateStateWithHttpInfo(ValidateStateRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addressValidateStateRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addressValidateState", localVarResponse);
        }
        return new ApiResponse<ValidateStateResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateStateResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addressValidateStateRequestBuilder(ValidateStateRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling addressValidateState");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/address/state";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
