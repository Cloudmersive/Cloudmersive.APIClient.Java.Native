/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import java.io.File;
import com.cloudmersive.client.native.model.HtmlMdResult;
import com.cloudmersive.client.native.model.HtmlToOfficeRequest;
import com.cloudmersive.client.native.model.HtmlToPdfRequest;
import com.cloudmersive.client.native.model.HtmlToPngRequest;
import com.cloudmersive.client.native.model.HtmlToTextRequest;
import com.cloudmersive.client.native.model.HtmlToTextResponse;
import com.cloudmersive.client.native.model.ScreenshotRequest;
import com.cloudmersive.client.native.model.UrlToPdfRequest;
import com.cloudmersive.client.native.model.UrlToTextRequest;
import com.cloudmersive.client.native.model.UrlToTextResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:33:52.110310500-07:00[America/Los_Angeles]")
public class ConvertWebApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ConvertWebApi() {
    this(new ApiClient());
  }

  public ConvertWebApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Convert HTML to Word DOCX Document
   * Convert HTML to Office Word Document (DOCX) format
   * @param inputRequest HTML input to convert to DOCX (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertWebHtmlToDocx(HtmlToOfficeRequest inputRequest) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertWebHtmlToDocxWithHttpInfo(inputRequest);
    return localVarResponse.getData();
  }

  /**
   * Convert HTML to Word DOCX Document
   * Convert HTML to Office Word Document (DOCX) format
   * @param inputRequest HTML input to convert to DOCX (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertWebHtmlToDocxWithHttpInfo(HtmlToOfficeRequest inputRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebHtmlToDocxRequestBuilder(inputRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebHtmlToDocx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebHtmlToDocxRequestBuilder(HtmlToOfficeRequest inputRequest) throws ApiException {
    // verify the required parameter 'inputRequest' is set
    if (inputRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'inputRequest' when calling convertWebHtmlToDocx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/html/to/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(inputRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert HTML string to PDF
   * Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input HTML to PDF request parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertWebHtmlToPdf(HtmlToPdfRequest input) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertWebHtmlToPdfWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Convert HTML string to PDF
   * Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input HTML to PDF request parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertWebHtmlToPdfWithHttpInfo(HtmlToPdfRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebHtmlToPdfRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebHtmlToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebHtmlToPdfRequestBuilder(HtmlToPdfRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling convertWebHtmlToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/html/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert HTML string to PNG screenshot
   * Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input HTML to PNG request parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertWebHtmlToPng(HtmlToPngRequest input) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertWebHtmlToPngWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Convert HTML string to PNG screenshot
   * Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input HTML to PNG request parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertWebHtmlToPngWithHttpInfo(HtmlToPngRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebHtmlToPngRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebHtmlToPng", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebHtmlToPngRequestBuilder(HtmlToPngRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling convertWebHtmlToPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/html/to/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert HTML string to text (txt)
   * Converts an HTML string input into text (txt); extracts text from HTML
   * @param input HTML to Text request parameters (required)
   * @return HtmlToTextResponse
   * @throws ApiException if fails to make API call
   */
  public HtmlToTextResponse convertWebHtmlToTxt(HtmlToTextRequest input) throws ApiException {
    ApiResponse<HtmlToTextResponse> localVarResponse = convertWebHtmlToTxtWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Convert HTML string to text (txt)
   * Converts an HTML string input into text (txt); extracts text from HTML
   * @param input HTML to Text request parameters (required)
   * @return ApiResponse&lt;HtmlToTextResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlToTextResponse> convertWebHtmlToTxtWithHttpInfo(HtmlToTextRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebHtmlToTxtRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebHtmlToTxt", localVarResponse);
        }
        return new ApiResponse<HtmlToTextResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlToTextResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebHtmlToTxtRequestBuilder(HtmlToTextRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling convertWebHtmlToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/html/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Markdown to HTML
   * Convert a markdown file (.md) to HTML
   * @param inputFile Input file to perform the operation on. (required)
   * @return HtmlMdResult
   * @throws ApiException if fails to make API call
   */
  public HtmlMdResult convertWebMdToHtml(File inputFile) throws ApiException {
    ApiResponse<HtmlMdResult> localVarResponse = convertWebMdToHtmlWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Markdown to HTML
   * Convert a markdown file (.md) to HTML
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;HtmlMdResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlMdResult> convertWebMdToHtmlWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebMdToHtmlRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebMdToHtml", localVarResponse);
        }
        return new ApiResponse<HtmlMdResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlMdResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebMdToHtmlRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertWebMdToHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/md/to/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert a URL to PDF
   * Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input URL to PDF request parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertWebUrlToPdf(UrlToPdfRequest input) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertWebUrlToPdfWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Convert a URL to PDF
   * Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input URL to PDF request parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertWebUrlToPdfWithHttpInfo(UrlToPdfRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebUrlToPdfRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebUrlToPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebUrlToPdfRequestBuilder(UrlToPdfRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling convertWebUrlToPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/url/to/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Take screenshot of URL
   * Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input Screenshot request parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertWebUrlToScreenshot(ScreenshotRequest input) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertWebUrlToScreenshotWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Take screenshot of URL
   * Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.
   * @param input Screenshot request parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertWebUrlToScreenshotWithHttpInfo(ScreenshotRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebUrlToScreenshotRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebUrlToScreenshot", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebUrlToScreenshotRequestBuilder(ScreenshotRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling convertWebUrlToScreenshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/url/to/screenshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert website URL page to text (txt)
   * Converts a website URL page into text (txt); extracts text from HTML
   * @param input HTML to Text request parameters (required)
   * @return UrlToTextResponse
   * @throws ApiException if fails to make API call
   */
  public UrlToTextResponse convertWebUrlToTxt(UrlToTextRequest input) throws ApiException {
    ApiResponse<UrlToTextResponse> localVarResponse = convertWebUrlToTxtWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Convert website URL page to text (txt)
   * Converts a website URL page into text (txt); extracts text from HTML
   * @param input HTML to Text request parameters (required)
   * @return ApiResponse&lt;UrlToTextResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UrlToTextResponse> convertWebUrlToTxtWithHttpInfo(UrlToTextRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertWebUrlToTxtRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertWebUrlToTxt", localVarResponse);
        }
        return new ApiResponse<UrlToTextResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UrlToTextResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertWebUrlToTxtRequestBuilder(UrlToTextRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling convertWebUrlToTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/web/url/to/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
