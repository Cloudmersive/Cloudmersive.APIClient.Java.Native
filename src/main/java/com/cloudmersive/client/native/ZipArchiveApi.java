/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.CreateZipArchiveRequest;
import java.io.File;
import com.cloudmersive.client.native.model.ZipEncryptionAdvancedRequest;
import com.cloudmersive.client.native.model.ZipExtractResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:33:52.110310500-07:00[America/Los_Angeles]")
public class ZipArchiveApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ZipArchiveApi() {
    this(new ApiClient());
  }

  public ZipArchiveApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Compress files to create a new zip archive
   * Create a new zip archive by compressing input files.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (optional)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] zipArchiveZipCreate(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = zipArchiveZipCreateWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Compress files to create a new zip archive
   * Create a new zip archive by compressing input files.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (optional)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> zipArchiveZipCreateWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipCreateRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipCreate", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipCreateRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling zipArchiveZipCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/create";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Compress files and folders to create a new zip archive with advanced options
   * Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
   * @param request Input request (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object zipArchiveZipCreateAdvanced(CreateZipArchiveRequest request) throws ApiException {
    ApiResponse<Object> localVarResponse = zipArchiveZipCreateAdvancedWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Compress files and folders to create a new zip archive with advanced options
   * Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
   * @param request Input request (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> zipArchiveZipCreateAdvancedWithHttpInfo(CreateZipArchiveRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipCreateAdvancedRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipCreateAdvanced", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipCreateAdvancedRequestBuilder(CreateZipArchiveRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling zipArchiveZipCreateAdvanced");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/create/advanced";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Compress files to create a new, encrypted and password-protected zip archive
   * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
   * @param password Password to place on the Zip file; the longer the password, the more secure (required)
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param encryptionAlgorithm Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)
   * @param inputFile2 Second input file to perform the operation on. (optional)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] zipArchiveZipCreateEncrypted(String password, File inputFile1, String encryptionAlgorithm, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = zipArchiveZipCreateEncryptedWithHttpInfo(password, inputFile1, encryptionAlgorithm, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Compress files to create a new, encrypted and password-protected zip archive
   * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
   * @param password Password to place on the Zip file; the longer the password, the more secure (required)
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param encryptionAlgorithm Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)
   * @param inputFile2 Second input file to perform the operation on. (optional)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> zipArchiveZipCreateEncryptedWithHttpInfo(String password, File inputFile1, String encryptionAlgorithm, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipCreateEncryptedRequestBuilder(password, inputFile1, encryptionAlgorithm, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipCreateEncrypted", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipCreateEncryptedRequestBuilder(String password, File inputFile1, String encryptionAlgorithm, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'password' is set
    if (password == null) {
      throw new ApiException(400, "Missing the required parameter 'password' when calling zipArchiveZipCreateEncrypted");
    }
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling zipArchiveZipCreateEncrypted");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/create/encrypted";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (password != null) {
      localVarRequestBuilder.header("password", password.toString());
    }
    if (encryptionAlgorithm != null) {
      localVarRequestBuilder.header("encryptionAlgorithm", encryptionAlgorithm.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create an encrypted zip file to quarantine a dangerous file
   * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip, for the purposes of quarantining the underlyikng file.
   * @param password Password to place on the Zip file; the longer the password, the more secure (required)
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param encryptionAlgorithm Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object zipArchiveZipCreateQuarantine(String password, File inputFile1, String encryptionAlgorithm) throws ApiException {
    ApiResponse<Object> localVarResponse = zipArchiveZipCreateQuarantineWithHttpInfo(password, inputFile1, encryptionAlgorithm);
    return localVarResponse.getData();
  }

  /**
   * Create an encrypted zip file to quarantine a dangerous file
   * Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip, for the purposes of quarantining the underlyikng file.
   * @param password Password to place on the Zip file; the longer the password, the more secure (required)
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param encryptionAlgorithm Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> zipArchiveZipCreateQuarantineWithHttpInfo(String password, File inputFile1, String encryptionAlgorithm) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipCreateQuarantineRequestBuilder(password, inputFile1, encryptionAlgorithm);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipCreateQuarantine", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipCreateQuarantineRequestBuilder(String password, File inputFile1, String encryptionAlgorithm) throws ApiException {
    // verify the required parameter 'password' is set
    if (password == null) {
      throw new ApiException(400, "Missing the required parameter 'password' when calling zipArchiveZipCreateQuarantine");
    }
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling zipArchiveZipCreateQuarantine");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/create/quarantine";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (password != null) {
      localVarRequestBuilder.header("password", password.toString());
    }
    if (encryptionAlgorithm != null) {
      localVarRequestBuilder.header("encryptionAlgorithm", encryptionAlgorithm.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Decrypt and remove password protection on a zip file
   * Decrypts and removes password protection from an encrypted zip file with the specified password
   * @param zipPassword Required; Password for the input archive (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object zipArchiveZipDecrypt(String zipPassword, File inputFile) throws ApiException {
    ApiResponse<Object> localVarResponse = zipArchiveZipDecryptWithHttpInfo(zipPassword, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Decrypt and remove password protection on a zip file
   * Decrypts and removes password protection from an encrypted zip file with the specified password
   * @param zipPassword Required; Password for the input archive (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> zipArchiveZipDecryptWithHttpInfo(String zipPassword, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipDecryptRequestBuilder(zipPassword, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipDecrypt", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipDecryptRequestBuilder(String zipPassword, File inputFile) throws ApiException {
    // verify the required parameter 'zipPassword' is set
    if (zipPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'zipPassword' when calling zipArchiveZipDecrypt");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling zipArchiveZipDecrypt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/decrypt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (zipPassword != null) {
      localVarRequestBuilder.header("zipPassword", zipPassword.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Encrypt and password protect a zip file
   * Encrypts and password protects an existing zip file with the specified password and encryption algorithm
   * @param encryptionRequest Encryption request (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object zipArchiveZipEncryptAdvanced(ZipEncryptionAdvancedRequest encryptionRequest) throws ApiException {
    ApiResponse<Object> localVarResponse = zipArchiveZipEncryptAdvancedWithHttpInfo(encryptionRequest);
    return localVarResponse.getData();
  }

  /**
   * Encrypt and password protect a zip file
   * Encrypts and password protects an existing zip file with the specified password and encryption algorithm
   * @param encryptionRequest Encryption request (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> zipArchiveZipEncryptAdvancedWithHttpInfo(ZipEncryptionAdvancedRequest encryptionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipEncryptAdvancedRequestBuilder(encryptionRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipEncryptAdvanced", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipEncryptAdvancedRequestBuilder(ZipEncryptionAdvancedRequest encryptionRequest) throws ApiException {
    // verify the required parameter 'encryptionRequest' is set
    if (encryptionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'encryptionRequest' when calling zipArchiveZipEncryptAdvanced");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/encrypt/advanced";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(encryptionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Extract, decompress files and folders from a zip archive
   * Extracts a zip archive by decompressing files, and folders.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ZipExtractResponse
   * @throws ApiException if fails to make API call
   */
  public ZipExtractResponse zipArchiveZipExtract(File inputFile) throws ApiException {
    ApiResponse<ZipExtractResponse> localVarResponse = zipArchiveZipExtractWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Extract, decompress files and folders from a zip archive
   * Extracts a zip archive by decompressing files, and folders.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;ZipExtractResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ZipExtractResponse> zipArchiveZipExtractWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = zipArchiveZipExtractRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("zipArchiveZipExtract", localVarResponse);
        }
        return new ApiResponse<ZipExtractResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ZipExtractResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder zipArchiveZipExtractRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling zipArchiveZipExtract");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/archive/zip/extract";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
