/*
 * videoapi
 * The video APIs help you convert, encode, and transcode videos.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import java.math.BigDecimal;
import java.io.File;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:28:24.597412300-07:00[America/Los_Angeles]")
public class AudioApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AudioApi() {
    this(new ApiClient());
  }

  public AudioApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Convert Audio File to AAC format.
   * Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param bitRate Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] audioConvertToAac(String fileUrl, Integer bitRate, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = audioConvertToAacWithHttpInfo(fileUrl, bitRate, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Audio File to AAC format.
   * Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param bitRate Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> audioConvertToAacWithHttpInfo(String fileUrl, Integer bitRate, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = audioConvertToAacRequestBuilder(fileUrl, bitRate, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("audioConvertToAac", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder audioConvertToAacRequestBuilder(String fileUrl, Integer bitRate, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/video/convert/to/aac";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileUrl != null) {
      localVarRequestBuilder.header("fileUrl", fileUrl.toString());
    }
    if (bitRate != null) {
      localVarRequestBuilder.header("bitRate", bitRate.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Audio File to M4A format.
   * Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param bitRate Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] audioConvertToM4a(String fileUrl, Integer bitRate, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = audioConvertToM4aWithHttpInfo(fileUrl, bitRate, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Audio File to M4A format.
   * Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param bitRate Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> audioConvertToM4aWithHttpInfo(String fileUrl, Integer bitRate, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = audioConvertToM4aRequestBuilder(fileUrl, bitRate, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("audioConvertToM4a", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder audioConvertToM4aRequestBuilder(String fileUrl, Integer bitRate, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/video/convert/to/m4a";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileUrl != null) {
      localVarRequestBuilder.header("fileUrl", fileUrl.toString());
    }
    if (bitRate != null) {
      localVarRequestBuilder.header("bitRate", bitRate.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Audio File to MP3 format.
   * Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param bitRate Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] audioConvertToMp3(String fileUrl, Integer bitRate, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = audioConvertToMp3WithHttpInfo(fileUrl, bitRate, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Audio File to MP3 format.
   * Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param bitRate Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> audioConvertToMp3WithHttpInfo(String fileUrl, Integer bitRate, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = audioConvertToMp3RequestBuilder(fileUrl, bitRate, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("audioConvertToMp3", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder audioConvertToMp3RequestBuilder(String fileUrl, Integer bitRate, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/video/convert/to/mp3";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileUrl != null) {
      localVarRequestBuilder.header("fileUrl", fileUrl.toString());
    }
    if (bitRate != null) {
      localVarRequestBuilder.header("bitRate", bitRate.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Audio File to WAV format.
   * Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param sampleRate Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] audioConvertToWav(String fileUrl, BigDecimal sampleRate, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = audioConvertToWavWithHttpInfo(fileUrl, sampleRate, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Audio File to WAV format.
   * Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
   * @param fileUrl Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)
   * @param sampleRate Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)
   * @param inputFile Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> audioConvertToWavWithHttpInfo(String fileUrl, BigDecimal sampleRate, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = audioConvertToWavRequestBuilder(fileUrl, sampleRate, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("audioConvertToWav", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder audioConvertToWavRequestBuilder(String fileUrl, BigDecimal sampleRate, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/video/convert/to/wav";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileUrl != null) {
      localVarRequestBuilder.header("fileUrl", fileUrl.toString());
    }
    if (sampleRate != null) {
      localVarRequestBuilder.header("sampleRate", sampleRate.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
