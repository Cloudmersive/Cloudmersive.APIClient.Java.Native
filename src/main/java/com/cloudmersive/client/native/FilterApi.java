/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import java.io.File;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:33:46.869976900-07:00[America/Los_Angeles]")
public class FilterApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public FilterApi() {
    this(new ApiClient());
  }

  public FilterApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Convert image to black-and-white grayscale
   * Remove color from the image by converting to a grayscale, black-and-white image
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterBlackAndWhite(File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterBlackAndWhiteWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Convert image to black-and-white grayscale
   * Remove color from the image by converting to a grayscale, black-and-white image
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterBlackAndWhiteWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterBlackAndWhiteRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterBlackAndWhite", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterBlackAndWhiteRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterBlackAndWhite");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/black-and-white";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Despeckle to remove point noise from the image
   * Remove point noise / despeckle the input image
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterDespeckle(File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterDespeckleWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Despeckle to remove point noise from the image
   * Remove point noise / despeckle the input image
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterDespeckleWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterDespeckleRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterDespeckle", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterDespeckleRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterDespeckle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/despeckle";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect and highlight edges in an image
   * Perform an edge detection operation on the input image
   * @param radius Radius in pixels of the edge detection operation; a larger radius will produce a greater effect (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterEdgeDetect(Integer radius, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterEdgeDetectWithHttpInfo(radius, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Detect and highlight edges in an image
   * Perform an edge detection operation on the input image
   * @param radius Radius in pixels of the edge detection operation; a larger radius will produce a greater effect (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterEdgeDetectWithHttpInfo(Integer radius, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterEdgeDetectRequestBuilder(radius, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterEdgeDetect", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterEdgeDetectRequestBuilder(Integer radius, File imageFile) throws ApiException {
    // verify the required parameter 'radius' is set
    if (radius == null) {
      throw new ApiException(400, "Missing the required parameter 'radius' when calling filterEdgeDetect");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterEdgeDetect");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/edge-detect/{radius}"
        .replace("{radius}", ApiClient.urlEncode(radius.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Emboss an image
   * Perform an emboss operation on the input image
   * @param radius Radius in pixels of the emboss operation; a larger radius will produce a greater effect (required)
   * @param sigma Sigma, or variance, of the emboss operation (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterEmboss(Integer radius, Integer sigma, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterEmbossWithHttpInfo(radius, sigma, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Emboss an image
   * Perform an emboss operation on the input image
   * @param radius Radius in pixels of the emboss operation; a larger radius will produce a greater effect (required)
   * @param sigma Sigma, or variance, of the emboss operation (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterEmbossWithHttpInfo(Integer radius, Integer sigma, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterEmbossRequestBuilder(radius, sigma, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterEmboss", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterEmbossRequestBuilder(Integer radius, Integer sigma, File imageFile) throws ApiException {
    // verify the required parameter 'radius' is set
    if (radius == null) {
      throw new ApiException(400, "Missing the required parameter 'radius' when calling filterEmboss");
    }
    // verify the required parameter 'sigma' is set
    if (sigma == null) {
      throw new ApiException(400, "Missing the required parameter 'sigma' when calling filterEmboss");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterEmboss");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/emboss/{radius}/{sigma}"
        .replace("{radius}", ApiClient.urlEncode(radius.toString()))
        .replace("{sigma}", ApiClient.urlEncode(sigma.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform a guassian blur on the input image
   * Perform a gaussian blur on the input image
   * @param radius Radius in pixels of the blur operation; a larger radius will produce a greater blur effect (required)
   * @param sigma Sigma, or variance, of the gaussian blur operation (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterGaussianBlur(Integer radius, Integer sigma, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterGaussianBlurWithHttpInfo(radius, sigma, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Perform a guassian blur on the input image
   * Perform a gaussian blur on the input image
   * @param radius Radius in pixels of the blur operation; a larger radius will produce a greater blur effect (required)
   * @param sigma Sigma, or variance, of the gaussian blur operation (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterGaussianBlurWithHttpInfo(Integer radius, Integer sigma, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterGaussianBlurRequestBuilder(radius, sigma, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterGaussianBlur", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterGaussianBlurRequestBuilder(Integer radius, Integer sigma, File imageFile) throws ApiException {
    // verify the required parameter 'radius' is set
    if (radius == null) {
      throw new ApiException(400, "Missing the required parameter 'radius' when calling filterGaussianBlur");
    }
    // verify the required parameter 'sigma' is set
    if (sigma == null) {
      throw new ApiException(400, "Missing the required parameter 'sigma' when calling filterGaussianBlur");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterGaussianBlur");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/blur/guassian/{radius}/{sigma}"
        .replace("{radius}", ApiClient.urlEncode(radius.toString()))
        .replace("{sigma}", ApiClient.urlEncode(sigma.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform a motion blur on the input image
   * Perform a motion blur on the input image at a specific angle
   * @param radius Radius in pixels of the blur operation; a larger radius will produce a greater blur effect (required)
   * @param sigma Sigma, or variance, of the motion blur operation (required)
   * @param angle Angle of the motion blur in degrees (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterMotionBlur(Integer radius, Integer sigma, Integer angle, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterMotionBlurWithHttpInfo(radius, sigma, angle, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Perform a motion blur on the input image
   * Perform a motion blur on the input image at a specific angle
   * @param radius Radius in pixels of the blur operation; a larger radius will produce a greater blur effect (required)
   * @param sigma Sigma, or variance, of the motion blur operation (required)
   * @param angle Angle of the motion blur in degrees (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterMotionBlurWithHttpInfo(Integer radius, Integer sigma, Integer angle, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterMotionBlurRequestBuilder(radius, sigma, angle, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterMotionBlur", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterMotionBlurRequestBuilder(Integer radius, Integer sigma, Integer angle, File imageFile) throws ApiException {
    // verify the required parameter 'radius' is set
    if (radius == null) {
      throw new ApiException(400, "Missing the required parameter 'radius' when calling filterMotionBlur");
    }
    // verify the required parameter 'sigma' is set
    if (sigma == null) {
      throw new ApiException(400, "Missing the required parameter 'sigma' when calling filterMotionBlur");
    }
    // verify the required parameter 'angle' is set
    if (angle == null) {
      throw new ApiException(400, "Missing the required parameter 'angle' when calling filterMotionBlur");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterMotionBlur");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/blur/motion/{radius}/{sigma}/{angle}"
        .replace("{radius}", ApiClient.urlEncode(radius.toString()))
        .replace("{sigma}", ApiClient.urlEncode(sigma.toString()))
        .replace("{angle}", ApiClient.urlEncode(angle.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Posterize the image by reducing distinct colors
   * Reduce the unique number of colors in the image to the specified level
   * @param levels Number of unique colors to retain in the output image (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterPosterize(Integer levels, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterPosterizeWithHttpInfo(levels, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Posterize the image by reducing distinct colors
   * Reduce the unique number of colors in the image to the specified level
   * @param levels Number of unique colors to retain in the output image (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterPosterizeWithHttpInfo(Integer levels, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterPosterizeRequestBuilder(levels, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterPosterize", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterPosterizeRequestBuilder(Integer levels, File imageFile) throws ApiException {
    // verify the required parameter 'levels' is set
    if (levels == null) {
      throw new ApiException(400, "Missing the required parameter 'levels' when calling filterPosterize");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterPosterize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/posterize";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("levels", levels));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Swirl distort the image
   * Swirl distort the image by the specified number of degrees
   * @param degrees Degrees of swirl (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] filterSwirl(Integer degrees, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = filterSwirlWithHttpInfo(degrees, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Swirl distort the image
   * Swirl distort the image by the specified number of degrees
   * @param degrees Degrees of swirl (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> filterSwirlWithHttpInfo(Integer degrees, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = filterSwirlRequestBuilder(degrees, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("filterSwirl", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder filterSwirlRequestBuilder(Integer degrees, File imageFile) throws ApiException {
    // verify the required parameter 'degrees' is set
    if (degrees == null) {
      throw new ApiException(400, "Missing the required parameter 'degrees' when calling filterSwirl");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling filterSwirl");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/filter/swirl";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("degrees", degrees));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
