/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import java.io.File;
import com.cloudmersive.client.native.model.XmlAddAttributeWithXPathResult;
import com.cloudmersive.client.native.model.XmlAddChildWithXPathResult;
import com.cloudmersive.client.native.model.XmlFilterWithXPathResult;
import com.cloudmersive.client.native.model.XmlQueryWithXQueryMultiResult;
import com.cloudmersive.client.native.model.XmlQueryWithXQueryResult;
import com.cloudmersive.client.native.model.XmlRemoveAllChildrenWithXPathResult;
import com.cloudmersive.client.native.model.XmlRemoveWithXPathResult;
import com.cloudmersive.client.native.model.XmlReplaceWithXPathResult;
import com.cloudmersive.client.native.model.XmlSetValueWithXPathResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:28:09.672516700-07:00[America/Los_Angeles]")
public class ConvertDataApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ConvertDataApi() {
    this(new ApiClient());
  }

  public ConvertDataApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Convert CSV to JSON conversion
   * Convert a CSV file to a JSON object array
   * @param inputFile Input file to perform the operation on. (required)
   * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object convertDataCsvToJson(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
    ApiResponse<Object> localVarResponse = convertDataCsvToJsonWithHttpInfo(inputFile, columnNamesFromFirstRow);
    return localVarResponse.getData();
  }

  /**
   * Convert CSV to JSON conversion
   * Convert a CSV file to a JSON object array
   * @param inputFile Input file to perform the operation on. (required)
   * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> convertDataCsvToJsonWithHttpInfo(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataCsvToJsonRequestBuilder(inputFile, columnNamesFromFirstRow);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataCsvToJson", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataCsvToJsonRequestBuilder(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataCsvToJson");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/csv/to/json";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (columnNamesFromFirstRow != null) {
      localVarRequestBuilder.header("columnNamesFromFirstRow", columnNamesFromFirstRow.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert CSV to XML conversion
   * Convert a CSV file to a XML file
   * @param inputFile Input file to perform the operation on. (required)
   * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDataCsvToXml(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDataCsvToXmlWithHttpInfo(inputFile, columnNamesFromFirstRow);
    return localVarResponse.getData();
  }

  /**
   * Convert CSV to XML conversion
   * Convert a CSV file to a XML file
   * @param inputFile Input file to perform the operation on. (required)
   * @param columnNamesFromFirstRow Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDataCsvToXmlWithHttpInfo(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataCsvToXmlRequestBuilder(inputFile, columnNamesFromFirstRow);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataCsvToXml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataCsvToXmlRequestBuilder(File inputFile, Boolean columnNamesFromFirstRow) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataCsvToXml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/csv/to/xml";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (columnNamesFromFirstRow != null) {
      localVarRequestBuilder.header("columnNamesFromFirstRow", columnNamesFromFirstRow.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert JSON String to XML conversion
   * Convert a JSON object into XML
   * @param jsonString Input JSON String to convert to XML (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object convertDataJsonStringToXml(String jsonString) throws ApiException {
    ApiResponse<Object> localVarResponse = convertDataJsonStringToXmlWithHttpInfo(jsonString);
    return localVarResponse.getData();
  }

  /**
   * Convert JSON String to XML conversion
   * Convert a JSON object into XML
   * @param jsonString Input JSON String to convert to XML (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> convertDataJsonStringToXmlWithHttpInfo(String jsonString) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataJsonStringToXmlRequestBuilder(jsonString);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataJsonStringToXml", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataJsonStringToXmlRequestBuilder(String jsonString) throws ApiException {
    // verify the required parameter 'jsonString' is set
    if (jsonString == null) {
      throw new ApiException(400, "Missing the required parameter 'jsonString' when calling convertDataJsonStringToXml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/json-string/to/xml";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("JsonString", jsonString));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert JSON Object to XML conversion
   * Convert a JSON object into XML
   * @param jsonObject Input JSON Object to convert to XML (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDataJsonToXml(Object jsonObject) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDataJsonToXmlWithHttpInfo(jsonObject);
    return localVarResponse.getData();
  }

  /**
   * Convert JSON Object to XML conversion
   * Convert a JSON object into XML
   * @param jsonObject Input JSON Object to convert to XML (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDataJsonToXmlWithHttpInfo(Object jsonObject) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataJsonToXmlRequestBuilder(jsonObject);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataJsonToXml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataJsonToXmlRequestBuilder(Object jsonObject) throws ApiException {
    // verify the required parameter 'jsonObject' is set
    if (jsonObject == null) {
      throw new ApiException(400, "Missing the required parameter 'jsonObject' when calling convertDataJsonToXml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/json/to/xml";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(jsonObject);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel (97-2003) XLS to JSON conversion
   * Convert an Excel (97-2003) XLS file to a JSON object array
   * @param inputFile Input file to perform the operation on. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object convertDataXlsToJson(File inputFile) throws ApiException {
    ApiResponse<Object> localVarResponse = convertDataXlsToJsonWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel (97-2003) XLS to JSON conversion
   * Convert an Excel (97-2003) XLS file to a JSON object array
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> convertDataXlsToJsonWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXlsToJsonRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXlsToJson", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXlsToJsonRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXlsToJson");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xls/to/json";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX to JSON conversion
   * Convert an Excel XLSX file to a JSON object array
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDataXlsxToJson(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDataXlsxToJsonWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX to JSON conversion
   * Convert an Excel XLSX file to a JSON object array
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDataXlsxToJsonWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXlsxToJsonRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXlsxToJson", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXlsxToJsonRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXlsxToJson");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/json";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert Excel XLSX to XML conversion
   * Convert an Excel XLSX file to a XML file
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDataXlsxToXml(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDataXlsxToXmlWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert Excel XLSX to XML conversion
   * Convert an Excel XLSX file to a XML file
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDataXlsxToXmlWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXlsxToXmlRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXlsxToXml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXlsxToXmlRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXlsxToXml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xlsx/to/xml";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Adds an attribute to all XML nodes matching XPath expression
   * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlAttributeName Name of the XML attribute to add (required)
   * @param xmlAttributeValue Value of the XML attribute to add (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return XmlAddAttributeWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlAddAttributeWithXPathResult convertDataXmlEditAddAttributeWithXPath(String xpathExpression, String xmlAttributeName, String xmlAttributeValue, File inputFile) throws ApiException {
    ApiResponse<XmlAddAttributeWithXPathResult> localVarResponse = convertDataXmlEditAddAttributeWithXPathWithHttpInfo(xpathExpression, xmlAttributeName, xmlAttributeValue, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Adds an attribute to all XML nodes matching XPath expression
   * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlAttributeName Name of the XML attribute to add (required)
   * @param xmlAttributeValue Value of the XML attribute to add (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlAddAttributeWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlAddAttributeWithXPathResult> convertDataXmlEditAddAttributeWithXPathWithHttpInfo(String xpathExpression, String xmlAttributeName, String xmlAttributeValue, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlEditAddAttributeWithXPathRequestBuilder(xpathExpression, xmlAttributeName, xmlAttributeValue, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlEditAddAttributeWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlAddAttributeWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlAddAttributeWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlEditAddAttributeWithXPathRequestBuilder(String xpathExpression, String xmlAttributeName, String xmlAttributeValue, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlEditAddAttributeWithXPath");
    }
    // verify the required parameter 'xmlAttributeName' is set
    if (xmlAttributeName == null) {
      throw new ApiException(400, "Missing the required parameter 'xmlAttributeName' when calling convertDataXmlEditAddAttributeWithXPath");
    }
    // verify the required parameter 'xmlAttributeValue' is set
    if (xmlAttributeValue == null) {
      throw new ApiException(400, "Missing the required parameter 'xmlAttributeValue' when calling convertDataXmlEditAddAttributeWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlEditAddAttributeWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/edit/xpath/add-attribute";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    if (xmlAttributeName != null) {
      localVarRequestBuilder.header("XmlAttributeName", xmlAttributeName.toString());
    }
    if (xmlAttributeValue != null) {
      localVarRequestBuilder.header("XmlAttributeValue", xmlAttributeValue.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Adds an XML node as a child to XML nodes matching XPath expression
   * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlNodeToAdd XML Node to add as a child (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return XmlAddChildWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlAddChildWithXPathResult convertDataXmlEditAddChildWithXPath(String xpathExpression, String xmlNodeToAdd, File inputFile) throws ApiException {
    ApiResponse<XmlAddChildWithXPathResult> localVarResponse = convertDataXmlEditAddChildWithXPathWithHttpInfo(xpathExpression, xmlNodeToAdd, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Adds an XML node as a child to XML nodes matching XPath expression
   * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlNodeToAdd XML Node to add as a child (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlAddChildWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlAddChildWithXPathResult> convertDataXmlEditAddChildWithXPathWithHttpInfo(String xpathExpression, String xmlNodeToAdd, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlEditAddChildWithXPathRequestBuilder(xpathExpression, xmlNodeToAdd, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlEditAddChildWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlAddChildWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlAddChildWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlEditAddChildWithXPathRequestBuilder(String xpathExpression, String xmlNodeToAdd, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlEditAddChildWithXPath");
    }
    // verify the required parameter 'xmlNodeToAdd' is set
    if (xmlNodeToAdd == null) {
      throw new ApiException(400, "Missing the required parameter 'xmlNodeToAdd' when calling convertDataXmlEditAddChildWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlEditAddChildWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/edit/xpath/add-child";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    if (xmlNodeToAdd != null) {
      localVarRequestBuilder.header("XmlNodeToAdd", xmlNodeToAdd.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
   * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return XmlRemoveAllChildrenWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlRemoveAllChildrenWithXPathResult convertDataXmlEditRemoveAllChildNodesWithXPath(String xpathExpression, File inputFile) throws ApiException {
    ApiResponse<XmlRemoveAllChildrenWithXPathResult> localVarResponse = convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo(xpathExpression, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
   * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlRemoveAllChildrenWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlRemoveAllChildrenWithXPathResult> convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo(String xpathExpression, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlEditRemoveAllChildNodesWithXPathRequestBuilder(xpathExpression, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlEditRemoveAllChildNodesWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlRemoveAllChildrenWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlRemoveAllChildrenWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlEditRemoveAllChildNodesWithXPathRequestBuilder(String xpathExpression, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlEditRemoveAllChildNodesWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlEditRemoveAllChildNodesWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/edit/xpath/remove-all-children";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replaces XML nodes matching XPath expression with new node
   * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlNodeReplacement XML Node replacement content (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return XmlReplaceWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlReplaceWithXPathResult convertDataXmlEditReplaceWithXPath(String xpathExpression, String xmlNodeReplacement, File inputFile) throws ApiException {
    ApiResponse<XmlReplaceWithXPathResult> localVarResponse = convertDataXmlEditReplaceWithXPathWithHttpInfo(xpathExpression, xmlNodeReplacement, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Replaces XML nodes matching XPath expression with new node
   * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlNodeReplacement XML Node replacement content (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlReplaceWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlReplaceWithXPathResult> convertDataXmlEditReplaceWithXPathWithHttpInfo(String xpathExpression, String xmlNodeReplacement, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlEditReplaceWithXPathRequestBuilder(xpathExpression, xmlNodeReplacement, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlEditReplaceWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlReplaceWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlReplaceWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlEditReplaceWithXPathRequestBuilder(String xpathExpression, String xmlNodeReplacement, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlEditReplaceWithXPath");
    }
    // verify the required parameter 'xmlNodeReplacement' is set
    if (xmlNodeReplacement == null) {
      throw new ApiException(400, "Missing the required parameter 'xmlNodeReplacement' when calling convertDataXmlEditReplaceWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlEditReplaceWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/edit/xpath/replace";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    if (xmlNodeReplacement != null) {
      localVarRequestBuilder.header("XmlNodeReplacement", xmlNodeReplacement.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Sets the value contents of XML nodes matching XPath expression
   * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlValue XML Value to set into the matching XML nodes (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return XmlSetValueWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlSetValueWithXPathResult convertDataXmlEditSetValueWithXPath(String xpathExpression, String xmlValue, File inputFile) throws ApiException {
    ApiResponse<XmlSetValueWithXPathResult> localVarResponse = convertDataXmlEditSetValueWithXPathWithHttpInfo(xpathExpression, xmlValue, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Sets the value contents of XML nodes matching XPath expression
   * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param xmlValue XML Value to set into the matching XML nodes (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlSetValueWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlSetValueWithXPathResult> convertDataXmlEditSetValueWithXPathWithHttpInfo(String xpathExpression, String xmlValue, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlEditSetValueWithXPathRequestBuilder(xpathExpression, xmlValue, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlEditSetValueWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlSetValueWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlSetValueWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlEditSetValueWithXPathRequestBuilder(String xpathExpression, String xmlValue, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlEditSetValueWithXPath");
    }
    // verify the required parameter 'xmlValue' is set
    if (xmlValue == null) {
      throw new ApiException(400, "Missing the required parameter 'xmlValue' when calling convertDataXmlEditSetValueWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlEditSetValueWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/edit/xpath/set-value";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    if (xmlValue != null) {
      localVarRequestBuilder.header("XmlValue", xmlValue.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Filter, select XML nodes using XPath expression, get results
   * Return the reuslts of filtering, selecting an XML document with an XPath expression
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return XmlFilterWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlFilterWithXPathResult convertDataXmlFilterWithXPath(String xpathExpression, File inputFile) throws ApiException {
    ApiResponse<XmlFilterWithXPathResult> localVarResponse = convertDataXmlFilterWithXPathWithHttpInfo(xpathExpression, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Filter, select XML nodes using XPath expression, get results
   * Return the reuslts of filtering, selecting an XML document with an XPath expression
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlFilterWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlFilterWithXPathResult> convertDataXmlFilterWithXPathWithHttpInfo(String xpathExpression, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlFilterWithXPathRequestBuilder(xpathExpression, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlFilterWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlFilterWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlFilterWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlFilterWithXPathRequestBuilder(String xpathExpression, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlFilterWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlFilterWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/select/xpath";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Query an XML file using XQuery query, get results
   * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
   * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return XmlQueryWithXQueryResult
   * @throws ApiException if fails to make API call
   */
  public XmlQueryWithXQueryResult convertDataXmlQueryWithXQuery(String xquery, File inputFile) throws ApiException {
    ApiResponse<XmlQueryWithXQueryResult> localVarResponse = convertDataXmlQueryWithXQueryWithHttpInfo(xquery, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Query an XML file using XQuery query, get results
   * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
   * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
   * @param inputFile Input XML file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlQueryWithXQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlQueryWithXQueryResult> convertDataXmlQueryWithXQueryWithHttpInfo(String xquery, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlQueryWithXQueryRequestBuilder(xquery, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlQueryWithXQuery", localVarResponse);
        }
        return new ApiResponse<XmlQueryWithXQueryResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlQueryWithXQueryResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlQueryWithXQueryRequestBuilder(String xquery, File inputFile) throws ApiException {
    // verify the required parameter 'xquery' is set
    if (xquery == null) {
      throw new ApiException(400, "Missing the required parameter 'xquery' when calling convertDataXmlQueryWithXQuery");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlQueryWithXQuery");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/query/xquery";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xquery != null) {
      localVarRequestBuilder.header("XQuery", xquery.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Query multiple XML files using XQuery query, get results
   * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
   * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
   * @param inputFile1 First input XML file to perform the operation on. (required)
   * @param inputFile2 Second input XML file to perform the operation on. (optional)
   * @param inputFile3 Third input XML file to perform the operation on. (optional)
   * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
   * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
   * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
   * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
   * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
   * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
   * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
   * @return XmlQueryWithXQueryMultiResult
   * @throws ApiException if fails to make API call
   */
  public XmlQueryWithXQueryMultiResult convertDataXmlQueryWithXQueryMulti(String xquery, File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<XmlQueryWithXQueryMultiResult> localVarResponse = convertDataXmlQueryWithXQueryMultiWithHttpInfo(xquery, inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Query multiple XML files using XQuery query, get results
   * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
   * @param xquery Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
   * @param inputFile1 First input XML file to perform the operation on. (required)
   * @param inputFile2 Second input XML file to perform the operation on. (optional)
   * @param inputFile3 Third input XML file to perform the operation on. (optional)
   * @param inputFile4 Fourth input XML file to perform the operation on. (optional)
   * @param inputFile5 Fifth input XML file to perform the operation on. (optional)
   * @param inputFile6 Sixth input XML file to perform the operation on. (optional)
   * @param inputFile7 Seventh input XML file to perform the operation on. (optional)
   * @param inputFile8 Eighth input XML file to perform the operation on. (optional)
   * @param inputFile9 Ninth input XML file to perform the operation on. (optional)
   * @param inputFile10 Tenth input XML file to perform the operation on. (optional)
   * @return ApiResponse&lt;XmlQueryWithXQueryMultiResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlQueryWithXQueryMultiResult> convertDataXmlQueryWithXQueryMultiWithHttpInfo(String xquery, File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlQueryWithXQueryMultiRequestBuilder(xquery, inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlQueryWithXQueryMulti", localVarResponse);
        }
        return new ApiResponse<XmlQueryWithXQueryMultiResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlQueryWithXQueryMultiResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlQueryWithXQueryMultiRequestBuilder(String xquery, File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'xquery' is set
    if (xquery == null) {
      throw new ApiException(400, "Missing the required parameter 'xquery' when calling convertDataXmlQueryWithXQueryMulti");
    }
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling convertDataXmlQueryWithXQueryMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/query/xquery/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xquery != null) {
      localVarRequestBuilder.header("XQuery", xquery.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove, delete XML nodes and items matching XPath expression
   * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return XmlRemoveWithXPathResult
   * @throws ApiException if fails to make API call
   */
  public XmlRemoveWithXPathResult convertDataXmlRemoveWithXPath(String xpathExpression, File inputFile) throws ApiException {
    ApiResponse<XmlRemoveWithXPathResult> localVarResponse = convertDataXmlRemoveWithXPathWithHttpInfo(xpathExpression, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Remove, delete XML nodes and items matching XPath expression
   * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
   * @param xpathExpression Valid XML XPath query expression (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;XmlRemoveWithXPathResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XmlRemoveWithXPathResult> convertDataXmlRemoveWithXPathWithHttpInfo(String xpathExpression, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlRemoveWithXPathRequestBuilder(xpathExpression, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlRemoveWithXPath", localVarResponse);
        }
        return new ApiResponse<XmlRemoveWithXPathResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XmlRemoveWithXPathResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlRemoveWithXPathRequestBuilder(String xpathExpression, File inputFile) throws ApiException {
    // verify the required parameter 'xpathExpression' is set
    if (xpathExpression == null) {
      throw new ApiException(400, "Missing the required parameter 'xpathExpression' when calling convertDataXmlRemoveWithXPath");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlRemoveWithXPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/edit/xpath/remove";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xpathExpression != null) {
      localVarRequestBuilder.header("XPathExpression", xpathExpression.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Convert XML to JSON conversion
   * Convert an XML string or file into JSON
   * @param inputFile Input file to perform the operation on. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object convertDataXmlToJson(File inputFile) throws ApiException {
    ApiResponse<Object> localVarResponse = convertDataXmlToJsonWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Convert XML to JSON conversion
   * Convert an XML string or file into JSON
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> convertDataXmlToJsonWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlToJsonRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlToJson", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlToJsonRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlToJson");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/to/json";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Transform XML document file with XSLT into a new XML document
   * Convert an XML string or file into JSON
   * @param inputFile Input XML file to perform the operation on. (required)
   * @param transformFile Input XSLT file to use to transform the input XML file. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] convertDataXmlTransformWithXsltToXml(File inputFile, File transformFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = convertDataXmlTransformWithXsltToXmlWithHttpInfo(inputFile, transformFile);
    return localVarResponse.getData();
  }

  /**
   * Transform XML document file with XSLT into a new XML document
   * Convert an XML string or file into JSON
   * @param inputFile Input XML file to perform the operation on. (required)
   * @param transformFile Input XSLT file to use to transform the input XML file. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> convertDataXmlTransformWithXsltToXmlWithHttpInfo(File inputFile, File transformFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertDataXmlTransformWithXsltToXmlRequestBuilder(inputFile, transformFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convertDataXmlTransformWithXsltToXml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertDataXmlTransformWithXsltToXmlRequestBuilder(File inputFile, File transformFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling convertDataXmlTransformWithXsltToXml");
    }
    // verify the required parameter 'transformFile' is set
    if (transformFile == null) {
      throw new ApiException(400, "Missing the required parameter 'transformFile' when calling convertDataXmlTransformWithXsltToXml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/xml/transform/xslt/to/xml";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
