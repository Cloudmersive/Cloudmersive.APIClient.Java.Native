/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import com.cloudmersive.client.native.model.Base64DecodeRequest;
import com.cloudmersive.client.native.model.Base64DecodeResponse;
import com.cloudmersive.client.native.model.Base64DetectRequest;
import com.cloudmersive.client.native.model.Base64DetectResponse;
import com.cloudmersive.client.native.model.Base64EncodeRequest;
import com.cloudmersive.client.native.model.Base64EncodeResponse;
import com.cloudmersive.client.native.model.ChangeLineEndingResponse;
import com.cloudmersive.client.native.model.DetectLineEndingsResponse;
import java.io.File;
import com.cloudmersive.client.native.model.FindStringRegexRequest;
import com.cloudmersive.client.native.model.FindStringRegexResponse;
import com.cloudmersive.client.native.model.FindStringSimpleRequest;
import com.cloudmersive.client.native.model.FindStringSimpleResponse;
import com.cloudmersive.client.native.model.RemoveHtmlFromTextRequest;
import com.cloudmersive.client.native.model.RemoveHtmlFromTextResponse;
import com.cloudmersive.client.native.model.RemoveWhitespaceFromTextRequest;
import com.cloudmersive.client.native.model.RemoveWhitespaceFromTextResponse;
import com.cloudmersive.client.native.model.ReplaceStringRegexRequest;
import com.cloudmersive.client.native.model.ReplaceStringRegexResponse;
import com.cloudmersive.client.native.model.ReplaceStringSimpleRequest;
import com.cloudmersive.client.native.model.ReplaceStringSimpleResponse;
import com.cloudmersive.client.native.model.TextEncodingDetectResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:28:09.672516700-07:00[America/Los_Angeles]")
public class EditTextApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EditTextApi() {
    this(new ApiClient());
  }

  public EditTextApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Base 64 decode, convert base 64 string to binary content
   * Decodes / converts base 64 UTF-8 text string to binary content
   * @param request Input request (required)
   * @return Base64DecodeResponse
   * @throws ApiException if fails to make API call
   */
  public Base64DecodeResponse editTextBase64Decode(Base64DecodeRequest request) throws ApiException {
    ApiResponse<Base64DecodeResponse> localVarResponse = editTextBase64DecodeWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Base 64 decode, convert base 64 string to binary content
   * Decodes / converts base 64 UTF-8 text string to binary content
   * @param request Input request (required)
   * @return ApiResponse&lt;Base64DecodeResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Base64DecodeResponse> editTextBase64DecodeWithHttpInfo(Base64DecodeRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextBase64DecodeRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextBase64Decode", localVarResponse);
        }
        return new ApiResponse<Base64DecodeResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Base64DecodeResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextBase64DecodeRequestBuilder(Base64DecodeRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextBase64Decode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/encoding/base64/decode";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect, check if text string is base 64 encoded
   * Checks, detects if input string is base 64 encoded
   * @param request Input request (required)
   * @return Base64DetectResponse
   * @throws ApiException if fails to make API call
   */
  public Base64DetectResponse editTextBase64Detect(Base64DetectRequest request) throws ApiException {
    ApiResponse<Base64DetectResponse> localVarResponse = editTextBase64DetectWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Detect, check if text string is base 64 encoded
   * Checks, detects if input string is base 64 encoded
   * @param request Input request (required)
   * @return ApiResponse&lt;Base64DetectResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Base64DetectResponse> editTextBase64DetectWithHttpInfo(Base64DetectRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextBase64DetectRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextBase64Detect", localVarResponse);
        }
        return new ApiResponse<Base64DetectResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Base64DetectResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextBase64DetectRequestBuilder(Base64DetectRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextBase64Detect");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/encoding/base64/detect";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Base 64 encode, convert binary or file data to a text string
   * Encodes / converts binary or file data to a text string
   * @param request Input request (required)
   * @return Base64EncodeResponse
   * @throws ApiException if fails to make API call
   */
  public Base64EncodeResponse editTextBase64Encode(Base64EncodeRequest request) throws ApiException {
    ApiResponse<Base64EncodeResponse> localVarResponse = editTextBase64EncodeWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Base 64 encode, convert binary or file data to a text string
   * Encodes / converts binary or file data to a text string
   * @param request Input request (required)
   * @return ApiResponse&lt;Base64EncodeResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Base64EncodeResponse> editTextBase64EncodeWithHttpInfo(Base64EncodeRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextBase64EncodeRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextBase64Encode", localVarResponse);
        }
        return new ApiResponse<Base64EncodeResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Base64EncodeResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextBase64EncodeRequestBuilder(Base64EncodeRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextBase64Encode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/encoding/base64/encode";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set, change line endings of a text file
   * Sets the line ending type of a text file; set to Windows, Unix or Mac.
   * @param lineEndingType Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ChangeLineEndingResponse
   * @throws ApiException if fails to make API call
   */
  public ChangeLineEndingResponse editTextChangeLineEndings(String lineEndingType, File inputFile) throws ApiException {
    ApiResponse<ChangeLineEndingResponse> localVarResponse = editTextChangeLineEndingsWithHttpInfo(lineEndingType, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Set, change line endings of a text file
   * Sets the line ending type of a text file; set to Windows, Unix or Mac.
   * @param lineEndingType Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return (required)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;ChangeLineEndingResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ChangeLineEndingResponse> editTextChangeLineEndingsWithHttpInfo(String lineEndingType, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextChangeLineEndingsRequestBuilder(lineEndingType, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextChangeLineEndings", localVarResponse);
        }
        return new ApiResponse<ChangeLineEndingResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ChangeLineEndingResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextChangeLineEndingsRequestBuilder(String lineEndingType, File inputFile) throws ApiException {
    // verify the required parameter 'lineEndingType' is set
    if (lineEndingType == null) {
      throw new ApiException(400, "Missing the required parameter 'lineEndingType' when calling editTextChangeLineEndings");
    }
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editTextChangeLineEndings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/line-endings/change";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (lineEndingType != null) {
      localVarRequestBuilder.header("lineEndingType", lineEndingType.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect line endings of a text file
   * Detect line ending type (Windows, Unix or Mac) of an input file.
   * @param inputFile Input file to perform the operation on. (required)
   * @return DetectLineEndingsResponse
   * @throws ApiException if fails to make API call
   */
  public DetectLineEndingsResponse editTextDetectLineEndings(File inputFile) throws ApiException {
    ApiResponse<DetectLineEndingsResponse> localVarResponse = editTextDetectLineEndingsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Detect line endings of a text file
   * Detect line ending type (Windows, Unix or Mac) of an input file.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DetectLineEndingsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DetectLineEndingsResponse> editTextDetectLineEndingsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextDetectLineEndingsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextDetectLineEndings", localVarResponse);
        }
        return new ApiResponse<DetectLineEndingsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DetectLineEndingsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextDetectLineEndingsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editTextDetectLineEndings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/line-endings/detect";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Find a regular expression regex in text input
   * Find all occurrences of the input regular expression in the input content, and returns the matches
   * @param request Input request (required)
   * @return FindStringRegexResponse
   * @throws ApiException if fails to make API call
   */
  public FindStringRegexResponse editTextFindRegex(FindStringRegexRequest request) throws ApiException {
    ApiResponse<FindStringRegexResponse> localVarResponse = editTextFindRegexWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Find a regular expression regex in text input
   * Find all occurrences of the input regular expression in the input content, and returns the matches
   * @param request Input request (required)
   * @return ApiResponse&lt;FindStringRegexResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindStringRegexResponse> editTextFindRegexWithHttpInfo(FindStringRegexRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextFindRegexRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextFindRegex", localVarResponse);
        }
        return new ApiResponse<FindStringRegexResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindStringRegexResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextFindRegexRequestBuilder(FindStringRegexRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextFindRegex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/find/regex";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Find a string in text input
   * Finds all occurrences of the input string in the input content, and returns the matches
   * @param request Input request (required)
   * @return FindStringSimpleResponse
   * @throws ApiException if fails to make API call
   */
  public FindStringSimpleResponse editTextFindSimple(FindStringSimpleRequest request) throws ApiException {
    ApiResponse<FindStringSimpleResponse> localVarResponse = editTextFindSimpleWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Find a string in text input
   * Finds all occurrences of the input string in the input content, and returns the matches
   * @param request Input request (required)
   * @return ApiResponse&lt;FindStringSimpleResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindStringSimpleResponse> editTextFindSimpleWithHttpInfo(FindStringSimpleRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextFindSimpleRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextFindSimple", localVarResponse);
        }
        return new ApiResponse<FindStringSimpleResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindStringSimpleResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextFindSimpleRequestBuilder(FindStringSimpleRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextFindSimple");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/find/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove whitespace from text string
   * Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
   * @param request Input request (required)
   * @return RemoveWhitespaceFromTextResponse
   * @throws ApiException if fails to make API call
   */
  public RemoveWhitespaceFromTextResponse editTextRemoveAllWhitespace(RemoveWhitespaceFromTextRequest request) throws ApiException {
    ApiResponse<RemoveWhitespaceFromTextResponse> localVarResponse = editTextRemoveAllWhitespaceWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Remove whitespace from text string
   * Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
   * @param request Input request (required)
   * @return ApiResponse&lt;RemoveWhitespaceFromTextResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RemoveWhitespaceFromTextResponse> editTextRemoveAllWhitespaceWithHttpInfo(RemoveWhitespaceFromTextRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextRemoveAllWhitespaceRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextRemoveAllWhitespace", localVarResponse);
        }
        return new ApiResponse<RemoveWhitespaceFromTextResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RemoveWhitespaceFromTextResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextRemoveAllWhitespaceRequestBuilder(RemoveWhitespaceFromTextRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextRemoveAllWhitespace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/remove/whitespace/all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove HTML from text string
   * Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
   * @param request Input request (required)
   * @return RemoveHtmlFromTextResponse
   * @throws ApiException if fails to make API call
   */
  public RemoveHtmlFromTextResponse editTextRemoveHtml(RemoveHtmlFromTextRequest request) throws ApiException {
    ApiResponse<RemoveHtmlFromTextResponse> localVarResponse = editTextRemoveHtmlWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Remove HTML from text string
   * Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
   * @param request Input request (required)
   * @return ApiResponse&lt;RemoveHtmlFromTextResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RemoveHtmlFromTextResponse> editTextRemoveHtmlWithHttpInfo(RemoveHtmlFromTextRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextRemoveHtmlRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextRemoveHtml", localVarResponse);
        }
        return new ApiResponse<RemoveHtmlFromTextResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RemoveHtmlFromTextResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextRemoveHtmlRequestBuilder(RemoveHtmlFromTextRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextRemoveHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/remove/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace a string in text with a regex regular expression string
   * Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
   * @param request Input request (required)
   * @return ReplaceStringRegexResponse
   * @throws ApiException if fails to make API call
   */
  public ReplaceStringRegexResponse editTextReplaceRegex(ReplaceStringRegexRequest request) throws ApiException {
    ApiResponse<ReplaceStringRegexResponse> localVarResponse = editTextReplaceRegexWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Replace a string in text with a regex regular expression string
   * Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
   * @param request Input request (required)
   * @return ApiResponse&lt;ReplaceStringRegexResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReplaceStringRegexResponse> editTextReplaceRegexWithHttpInfo(ReplaceStringRegexRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextReplaceRegexRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextReplaceRegex", localVarResponse);
        }
        return new ApiResponse<ReplaceStringRegexResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReplaceStringRegexResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextReplaceRegexRequestBuilder(ReplaceStringRegexRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextReplaceRegex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/replace/regex";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace a string in text with another string value
   * Replaces all occurrences of the input string in the input content, and returns the result
   * @param request Input request (required)
   * @return ReplaceStringSimpleResponse
   * @throws ApiException if fails to make API call
   */
  public ReplaceStringSimpleResponse editTextReplaceSimple(ReplaceStringSimpleRequest request) throws ApiException {
    ApiResponse<ReplaceStringSimpleResponse> localVarResponse = editTextReplaceSimpleWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Replace a string in text with another string value
   * Replaces all occurrences of the input string in the input content, and returns the result
   * @param request Input request (required)
   * @return ApiResponse&lt;ReplaceStringSimpleResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReplaceStringSimpleResponse> editTextReplaceSimpleWithHttpInfo(ReplaceStringSimpleRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextReplaceSimpleRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextReplaceSimple", localVarResponse);
        }
        return new ApiResponse<ReplaceStringSimpleResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReplaceStringSimpleResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextReplaceSimpleRequestBuilder(ReplaceStringSimpleRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextReplaceSimple");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/replace/string";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detect text encoding of file
   * Checks text encoding of file
   * @param inputFile Input file to perform the operation on. (required)
   * @return TextEncodingDetectResponse
   * @throws ApiException if fails to make API call
   */
  public TextEncodingDetectResponse editTextTextEncodingDetect(File inputFile) throws ApiException {
    ApiResponse<TextEncodingDetectResponse> localVarResponse = editTextTextEncodingDetectWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Detect text encoding of file
   * Checks text encoding of file
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;TextEncodingDetectResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TextEncodingDetectResponse> editTextTextEncodingDetectWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextTextEncodingDetectRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextTextEncodingDetect", localVarResponse);
        }
        return new ApiResponse<TextEncodingDetectResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TextEncodingDetectResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextTextEncodingDetectRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editTextTextEncodingDetect");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/encoding/detect";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Trim leading and trailing whitespace from text string
   * Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
   * @param request Input request (required)
   * @return RemoveWhitespaceFromTextResponse
   * @throws ApiException if fails to make API call
   */
  public RemoveWhitespaceFromTextResponse editTextTrimWhitespace(RemoveWhitespaceFromTextRequest request) throws ApiException {
    ApiResponse<RemoveWhitespaceFromTextResponse> localVarResponse = editTextTrimWhitespaceWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Trim leading and trailing whitespace from text string
   * Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
   * @param request Input request (required)
   * @return ApiResponse&lt;RemoveWhitespaceFromTextResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RemoveWhitespaceFromTextResponse> editTextTrimWhitespaceWithHttpInfo(RemoveWhitespaceFromTextRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editTextTrimWhitespaceRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editTextTrimWhitespace", localVarResponse);
        }
        return new ApiResponse<RemoveWhitespaceFromTextResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RemoveWhitespaceFromTextResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editTextTrimWhitespaceRequestBuilder(RemoveWhitespaceFromTextRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editTextTrimWhitespace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/text/remove/whitespace/trim";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
