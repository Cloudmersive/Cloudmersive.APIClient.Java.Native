/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.native;

import com.cloudmersive.client.native.invoker.ApiClient;
import com.cloudmersive.client.native.invoker.ApiException;
import com.cloudmersive.client.native.invoker.ApiResponse;
import com.cloudmersive.client.native.invoker.Pair;

import java.io.File;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:26:27.275021200-07:00[America/Los_Angeles]")
public class MergeDocumentApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MergeDocumentApi() {
    this(new ApiClient());
  }

  public MergeDocumentApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Merge Two Word DOCX Together
   * Combine two Office Word Documents (docx) into one single Office Word document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentDocx(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentDocxWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two Word DOCX Together
   * Combine two Office Word Documents (docx) into one single Office Word document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentDocxWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentDocxRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentDocx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentDocxRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentDocx");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentDocx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple Word DOCX Together
   * Combine multiple Office Word Documents (docx) into one single Office Word document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentDocxMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentDocxMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple Word DOCX Together
   * Combine multiple Office Word Documents (docx) into one single Office Word document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentDocxMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentDocxMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentDocxMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentDocxMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentDocxMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentDocxMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/docx/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Two HTML (HTM) Files Together
   * Combine two HTML (.HTM) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentHtml(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentHtmlWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two HTML (HTM) Files Together
   * Combine two HTML (.HTM) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentHtmlWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentHtmlRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentHtml", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentHtmlRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentHtml");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentHtml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple HTML (HTM) Files Together
   * Combine multiple HTML (.HTM) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentHtmlMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentHtmlMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple HTML (HTM) Files Together
   * Combine multiple HTML (.HTM) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.  The title will be taken from the first document.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentHtmlMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentHtmlMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentHtmlMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentHtmlMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentHtmlMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentHtmlMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/html/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Two PDF Files Together
   * Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentPdf(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentPdfWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two PDF Files Together
   * Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentPdfWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentPdfRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentPdf", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentPdfRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentPdf");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentPdf");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple PDF Files Together
   * Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentPdfMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentPdfMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple PDF Files Together
   * Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentPdfMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentPdfMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentPdfMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentPdfMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentPdfMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentPdfMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/pdf/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Two PNG Files Together
   * Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentPng(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentPngWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two PNG Files Together
   * Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentPngWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentPngRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentPng", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentPngRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentPng");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentPng");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/png/vertical";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple PNG Files Together
   * Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentPngMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentPngMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple PNG Files Together
   * Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentPngMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentPngMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentPngMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentPngMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentPngMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentPngMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/png/vertical/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Two PowerPoint PPTX Together
   * Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentPptx(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentPptxWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two PowerPoint PPTX Together
   * Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentPptxWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentPptxRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentPptx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentPptxRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentPptx");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentPptx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/pptx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple PowerPoint PPTX Together
   * Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentPptxMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentPptxMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple PowerPoint PPTX Together
   * Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentPptxMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentPptxMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentPptxMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentPptxMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentPptxMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentPptxMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/pptx/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Two Text (TXT) Files Together
   * Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object mergeDocumentTxt(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<Object> localVarResponse = mergeDocumentTxtWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two Text (TXT) Files Together
   * Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> mergeDocumentTxtWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentTxtRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentTxt", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentTxtRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentTxt");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentTxt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple Text (TXT) Files Together
   * Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentTxtMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentTxtMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple Text (TXT) Files Together
   * Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentTxtMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentTxtMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentTxtMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentTxtMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentTxtMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentTxtMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/txt/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Two Excel XLSX Together
   * Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentXlsx(File inputFile1, File inputFile2) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentXlsxWithHttpInfo(inputFile1, inputFile2);
    return localVarResponse.getData();
  }

  /**
   * Merge Two Excel XLSX Together
   * Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied). (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentXlsxWithHttpInfo(File inputFile1, File inputFile2) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentXlsxRequestBuilder(inputFile1, inputFile2);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentXlsx", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentXlsxRequestBuilder(File inputFile1, File inputFile2) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentXlsx");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentXlsx");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/xlsx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Merge Multple Excel XLSX Together
   * Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] mergeDocumentXlsxMulti(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    ApiResponse<byte[]> localVarResponse = mergeDocumentXlsxMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    return localVarResponse.getData();
  }

  /**
   * Merge Multple Excel XLSX Together
   * Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
   * @param inputFile1 First input file to perform the operation on. (required)
   * @param inputFile2 Second input file to perform the operation on. (required)
   * @param inputFile3 Third input file to perform the operation on. (optional)
   * @param inputFile4 Fourth input file to perform the operation on. (optional)
   * @param inputFile5 Fifth input file to perform the operation on. (optional)
   * @param inputFile6 Sixth input file to perform the operation on. (optional)
   * @param inputFile7 Seventh input file to perform the operation on. (optional)
   * @param inputFile8 Eighth input file to perform the operation on. (optional)
   * @param inputFile9 Ninth input file to perform the operation on. (optional)
   * @param inputFile10 Tenth input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> mergeDocumentXlsxMultiWithHttpInfo(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = mergeDocumentXlsxMultiRequestBuilder(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("mergeDocumentXlsxMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder mergeDocumentXlsxMultiRequestBuilder(File inputFile1, File inputFile2, File inputFile3, File inputFile4, File inputFile5, File inputFile6, File inputFile7, File inputFile8, File inputFile9, File inputFile10) throws ApiException {
    // verify the required parameter 'inputFile1' is set
    if (inputFile1 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile1' when calling mergeDocumentXlsxMulti");
    }
    // verify the required parameter 'inputFile2' is set
    if (inputFile2 == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile2' when calling mergeDocumentXlsxMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/merge/xlsx/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
