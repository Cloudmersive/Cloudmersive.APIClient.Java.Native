/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.ntv;

import com.cloudmersive.client.ntv.invoker.ApiClient;
import com.cloudmersive.client.ntv.invoker.ApiException;
import com.cloudmersive.client.ntv.invoker.ApiResponse;
import com.cloudmersive.client.ntv.invoker.Pair;

import com.cloudmersive.client.ntv.model.AppendXlsxRowRequest;
import com.cloudmersive.client.ntv.model.AppendXlsxRowResponse;
import com.cloudmersive.client.ntv.model.ClearXlsxCellRequest;
import com.cloudmersive.client.ntv.model.ClearXlsxCellResponse;
import com.cloudmersive.client.ntv.model.ClearXlsxRowRequest;
import com.cloudmersive.client.ntv.model.ClearXlsxRowResponse;
import com.cloudmersive.client.ntv.model.CreateBlankDocxRequest;
import com.cloudmersive.client.ntv.model.CreateBlankDocxResponse;
import com.cloudmersive.client.ntv.model.CreateBlankSpreadsheetRequest;
import com.cloudmersive.client.ntv.model.CreateBlankSpreadsheetResponse;
import com.cloudmersive.client.ntv.model.CreateSpreadsheetFromDataRequest;
import com.cloudmersive.client.ntv.model.CreateSpreadsheetFromDataResponse;
import com.cloudmersive.client.ntv.model.DeleteDocxTableRowRangeRequest;
import com.cloudmersive.client.ntv.model.DeleteDocxTableRowRangeResponse;
import com.cloudmersive.client.ntv.model.DeleteDocxTableRowRequest;
import com.cloudmersive.client.ntv.model.DeleteDocxTableRowResponse;
import com.cloudmersive.client.ntv.model.DisableSharedWorkbookRequest;
import com.cloudmersive.client.ntv.model.DisableSharedWorkbookResponse;
import com.cloudmersive.client.ntv.model.DocumentEditingEditSession;
import com.cloudmersive.client.ntv.model.DocxInsertCommentOnParagraphRequest;
import com.cloudmersive.client.ntv.model.DocxInsertImageRequest;
import com.cloudmersive.client.ntv.model.DocxInsertImageResponse;
import com.cloudmersive.client.ntv.model.DocxRemoveObjectRequest;
import com.cloudmersive.client.ntv.model.DocxRemoveObjectResponse;
import com.cloudmersive.client.ntv.model.DocxSetCustomMetadataPropertiesRequest;
import com.cloudmersive.client.ntv.model.DocxSetFooterAddPageNumberRequest;
import com.cloudmersive.client.ntv.model.DocxSetFooterRequest;
import com.cloudmersive.client.ntv.model.DocxSetFooterResponse;
import com.cloudmersive.client.ntv.model.DocxSetFormFieldsRequest;
import com.cloudmersive.client.ntv.model.DocxSetHeaderRequest;
import com.cloudmersive.client.ntv.model.DocxSetHeaderResponse;
import com.cloudmersive.client.ntv.model.EnableSharedWorkbookRequest;
import com.cloudmersive.client.ntv.model.EnableSharedWorkbookResponse;
import java.io.File;
import com.cloudmersive.client.ntv.model.FindDocxParagraphRequest;
import com.cloudmersive.client.ntv.model.FindDocxParagraphResponse;
import com.cloudmersive.client.ntv.model.FinishEditingRequest;
import com.cloudmersive.client.ntv.model.GetDocxBodyRequest;
import com.cloudmersive.client.ntv.model.GetDocxBodyResponse;
import com.cloudmersive.client.ntv.model.GetDocxCommentsHierarchicalResponse;
import com.cloudmersive.client.ntv.model.GetDocxCommentsResponse;
import com.cloudmersive.client.ntv.model.GetDocxContentControlsResponse;
import com.cloudmersive.client.ntv.model.GetDocxGetCommentsHierarchicalRequest;
import com.cloudmersive.client.ntv.model.GetDocxGetCommentsRequest;
import com.cloudmersive.client.ntv.model.GetDocxGetFormFieldsResponse;
import com.cloudmersive.client.ntv.model.GetDocxHeadersAndFootersRequest;
import com.cloudmersive.client.ntv.model.GetDocxHeadersAndFootersResponse;
import com.cloudmersive.client.ntv.model.GetDocxImagesRequest;
import com.cloudmersive.client.ntv.model.GetDocxImagesResponse;
import com.cloudmersive.client.ntv.model.GetDocxMetadataPropertiesResponse;
import com.cloudmersive.client.ntv.model.GetDocxPagesRequest;
import com.cloudmersive.client.ntv.model.GetDocxPagesResponse;
import com.cloudmersive.client.ntv.model.GetDocxSectionsRequest;
import com.cloudmersive.client.ntv.model.GetDocxSectionsResponse;
import com.cloudmersive.client.ntv.model.GetDocxStylesRequest;
import com.cloudmersive.client.ntv.model.GetDocxStylesResponse;
import com.cloudmersive.client.ntv.model.GetDocxTableByIndexRequest;
import com.cloudmersive.client.ntv.model.GetDocxTableByIndexResponse;
import com.cloudmersive.client.ntv.model.GetDocxTableRowRequest;
import com.cloudmersive.client.ntv.model.GetDocxTableRowResponse;
import com.cloudmersive.client.ntv.model.GetDocxTablesRequest;
import com.cloudmersive.client.ntv.model.GetDocxTablesResponse;
import com.cloudmersive.client.ntv.model.GetMacrosResponse;
import com.cloudmersive.client.ntv.model.GetXlsxCellByIdentifierRequest;
import com.cloudmersive.client.ntv.model.GetXlsxCellByIdentifierResponse;
import com.cloudmersive.client.ntv.model.GetXlsxCellRequest;
import com.cloudmersive.client.ntv.model.GetXlsxCellResponse;
import com.cloudmersive.client.ntv.model.GetXlsxColumnsRequest;
import com.cloudmersive.client.ntv.model.GetXlsxColumnsResponse;
import com.cloudmersive.client.ntv.model.GetXlsxImagesRequest;
import com.cloudmersive.client.ntv.model.GetXlsxImagesResponse;
import com.cloudmersive.client.ntv.model.GetXlsxRowsAndCellsRequest;
import com.cloudmersive.client.ntv.model.GetXlsxRowsAndCellsResponse;
import com.cloudmersive.client.ntv.model.GetXlsxSpecificRowRequest;
import com.cloudmersive.client.ntv.model.GetXlsxSpecificRowResponse;
import com.cloudmersive.client.ntv.model.GetXlsxStylesRequest;
import com.cloudmersive.client.ntv.model.GetXlsxStylesResponse;
import com.cloudmersive.client.ntv.model.GetXlsxWorksheetsRequest;
import com.cloudmersive.client.ntv.model.GetXlsxWorksheetsResponse;
import com.cloudmersive.client.ntv.model.InsertDocxCommentOnParagraphResponse;
import com.cloudmersive.client.ntv.model.InsertDocxInsertParagraphRequest;
import com.cloudmersive.client.ntv.model.InsertDocxInsertParagraphResponse;
import com.cloudmersive.client.ntv.model.InsertDocxTableRowRequest;
import com.cloudmersive.client.ntv.model.InsertDocxTableRowResponse;
import com.cloudmersive.client.ntv.model.InsertDocxTablesRequest;
import com.cloudmersive.client.ntv.model.InsertDocxTablesResponse;
import com.cloudmersive.client.ntv.model.InsertXlsxWorksheetRequest;
import com.cloudmersive.client.ntv.model.InsertXlsxWorksheetResponse;
import com.cloudmersive.client.ntv.model.MultiReplaceStringRequest;
import com.cloudmersive.client.ntv.model.RemoveDocxHeadersAndFootersRequest;
import com.cloudmersive.client.ntv.model.RemoveDocxHeadersAndFootersResponse;
import com.cloudmersive.client.ntv.model.RemoveDocxPagesRequest;
import com.cloudmersive.client.ntv.model.RemovePptxSlidesRequest;
import com.cloudmersive.client.ntv.model.RemoveXlsxWorksheetRequest;
import com.cloudmersive.client.ntv.model.RenameXlsxWorksheetRequest;
import com.cloudmersive.client.ntv.model.RenameXlsxWorksheetResponse;
import com.cloudmersive.client.ntv.model.ReplaceDocxParagraphRequest;
import com.cloudmersive.client.ntv.model.ReplaceDocxParagraphResponse;
import com.cloudmersive.client.ntv.model.ReplaceStringRequest;
import com.cloudmersive.client.ntv.model.SetXlsxCellByIdentifierRequest;
import com.cloudmersive.client.ntv.model.SetXlsxCellByIdentifierResponse;
import com.cloudmersive.client.ntv.model.SetXlsxCellRequest;
import com.cloudmersive.client.ntv.model.SetXlsxCellResponse;
import com.cloudmersive.client.ntv.model.UpdateDocxTableCellRequest;
import com.cloudmersive.client.ntv.model.UpdateDocxTableCellResponse;
import com.cloudmersive.client.ntv.model.UpdateDocxTableRowRequest;
import com.cloudmersive.client.ntv.model.UpdateDocxTableRowResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:56:36.059960-07:00[America/Los_Angeles]")
public class EditDocumentApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EditDocumentApi() {
    this(new ApiClient());
  }

  public EditDocumentApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Begin editing a document
   * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String editDocumentBeginEditing(File inputFile) throws ApiException {
    ApiResponse<String> localVarResponse = editDocumentBeginEditingWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Begin editing a document
   * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> editDocumentBeginEditingWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentBeginEditingRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentBeginEditing", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentBeginEditingRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentBeginEditing");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/begin-editing";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Accept all tracked changes, revisions in a Word DOCX document
   * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxAcceptAllTrackChanges(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxAcceptAllTrackChangesWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Accept all tracked changes, revisions in a Word DOCX document
   * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxAcceptAllTrackChangesWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxAcceptAllTrackChangesRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxAcceptAllTrackChanges", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxAcceptAllTrackChangesRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxAcceptAllTrackChanges");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/track-changes/accept-all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get body from a Word DOCX document
   * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
   * @param reqConfig Document input request (required)
   * @return GetDocxBodyResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxBodyResponse editDocumentDocxBody(GetDocxBodyRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxBodyResponse> localVarResponse = editDocumentDocxBodyWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get body from a Word DOCX document
   * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxBodyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxBodyResponse> editDocumentDocxBodyWithHttpInfo(GetDocxBodyRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxBodyRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxBody", localVarResponse);
        }
        return new ApiResponse<GetDocxBodyResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxBodyResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxBodyRequestBuilder(GetDocxBodyRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxBody");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-body";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a blank Word DOCX document
   * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
   * @param input Document input request (required)
   * @return CreateBlankDocxResponse
   * @throws ApiException if fails to make API call
   */
  public CreateBlankDocxResponse editDocumentDocxCreateBlankDocument(CreateBlankDocxRequest input) throws ApiException {
    ApiResponse<CreateBlankDocxResponse> localVarResponse = editDocumentDocxCreateBlankDocumentWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Create a blank Word DOCX document
   * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
   * @param input Document input request (required)
   * @return ApiResponse&lt;CreateBlankDocxResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CreateBlankDocxResponse> editDocumentDocxCreateBlankDocumentWithHttpInfo(CreateBlankDocxRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxCreateBlankDocumentRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxCreateBlankDocument", localVarResponse);
        }
        return new ApiResponse<CreateBlankDocxResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CreateBlankDocxResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxCreateBlankDocumentRequestBuilder(CreateBlankDocxRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentDocxCreateBlankDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/create/blank";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete, remove pages from a Word DOCX document
   * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
   * @param reqConfig Document input request (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxDeletePages(RemoveDocxPagesRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxDeletePagesWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Delete, remove pages from a Word DOCX document
   * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxDeletePagesWithHttpInfo(RemoveDocxPagesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxDeletePagesRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxDeletePages", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxDeletePagesRequestBuilder(RemoveDocxPagesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxDeletePages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/delete-pages";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes a table row in an existing table in a Word DOCX document
   * Deletes an existing table row in a Word DOCX Document and returns the result.
   * @param reqConfig Document input request (required)
   * @return DeleteDocxTableRowResponse
   * @throws ApiException if fails to make API call
   */
  public DeleteDocxTableRowResponse editDocumentDocxDeleteTableRow(DeleteDocxTableRowRequest reqConfig) throws ApiException {
    ApiResponse<DeleteDocxTableRowResponse> localVarResponse = editDocumentDocxDeleteTableRowWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Deletes a table row in an existing table in a Word DOCX document
   * Deletes an existing table row in a Word DOCX Document and returns the result.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DeleteDocxTableRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeleteDocxTableRowResponse> editDocumentDocxDeleteTableRowWithHttpInfo(DeleteDocxTableRowRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxDeleteTableRowRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxDeleteTableRow", localVarResponse);
        }
        return new ApiResponse<DeleteDocxTableRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeleteDocxTableRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxDeleteTableRowRequestBuilder(DeleteDocxTableRowRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxDeleteTableRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/delete-table-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes a range of multiple table rows in an existing table in a Word DOCX document
   * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
   * @param reqConfig Document input request (required)
   * @return DeleteDocxTableRowRangeResponse
   * @throws ApiException if fails to make API call
   */
  public DeleteDocxTableRowRangeResponse editDocumentDocxDeleteTableRowRange(DeleteDocxTableRowRangeRequest reqConfig) throws ApiException {
    ApiResponse<DeleteDocxTableRowRangeResponse> localVarResponse = editDocumentDocxDeleteTableRowRangeWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Deletes a range of multiple table rows in an existing table in a Word DOCX document
   * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DeleteDocxTableRowRangeResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeleteDocxTableRowRangeResponse> editDocumentDocxDeleteTableRowRangeWithHttpInfo(DeleteDocxTableRowRangeRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxDeleteTableRowRangeRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxDeleteTableRowRange", localVarResponse);
        }
        return new ApiResponse<DeleteDocxTableRowRangeResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeleteDocxTableRowRangeResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxDeleteTableRowRangeRequestBuilder(DeleteDocxTableRowRangeRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxDeleteTableRowRange");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/delete-table-row/range";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Disable track changes, revisions in a Word DOCX document
   * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxDisableTrackChanges(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxDisableTrackChangesWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Disable track changes, revisions in a Word DOCX document
   * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxDisableTrackChangesWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxDisableTrackChangesRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxDisableTrackChanges", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxDisableTrackChangesRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxDisableTrackChanges");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/track-changes/disable";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Enable track changes, revisions in a Word DOCX document
   * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxEnableTrackChanges(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxEnableTrackChangesWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Enable track changes, revisions in a Word DOCX document
   * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxEnableTrackChangesWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxEnableTrackChangesRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxEnableTrackChanges", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxEnableTrackChangesRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxEnableTrackChanges");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/track-changes/enable";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Find matching paragraphs in a Word DOCX document
   * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
   * @param reqConfig Document input request (required)
   * @return FindDocxParagraphResponse
   * @throws ApiException if fails to make API call
   */
  public FindDocxParagraphResponse editDocumentDocxFindParagraph(FindDocxParagraphRequest reqConfig) throws ApiException {
    ApiResponse<FindDocxParagraphResponse> localVarResponse = editDocumentDocxFindParagraphWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Find matching paragraphs in a Word DOCX document
   * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;FindDocxParagraphResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindDocxParagraphResponse> editDocumentDocxFindParagraphWithHttpInfo(FindDocxParagraphRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxFindParagraphRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxFindParagraph", localVarResponse);
        }
        return new ApiResponse<FindDocxParagraphResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindDocxParagraphResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxFindParagraphRequestBuilder(FindDocxParagraphRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxFindParagraph");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/find/paragraph";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get comments from a Word DOCX document as a flat list
   * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
   * @param reqConfig Document input request (required)
   * @return GetDocxCommentsResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxCommentsResponse editDocumentDocxGetComments(GetDocxGetCommentsRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxCommentsResponse> localVarResponse = editDocumentDocxGetCommentsWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get comments from a Word DOCX document as a flat list
   * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxCommentsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxCommentsResponse> editDocumentDocxGetCommentsWithHttpInfo(GetDocxGetCommentsRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetCommentsRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetComments", localVarResponse);
        }
        return new ApiResponse<GetDocxCommentsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxCommentsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetCommentsRequestBuilder(GetDocxGetCommentsRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetComments");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-comments/flat-list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get comments from a Word DOCX document hierarchically
   * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
   * @param reqConfig Document input request (required)
   * @return GetDocxCommentsHierarchicalResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxCommentsHierarchicalResponse editDocumentDocxGetCommentsHierarchical(GetDocxGetCommentsHierarchicalRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxCommentsHierarchicalResponse> localVarResponse = editDocumentDocxGetCommentsHierarchicalWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get comments from a Word DOCX document hierarchically
   * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxCommentsHierarchicalResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxCommentsHierarchicalResponse> editDocumentDocxGetCommentsHierarchicalWithHttpInfo(GetDocxGetCommentsHierarchicalRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetCommentsHierarchicalRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetCommentsHierarchical", localVarResponse);
        }
        return new ApiResponse<GetDocxCommentsHierarchicalResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxCommentsHierarchicalResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetCommentsHierarchicalRequestBuilder(GetDocxGetCommentsHierarchicalRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetCommentsHierarchical");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-comments/hierarchical";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all content controls (form fields) and values in a Word DOCX document
   * Returns all the content controls, used for creating form fields, in a Office Word Document (docx)
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetDocxContentControlsResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxContentControlsResponse editDocumentDocxGetContentControls(File inputFile) throws ApiException {
    ApiResponse<GetDocxContentControlsResponse> localVarResponse = editDocumentDocxGetContentControlsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get all content controls (form fields) and values in a Word DOCX document
   * Returns all the content controls, used for creating form fields, in a Office Word Document (docx)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetDocxContentControlsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxContentControlsResponse> editDocumentDocxGetContentControlsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetContentControlsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetContentControls", localVarResponse);
        }
        return new ApiResponse<GetDocxContentControlsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxContentControlsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetContentControlsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxGetContentControls");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-content-controls";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all form fields in a Word DOCX document
   * Returns all the content controls, used for creating form fields, as well as handlebar style text-based form fields such as \&quot;{{FieldName}}\&quot;, in a Office Word Document (docx)
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetDocxGetFormFieldsResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxGetFormFieldsResponse editDocumentDocxGetFormFields(File inputFile) throws ApiException {
    ApiResponse<GetDocxGetFormFieldsResponse> localVarResponse = editDocumentDocxGetFormFieldsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get all form fields in a Word DOCX document
   * Returns all the content controls, used for creating form fields, as well as handlebar style text-based form fields such as \&quot;{{FieldName}}\&quot;, in a Office Word Document (docx)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetDocxGetFormFieldsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxGetFormFieldsResponse> editDocumentDocxGetFormFieldsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetFormFieldsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetFormFields", localVarResponse);
        }
        return new ApiResponse<GetDocxGetFormFieldsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxGetFormFieldsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetFormFieldsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxGetFormFields");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-form-fields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get content of a footer from a Word DOCX document
   * Returns the footer content from a Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return GetDocxHeadersAndFootersResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxHeadersAndFootersResponse editDocumentDocxGetHeadersAndFooters(GetDocxHeadersAndFootersRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxHeadersAndFootersResponse> localVarResponse = editDocumentDocxGetHeadersAndFootersWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get content of a footer from a Word DOCX document
   * Returns the footer content from a Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxHeadersAndFootersResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxHeadersAndFootersResponse> editDocumentDocxGetHeadersAndFootersWithHttpInfo(GetDocxHeadersAndFootersRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetHeadersAndFootersRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetHeadersAndFooters", localVarResponse);
        }
        return new ApiResponse<GetDocxHeadersAndFootersResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxHeadersAndFootersResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetHeadersAndFootersRequestBuilder(GetDocxHeadersAndFootersRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetHeadersAndFooters");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-headers-and-footers";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get images from a Word DOCX document
   * Returns the images defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return GetDocxImagesResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxImagesResponse editDocumentDocxGetImages(GetDocxImagesRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxImagesResponse> localVarResponse = editDocumentDocxGetImagesWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get images from a Word DOCX document
   * Returns the images defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxImagesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxImagesResponse> editDocumentDocxGetImagesWithHttpInfo(GetDocxImagesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetImagesRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetImages", localVarResponse);
        }
        return new ApiResponse<GetDocxImagesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxImagesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetImagesRequestBuilder(GetDocxImagesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetImages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-images";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get macro information from a Word DOCX/DOCM document
   * Returns information about the Macros (e.g. VBA) defined in the Word Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetMacrosResponse
   * @throws ApiException if fails to make API call
   */
  public GetMacrosResponse editDocumentDocxGetMacroInformation(File inputFile) throws ApiException {
    ApiResponse<GetMacrosResponse> localVarResponse = editDocumentDocxGetMacroInformationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get macro information from a Word DOCX/DOCM document
   * Returns information about the Macros (e.g. VBA) defined in the Word Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetMacrosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetMacrosResponse> editDocumentDocxGetMacroInformationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetMacroInformationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetMacroInformation", localVarResponse);
        }
        return new ApiResponse<GetMacrosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetMacrosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetMacroInformationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxGetMacroInformation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-macros";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all metadata properties in Word DOCX document
   * Returns all the metadata properties in an Office Word Document (docx)
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetDocxMetadataPropertiesResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxMetadataPropertiesResponse editDocumentDocxGetMetadataProperties(File inputFile) throws ApiException {
    ApiResponse<GetDocxMetadataPropertiesResponse> localVarResponse = editDocumentDocxGetMetadataPropertiesWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get all metadata properties in Word DOCX document
   * Returns all the metadata properties in an Office Word Document (docx)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetDocxMetadataPropertiesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxMetadataPropertiesResponse> editDocumentDocxGetMetadataPropertiesWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetMetadataPropertiesRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetMetadataProperties", localVarResponse);
        }
        return new ApiResponse<GetDocxMetadataPropertiesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxMetadataPropertiesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetMetadataPropertiesRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxGetMetadataProperties");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-metadata";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get sections from a Word DOCX document
   * Returns the sections defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return GetDocxSectionsResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxSectionsResponse editDocumentDocxGetSections(GetDocxSectionsRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxSectionsResponse> localVarResponse = editDocumentDocxGetSectionsWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get sections from a Word DOCX document
   * Returns the sections defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxSectionsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxSectionsResponse> editDocumentDocxGetSectionsWithHttpInfo(GetDocxSectionsRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetSectionsRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetSections", localVarResponse);
        }
        return new ApiResponse<GetDocxSectionsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxSectionsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetSectionsRequestBuilder(GetDocxSectionsRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetSections");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-sections";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get styles from a Word DOCX document
   * Returns the styles defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return GetDocxStylesResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxStylesResponse editDocumentDocxGetStyles(GetDocxStylesRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxStylesResponse> localVarResponse = editDocumentDocxGetStylesWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get styles from a Word DOCX document
   * Returns the styles defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxStylesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxStylesResponse> editDocumentDocxGetStylesWithHttpInfo(GetDocxStylesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetStylesRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetStyles", localVarResponse);
        }
        return new ApiResponse<GetDocxStylesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxStylesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetStylesRequestBuilder(GetDocxStylesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetStyles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-styles";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a specific table by index in a Word DOCX document
   * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
   * @param reqConfig Document input request (required)
   * @return GetDocxTableByIndexResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxTableByIndexResponse editDocumentDocxGetTableByIndex(GetDocxTableByIndexRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxTableByIndexResponse> localVarResponse = editDocumentDocxGetTableByIndexWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get a specific table by index in a Word DOCX document
   * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxTableByIndexResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxTableByIndexResponse> editDocumentDocxGetTableByIndexWithHttpInfo(GetDocxTableByIndexRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetTableByIndexRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetTableByIndex", localVarResponse);
        }
        return new ApiResponse<GetDocxTableByIndexResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxTableByIndexResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetTableByIndexRequestBuilder(GetDocxTableByIndexRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTableByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-table/by-index";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the contents of an existing table row in an existing table in a Word DOCX document
   * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
   * @param reqConfig Document input request (required)
   * @return GetDocxTableRowResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxTableRowResponse editDocumentDocxGetTableRow(GetDocxTableRowRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxTableRowResponse> localVarResponse = editDocumentDocxGetTableRowWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Gets the contents of an existing table row in an existing table in a Word DOCX document
   * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxTableRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxTableRowResponse> editDocumentDocxGetTableRowWithHttpInfo(GetDocxTableRowRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetTableRowRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetTableRow", localVarResponse);
        }
        return new ApiResponse<GetDocxTableRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxTableRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetTableRowRequestBuilder(GetDocxTableRowRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTableRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-table-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all tables in Word DOCX document
   * Returns all the table objects in an Office Word Document (docx)
   * @param reqConfig Document input request (required)
   * @return GetDocxTablesResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxTablesResponse editDocumentDocxGetTables(GetDocxTablesRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxTablesResponse> localVarResponse = editDocumentDocxGetTablesWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get all tables in Word DOCX document
   * Returns all the table objects in an Office Word Document (docx)
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxTablesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxTablesResponse> editDocumentDocxGetTablesWithHttpInfo(GetDocxTablesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxGetTablesRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxGetTables", localVarResponse);
        }
        return new ApiResponse<GetDocxTablesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxTablesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxGetTablesRequestBuilder(GetDocxTablesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTables");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-tables";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert a new comment into a Word DOCX document attached to a paragraph
   * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return InsertDocxCommentOnParagraphResponse
   * @throws ApiException if fails to make API call
   */
  public InsertDocxCommentOnParagraphResponse editDocumentDocxInsertCommentOnParagraph(DocxInsertCommentOnParagraphRequest reqConfig) throws ApiException {
    ApiResponse<InsertDocxCommentOnParagraphResponse> localVarResponse = editDocumentDocxInsertCommentOnParagraphWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Insert a new comment into a Word DOCX document attached to a paragraph
   * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;InsertDocxCommentOnParagraphResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InsertDocxCommentOnParagraphResponse> editDocumentDocxInsertCommentOnParagraphWithHttpInfo(DocxInsertCommentOnParagraphRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxInsertCommentOnParagraphRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxInsertCommentOnParagraph", localVarResponse);
        }
        return new ApiResponse<InsertDocxCommentOnParagraphResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InsertDocxCommentOnParagraphResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxInsertCommentOnParagraphRequestBuilder(DocxInsertCommentOnParagraphRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertCommentOnParagraph");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/insert-comment/on/paragraph";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert image into a Word DOCX document
   * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return DocxInsertImageResponse
   * @throws ApiException if fails to make API call
   */
  public DocxInsertImageResponse editDocumentDocxInsertImage(DocxInsertImageRequest reqConfig) throws ApiException {
    ApiResponse<DocxInsertImageResponse> localVarResponse = editDocumentDocxInsertImageWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Insert image into a Word DOCX document
   * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DocxInsertImageResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxInsertImageResponse> editDocumentDocxInsertImageWithHttpInfo(DocxInsertImageRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxInsertImageRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxInsertImage", localVarResponse);
        }
        return new ApiResponse<DocxInsertImageResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxInsertImageResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxInsertImageRequestBuilder(DocxInsertImageRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/insert-image";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert a new paragraph into a Word DOCX document
   * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return InsertDocxInsertParagraphResponse
   * @throws ApiException if fails to make API call
   */
  public InsertDocxInsertParagraphResponse editDocumentDocxInsertParagraph(InsertDocxInsertParagraphRequest reqConfig) throws ApiException {
    ApiResponse<InsertDocxInsertParagraphResponse> localVarResponse = editDocumentDocxInsertParagraphWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Insert a new paragraph into a Word DOCX document
   * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;InsertDocxInsertParagraphResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InsertDocxInsertParagraphResponse> editDocumentDocxInsertParagraphWithHttpInfo(InsertDocxInsertParagraphRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxInsertParagraphRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxInsertParagraph", localVarResponse);
        }
        return new ApiResponse<InsertDocxInsertParagraphResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InsertDocxInsertParagraphResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxInsertParagraphRequestBuilder(InsertDocxInsertParagraphRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertParagraph");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/insert-paragraph";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert a new table into a Word DOCX document
   * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return InsertDocxTablesResponse
   * @throws ApiException if fails to make API call
   */
  public InsertDocxTablesResponse editDocumentDocxInsertTable(InsertDocxTablesRequest reqConfig) throws ApiException {
    ApiResponse<InsertDocxTablesResponse> localVarResponse = editDocumentDocxInsertTableWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Insert a new table into a Word DOCX document
   * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;InsertDocxTablesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InsertDocxTablesResponse> editDocumentDocxInsertTableWithHttpInfo(InsertDocxTablesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxInsertTableRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxInsertTable", localVarResponse);
        }
        return new ApiResponse<InsertDocxTablesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InsertDocxTablesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxInsertTableRequestBuilder(InsertDocxTablesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertTable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/insert-table";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert a new row into an existing table in a Word DOCX document
   * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return InsertDocxTableRowResponse
   * @throws ApiException if fails to make API call
   */
  public InsertDocxTableRowResponse editDocumentDocxInsertTableRow(InsertDocxTableRowRequest reqConfig) throws ApiException {
    ApiResponse<InsertDocxTableRowResponse> localVarResponse = editDocumentDocxInsertTableRowWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Insert a new row into an existing table in a Word DOCX document
   * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;InsertDocxTableRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InsertDocxTableRowResponse> editDocumentDocxInsertTableRowWithHttpInfo(InsertDocxTableRowRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxInsertTableRowRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxInsertTableRow", localVarResponse);
        }
        return new ApiResponse<InsertDocxTableRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InsertDocxTableRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxInsertTableRowRequestBuilder(InsertDocxTableRowRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertTableRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/insert-table-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get pages and content from a Word DOCX document
   * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return GetDocxPagesResponse
   * @throws ApiException if fails to make API call
   */
  public GetDocxPagesResponse editDocumentDocxPages(GetDocxPagesRequest reqConfig) throws ApiException {
    ApiResponse<GetDocxPagesResponse> localVarResponse = editDocumentDocxPagesWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Get pages and content from a Word DOCX document
   * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;GetDocxPagesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDocxPagesResponse> editDocumentDocxPagesWithHttpInfo(GetDocxPagesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxPagesRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxPages", localVarResponse);
        }
        return new ApiResponse<GetDocxPagesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDocxPagesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxPagesRequestBuilder(GetDocxPagesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxPages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/get-pages";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove all comments from a Word DOCX document
   * Removes all of the comments from a Word Document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxRemoveAllComments(File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxRemoveAllCommentsWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Remove all comments from a Word DOCX document
   * Removes all of the comments from a Word Document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxRemoveAllCommentsWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxRemoveAllCommentsRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxRemoveAllComments", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxRemoveAllCommentsRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentDocxRemoveAllComments");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/comments/remove-all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove headers and footers from Word DOCX document
   * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return RemoveDocxHeadersAndFootersResponse
   * @throws ApiException if fails to make API call
   */
  public RemoveDocxHeadersAndFootersResponse editDocumentDocxRemoveHeadersAndFooters(RemoveDocxHeadersAndFootersRequest reqConfig) throws ApiException {
    ApiResponse<RemoveDocxHeadersAndFootersResponse> localVarResponse = editDocumentDocxRemoveHeadersAndFootersWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Remove headers and footers from Word DOCX document
   * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;RemoveDocxHeadersAndFootersResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RemoveDocxHeadersAndFootersResponse> editDocumentDocxRemoveHeadersAndFootersWithHttpInfo(RemoveDocxHeadersAndFootersRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxRemoveHeadersAndFootersRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxRemoveHeadersAndFooters", localVarResponse);
        }
        return new ApiResponse<RemoveDocxHeadersAndFootersResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RemoveDocxHeadersAndFootersResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxRemoveHeadersAndFootersRequestBuilder(RemoveDocxHeadersAndFootersRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxRemoveHeadersAndFooters");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/remove-headers-and-footers";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete any object in a Word DOCX document
   * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return DocxRemoveObjectResponse
   * @throws ApiException if fails to make API call
   */
  public DocxRemoveObjectResponse editDocumentDocxRemoveObject(DocxRemoveObjectRequest reqConfig) throws ApiException {
    ApiResponse<DocxRemoveObjectResponse> localVarResponse = editDocumentDocxRemoveObjectWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Delete any object in a Word DOCX document
   * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DocxRemoveObjectResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxRemoveObjectResponse> editDocumentDocxRemoveObjectWithHttpInfo(DocxRemoveObjectRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxRemoveObjectRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxRemoveObject", localVarResponse);
        }
        return new ApiResponse<DocxRemoveObjectResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxRemoveObjectResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxRemoveObjectRequestBuilder(DocxRemoveObjectRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxRemoveObject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/remove-object";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace string in Word DOCX document
   * Replace all instances of a string in an Office Word Document (docx)
   * @param reqConfig Document string replacement configuration input (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxReplace(ReplaceStringRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxReplaceWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Replace string in Word DOCX document
   * Replace all instances of a string in an Office Word Document (docx)
   * @param reqConfig Document string replacement configuration input (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxReplaceWithHttpInfo(ReplaceStringRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxReplaceRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxReplace", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxReplaceRequestBuilder(ReplaceStringRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxReplace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/replace-all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace multiple strings in Word DOCX document, return result
   * Replace all instances of multiple strings in an Office Word Document (docx)
   * @param reqConfig Document string replacement configuration input (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxReplaceMulti(MultiReplaceStringRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxReplaceMultiWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Replace multiple strings in Word DOCX document, return result
   * Replace all instances of multiple strings in an Office Word Document (docx)
   * @param reqConfig Document string replacement configuration input (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxReplaceMultiWithHttpInfo(MultiReplaceStringRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxReplaceMultiRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxReplaceMulti", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxReplaceMultiRequestBuilder(MultiReplaceStringRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceMulti");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/replace-all/multi";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace multiple strings in Word DOCX document, return edit session
   * Replace all instances of multiple strings in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
   * @param reqConfig Document string replacement configuration input (required)
   * @return DocumentEditingEditSession
   * @throws ApiException if fails to make API call
   */
  public DocumentEditingEditSession editDocumentDocxReplaceMultiEditSession(MultiReplaceStringRequest reqConfig) throws ApiException {
    ApiResponse<DocumentEditingEditSession> localVarResponse = editDocumentDocxReplaceMultiEditSessionWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Replace multiple strings in Word DOCX document, return edit session
   * Replace all instances of multiple strings in an Office Word Document (docx).  Returns an edit session URL so that you can chain together multiple edit operations without having to send the entire document contents back and forth multiple times.  Call the Finish Editing API to retrieve the final document once editing is complete.
   * @param reqConfig Document string replacement configuration input (required)
   * @return ApiResponse&lt;DocumentEditingEditSession&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentEditingEditSession> editDocumentDocxReplaceMultiEditSessionWithHttpInfo(MultiReplaceStringRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxReplaceMultiEditSessionRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxReplaceMultiEditSession", localVarResponse);
        }
        return new ApiResponse<DocumentEditingEditSession>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentEditingEditSession>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxReplaceMultiEditSessionRequestBuilder(MultiReplaceStringRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceMultiEditSession");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/replace-all/multi/edit-session";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace matching paragraphs in a Word DOCX document
   * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
   * @param reqConfig Document input request (required)
   * @return ReplaceDocxParagraphResponse
   * @throws ApiException if fails to make API call
   */
  public ReplaceDocxParagraphResponse editDocumentDocxReplaceParagraph(ReplaceDocxParagraphRequest reqConfig) throws ApiException {
    ApiResponse<ReplaceDocxParagraphResponse> localVarResponse = editDocumentDocxReplaceParagraphWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Replace matching paragraphs in a Word DOCX document
   * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;ReplaceDocxParagraphResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReplaceDocxParagraphResponse> editDocumentDocxReplaceParagraphWithHttpInfo(ReplaceDocxParagraphRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxReplaceParagraphRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxReplaceParagraph", localVarResponse);
        }
        return new ApiResponse<ReplaceDocxParagraphResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReplaceDocxParagraphResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxReplaceParagraphRequestBuilder(ReplaceDocxParagraphRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceParagraph");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/replace/paragraph";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set custom property metadata properties in Word DOCX document
   * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
   * @param input  (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxSetCustomMetadataProperties(DocxSetCustomMetadataPropertiesRequest input) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxSetCustomMetadataPropertiesWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Set custom property metadata properties in Word DOCX document
   * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
   * @param input  (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxSetCustomMetadataPropertiesWithHttpInfo(DocxSetCustomMetadataPropertiesRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxSetCustomMetadataPropertiesRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxSetCustomMetadataProperties", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxSetCustomMetadataPropertiesRequestBuilder(DocxSetCustomMetadataPropertiesRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentDocxSetCustomMetadataProperties");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/set-metadata/custom-property";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set the footer in a Word DOCX document
   * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return DocxSetFooterResponse
   * @throws ApiException if fails to make API call
   */
  public DocxSetFooterResponse editDocumentDocxSetFooter(DocxSetFooterRequest reqConfig) throws ApiException {
    ApiResponse<DocxSetFooterResponse> localVarResponse = editDocumentDocxSetFooterWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Set the footer in a Word DOCX document
   * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DocxSetFooterResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxSetFooterResponse> editDocumentDocxSetFooterWithHttpInfo(DocxSetFooterRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxSetFooterRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxSetFooter", localVarResponse);
        }
        return new ApiResponse<DocxSetFooterResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxSetFooterResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxSetFooterRequestBuilder(DocxSetFooterRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFooter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/set-footer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add page number to footer in a Word DOCX document
   * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return DocxSetFooterResponse
   * @throws ApiException if fails to make API call
   */
  public DocxSetFooterResponse editDocumentDocxSetFooterAddPageNumber(DocxSetFooterAddPageNumberRequest reqConfig) throws ApiException {
    ApiResponse<DocxSetFooterResponse> localVarResponse = editDocumentDocxSetFooterAddPageNumberWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Add page number to footer in a Word DOCX document
   * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DocxSetFooterResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxSetFooterResponse> editDocumentDocxSetFooterAddPageNumberWithHttpInfo(DocxSetFooterAddPageNumberRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxSetFooterAddPageNumberRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxSetFooterAddPageNumber", localVarResponse);
        }
        return new ApiResponse<DocxSetFooterResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxSetFooterResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxSetFooterAddPageNumberRequestBuilder(DocxSetFooterAddPageNumberRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFooterAddPageNumber");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/set-footer/add-page-number";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set and fill values for form fields in a Word DOCX document
   * Modifies a Office Word Document (docx) by filling in form fields using the provided values.
   * @param reqConfig  (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentDocxSetFormFields(DocxSetFormFieldsRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentDocxSetFormFieldsWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Set and fill values for form fields in a Word DOCX document
   * Modifies a Office Word Document (docx) by filling in form fields using the provided values.
   * @param reqConfig  (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentDocxSetFormFieldsWithHttpInfo(DocxSetFormFieldsRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxSetFormFieldsRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxSetFormFields", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxSetFormFieldsRequestBuilder(DocxSetFormFieldsRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFormFields");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/set-form-fields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set the header in a Word DOCX document
   * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return DocxSetHeaderResponse
   * @throws ApiException if fails to make API call
   */
  public DocxSetHeaderResponse editDocumentDocxSetHeader(DocxSetHeaderRequest reqConfig) throws ApiException {
    ApiResponse<DocxSetHeaderResponse> localVarResponse = editDocumentDocxSetHeaderWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Set the header in a Word DOCX document
   * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;DocxSetHeaderResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocxSetHeaderResponse> editDocumentDocxSetHeaderWithHttpInfo(DocxSetHeaderRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxSetHeaderRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxSetHeader", localVarResponse);
        }
        return new ApiResponse<DocxSetHeaderResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocxSetHeaderResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxSetHeaderRequestBuilder(DocxSetHeaderRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxSetHeader");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/set-header";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update, set contents of a table cell in an existing table in a Word DOCX document
   * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return UpdateDocxTableCellResponse
   * @throws ApiException if fails to make API call
   */
  public UpdateDocxTableCellResponse editDocumentDocxUpdateTableCell(UpdateDocxTableCellRequest reqConfig) throws ApiException {
    ApiResponse<UpdateDocxTableCellResponse> localVarResponse = editDocumentDocxUpdateTableCellWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Update, set contents of a table cell in an existing table in a Word DOCX document
   * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;UpdateDocxTableCellResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateDocxTableCellResponse> editDocumentDocxUpdateTableCellWithHttpInfo(UpdateDocxTableCellRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxUpdateTableCellRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxUpdateTableCell", localVarResponse);
        }
        return new ApiResponse<UpdateDocxTableCellResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateDocxTableCellResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxUpdateTableCellRequestBuilder(UpdateDocxTableCellRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxUpdateTableCell");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/update-table-cell";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update, set contents of a table row in an existing table in a Word DOCX document
   * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return UpdateDocxTableRowResponse
   * @throws ApiException if fails to make API call
   */
  public UpdateDocxTableRowResponse editDocumentDocxUpdateTableRow(UpdateDocxTableRowRequest reqConfig) throws ApiException {
    ApiResponse<UpdateDocxTableRowResponse> localVarResponse = editDocumentDocxUpdateTableRowWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Update, set contents of a table row in an existing table in a Word DOCX document
   * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
   * @param reqConfig Document input request (required)
   * @return ApiResponse&lt;UpdateDocxTableRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateDocxTableRowResponse> editDocumentDocxUpdateTableRowWithHttpInfo(UpdateDocxTableRowRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentDocxUpdateTableRowRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentDocxUpdateTableRow", localVarResponse);
        }
        return new ApiResponse<UpdateDocxTableRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateDocxTableRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentDocxUpdateTableRowRequestBuilder(UpdateDocxTableRowRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentDocxUpdateTableRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/docx/update-table-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Finish editing document, and download result from document editing
   * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
   * @param reqConfig Cloudmersive Document URL to complete editing on (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentFinishEditing(FinishEditingRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentFinishEditingWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Finish editing document, and download result from document editing
   * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
   * @param reqConfig Cloudmersive Document URL to complete editing on (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentFinishEditingWithHttpInfo(FinishEditingRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentFinishEditingRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentFinishEditing", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentFinishEditingRequestBuilder(FinishEditingRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentFinishEditing");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/finish-editing";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete, remove slides from a PowerPoint PPTX presentation document
   * Edits the input PowerPoint PPTX presentation document to remove the specified slides
   * @param reqConfig Presentation input request (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentPptxDeleteSlides(RemovePptxSlidesRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentPptxDeleteSlidesWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Delete, remove slides from a PowerPoint PPTX presentation document
   * Edits the input PowerPoint PPTX presentation document to remove the specified slides
   * @param reqConfig Presentation input request (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentPptxDeleteSlidesWithHttpInfo(RemovePptxSlidesRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentPptxDeleteSlidesRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentPptxDeleteSlides", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentPptxDeleteSlidesRequestBuilder(RemovePptxSlidesRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentPptxDeleteSlides");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pptx/delete-slides";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get macro information from a PowerPoint PPTX/PPTM presentation document
   * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetMacrosResponse
   * @throws ApiException if fails to make API call
   */
  public GetMacrosResponse editDocumentPptxGetMacroInformation(File inputFile) throws ApiException {
    ApiResponse<GetMacrosResponse> localVarResponse = editDocumentPptxGetMacroInformationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get macro information from a PowerPoint PPTX/PPTM presentation document
   * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetMacrosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetMacrosResponse> editDocumentPptxGetMacroInformationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentPptxGetMacroInformationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentPptxGetMacroInformation", localVarResponse);
        }
        return new ApiResponse<GetMacrosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetMacrosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentPptxGetMacroInformationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentPptxGetMacroInformation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pptx/get-macros";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace string in PowerPoint PPTX presentation
   * Replace all instances of a string in an Office PowerPoint Document (pptx)
   * @param reqConfig Replacement document configuration input (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentPptxReplace(ReplaceStringRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentPptxReplaceWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Replace string in PowerPoint PPTX presentation
   * Replace all instances of a string in an Office PowerPoint Document (pptx)
   * @param reqConfig Replacement document configuration input (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentPptxReplaceWithHttpInfo(ReplaceStringRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentPptxReplaceRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentPptxReplace", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentPptxReplaceRequestBuilder(ReplaceStringRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentPptxReplace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/pptx/replace-all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Append row to a Excel XLSX spreadsheet, worksheet
   * Appends a row to the end of an Excel Spreadsheet worksheet.
   * @param input Document input request (required)
   * @return AppendXlsxRowResponse
   * @throws ApiException if fails to make API call
   */
  public AppendXlsxRowResponse editDocumentXlsxAppendRow(AppendXlsxRowRequest input) throws ApiException {
    ApiResponse<AppendXlsxRowResponse> localVarResponse = editDocumentXlsxAppendRowWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Append row to a Excel XLSX spreadsheet, worksheet
   * Appends a row to the end of an Excel Spreadsheet worksheet.
   * @param input Document input request (required)
   * @return ApiResponse&lt;AppendXlsxRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AppendXlsxRowResponse> editDocumentXlsxAppendRowWithHttpInfo(AppendXlsxRowRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxAppendRowRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxAppendRow", localVarResponse);
        }
        return new ApiResponse<AppendXlsxRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AppendXlsxRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxAppendRowRequestBuilder(AppendXlsxRowRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxAppendRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/append-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
   * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
   * @param input Document input request (required)
   * @return ClearXlsxCellResponse
   * @throws ApiException if fails to make API call
   */
  public ClearXlsxCellResponse editDocumentXlsxClearCellByIndex(ClearXlsxCellRequest input) throws ApiException {
    ApiResponse<ClearXlsxCellResponse> localVarResponse = editDocumentXlsxClearCellByIndexWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
   * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;ClearXlsxCellResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClearXlsxCellResponse> editDocumentXlsxClearCellByIndexWithHttpInfo(ClearXlsxCellRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxClearCellByIndexRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxClearCellByIndex", localVarResponse);
        }
        return new ApiResponse<ClearXlsxCellResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClearXlsxCellResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxClearCellByIndexRequestBuilder(ClearXlsxCellRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxClearCellByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/clear-cell/by-index";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Clear row from a Excel XLSX spreadsheet, worksheet
   * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
   * @param input Document input request (required)
   * @return ClearXlsxRowResponse
   * @throws ApiException if fails to make API call
   */
  public ClearXlsxRowResponse editDocumentXlsxClearRow(ClearXlsxRowRequest input) throws ApiException {
    ApiResponse<ClearXlsxRowResponse> localVarResponse = editDocumentXlsxClearRowWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Clear row from a Excel XLSX spreadsheet, worksheet
   * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
   * @param input Document input request (required)
   * @return ApiResponse&lt;ClearXlsxRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClearXlsxRowResponse> editDocumentXlsxClearRowWithHttpInfo(ClearXlsxRowRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxClearRowRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxClearRow", localVarResponse);
        }
        return new ApiResponse<ClearXlsxRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClearXlsxRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxClearRowRequestBuilder(ClearXlsxRowRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxClearRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/clear-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a blank Excel XLSX spreadsheet
   * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
   * @param input Document input request (required)
   * @return CreateBlankSpreadsheetResponse
   * @throws ApiException if fails to make API call
   */
  public CreateBlankSpreadsheetResponse editDocumentXlsxCreateBlankSpreadsheet(CreateBlankSpreadsheetRequest input) throws ApiException {
    ApiResponse<CreateBlankSpreadsheetResponse> localVarResponse = editDocumentXlsxCreateBlankSpreadsheetWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Create a blank Excel XLSX spreadsheet
   * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
   * @param input Document input request (required)
   * @return ApiResponse&lt;CreateBlankSpreadsheetResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CreateBlankSpreadsheetResponse> editDocumentXlsxCreateBlankSpreadsheetWithHttpInfo(CreateBlankSpreadsheetRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxCreateBlankSpreadsheetRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxCreateBlankSpreadsheet", localVarResponse);
        }
        return new ApiResponse<CreateBlankSpreadsheetResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CreateBlankSpreadsheetResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxCreateBlankSpreadsheetRequestBuilder(CreateBlankSpreadsheetRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxCreateBlankSpreadsheet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/create/blank";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new Excel XLSX spreadsheet from column and row data
   * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
   * @param input Document input request (required)
   * @return CreateSpreadsheetFromDataResponse
   * @throws ApiException if fails to make API call
   */
  public CreateSpreadsheetFromDataResponse editDocumentXlsxCreateSpreadsheetFromData(CreateSpreadsheetFromDataRequest input) throws ApiException {
    ApiResponse<CreateSpreadsheetFromDataResponse> localVarResponse = editDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Create a new Excel XLSX spreadsheet from column and row data
   * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
   * @param input Document input request (required)
   * @return ApiResponse&lt;CreateSpreadsheetFromDataResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CreateSpreadsheetFromDataResponse> editDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo(CreateSpreadsheetFromDataRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxCreateSpreadsheetFromDataRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxCreateSpreadsheetFromData", localVarResponse);
        }
        return new ApiResponse<CreateSpreadsheetFromDataResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CreateSpreadsheetFromDataResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxCreateSpreadsheetFromDataRequestBuilder(CreateSpreadsheetFromDataRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxCreateSpreadsheetFromData");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/create/from/data";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete, remove worksheet from an Excel XLSX spreadsheet document
   * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
   * @param reqConfig Spreadsheet input request (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDocumentXlsxDeleteWorksheet(RemoveXlsxWorksheetRequest reqConfig) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDocumentXlsxDeleteWorksheetWithHttpInfo(reqConfig);
    return localVarResponse.getData();
  }

  /**
   * Delete, remove worksheet from an Excel XLSX spreadsheet document
   * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
   * @param reqConfig Spreadsheet input request (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDocumentXlsxDeleteWorksheetWithHttpInfo(RemoveXlsxWorksheetRequest reqConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxDeleteWorksheetRequestBuilder(reqConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxDeleteWorksheet", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxDeleteWorksheetRequestBuilder(RemoveXlsxWorksheetRequest reqConfig) throws ApiException {
    // verify the required parameter 'reqConfig' is set
    if (reqConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'reqConfig' when calling editDocumentXlsxDeleteWorksheet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/delete-worksheet";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reqConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
   * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
   * @param input Document input request (required)
   * @return DisableSharedWorkbookResponse
   * @throws ApiException if fails to make API call
   */
  public DisableSharedWorkbookResponse editDocumentXlsxDisableSharedWorkbook(DisableSharedWorkbookRequest input) throws ApiException {
    ApiResponse<DisableSharedWorkbookResponse> localVarResponse = editDocumentXlsxDisableSharedWorkbookWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
   * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;DisableSharedWorkbookResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DisableSharedWorkbookResponse> editDocumentXlsxDisableSharedWorkbookWithHttpInfo(DisableSharedWorkbookRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxDisableSharedWorkbookRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxDisableSharedWorkbook", localVarResponse);
        }
        return new ApiResponse<DisableSharedWorkbookResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DisableSharedWorkbookResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxDisableSharedWorkbookRequestBuilder(DisableSharedWorkbookRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxDisableSharedWorkbook");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/configuration/disable-shared-workbook";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
   * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
   * @param input Document input request (required)
   * @return EnableSharedWorkbookResponse
   * @throws ApiException if fails to make API call
   */
  public EnableSharedWorkbookResponse editDocumentXlsxEnableSharedWorkbook(EnableSharedWorkbookRequest input) throws ApiException {
    ApiResponse<EnableSharedWorkbookResponse> localVarResponse = editDocumentXlsxEnableSharedWorkbookWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
   * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;EnableSharedWorkbookResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EnableSharedWorkbookResponse> editDocumentXlsxEnableSharedWorkbookWithHttpInfo(EnableSharedWorkbookRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxEnableSharedWorkbookRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxEnableSharedWorkbook", localVarResponse);
        }
        return new ApiResponse<EnableSharedWorkbookResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EnableSharedWorkbookResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxEnableSharedWorkbookRequestBuilder(EnableSharedWorkbookRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxEnableSharedWorkbook");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/configuration/enable-shared-workbook";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
   * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return GetXlsxCellByIdentifierResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxCellByIdentifierResponse editDocumentXlsxGetCellByIdentifier(GetXlsxCellByIdentifierRequest input) throws ApiException {
    ApiResponse<GetXlsxCellByIdentifierResponse> localVarResponse = editDocumentXlsxGetCellByIdentifierWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
   * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxCellByIdentifierResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxCellByIdentifierResponse> editDocumentXlsxGetCellByIdentifierWithHttpInfo(GetXlsxCellByIdentifierRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetCellByIdentifierRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetCellByIdentifier", localVarResponse);
        }
        return new ApiResponse<GetXlsxCellByIdentifierResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxCellByIdentifierResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetCellByIdentifierRequestBuilder(GetXlsxCellByIdentifierRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetCellByIdentifier");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-cell/by-identifier";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get cell from an Excel XLSX spreadsheet, worksheet by index
   * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return GetXlsxCellResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxCellResponse editDocumentXlsxGetCellByIndex(GetXlsxCellRequest input) throws ApiException {
    ApiResponse<GetXlsxCellResponse> localVarResponse = editDocumentXlsxGetCellByIndexWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get cell from an Excel XLSX spreadsheet, worksheet by index
   * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxCellResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxCellResponse> editDocumentXlsxGetCellByIndexWithHttpInfo(GetXlsxCellRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetCellByIndexRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetCellByIndex", localVarResponse);
        }
        return new ApiResponse<GetXlsxCellResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxCellResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetCellByIndexRequestBuilder(GetXlsxCellRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetCellByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-cell/by-index";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get columns from a Excel XLSX spreadsheet, worksheet
   * Returns the columns defined in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return GetXlsxColumnsResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxColumnsResponse editDocumentXlsxGetColumns(GetXlsxColumnsRequest input) throws ApiException {
    ApiResponse<GetXlsxColumnsResponse> localVarResponse = editDocumentXlsxGetColumnsWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get columns from a Excel XLSX spreadsheet, worksheet
   * Returns the columns defined in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxColumnsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxColumnsResponse> editDocumentXlsxGetColumnsWithHttpInfo(GetXlsxColumnsRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetColumnsRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetColumns", localVarResponse);
        }
        return new ApiResponse<GetXlsxColumnsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxColumnsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetColumnsRequestBuilder(GetXlsxColumnsRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetColumns");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-columns";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get images from a Excel XLSX spreadsheet, worksheet
   * Returns the images defined in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return GetXlsxImagesResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxImagesResponse editDocumentXlsxGetImages(GetXlsxImagesRequest input) throws ApiException {
    ApiResponse<GetXlsxImagesResponse> localVarResponse = editDocumentXlsxGetImagesWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get images from a Excel XLSX spreadsheet, worksheet
   * Returns the images defined in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxImagesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxImagesResponse> editDocumentXlsxGetImagesWithHttpInfo(GetXlsxImagesRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetImagesRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetImages", localVarResponse);
        }
        return new ApiResponse<GetXlsxImagesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxImagesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetImagesRequestBuilder(GetXlsxImagesRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetImages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-images";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet
   * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
   * @param inputFile Input file to perform the operation on. (required)
   * @return GetMacrosResponse
   * @throws ApiException if fails to make API call
   */
  public GetMacrosResponse editDocumentXlsxGetMacroInformation(File inputFile) throws ApiException {
    ApiResponse<GetMacrosResponse> localVarResponse = editDocumentXlsxGetMacroInformationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet
   * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;GetMacrosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetMacrosResponse> editDocumentXlsxGetMacroInformationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetMacroInformationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetMacroInformation", localVarResponse);
        }
        return new ApiResponse<GetMacrosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetMacrosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetMacroInformationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling editDocumentXlsxGetMacroInformation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-macros";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get rows and cells from a Excel XLSX spreadsheet, worksheet
   * Returns the rows and cells defined in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return GetXlsxRowsAndCellsResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxRowsAndCellsResponse editDocumentXlsxGetRowsAndCells(GetXlsxRowsAndCellsRequest input) throws ApiException {
    ApiResponse<GetXlsxRowsAndCellsResponse> localVarResponse = editDocumentXlsxGetRowsAndCellsWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get rows and cells from a Excel XLSX spreadsheet, worksheet
   * Returns the rows and cells defined in the Excel Spreadsheet worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxRowsAndCellsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxRowsAndCellsResponse> editDocumentXlsxGetRowsAndCellsWithHttpInfo(GetXlsxRowsAndCellsRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetRowsAndCellsRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetRowsAndCells", localVarResponse);
        }
        return new ApiResponse<GetXlsxRowsAndCellsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxRowsAndCellsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetRowsAndCellsRequestBuilder(GetXlsxRowsAndCellsRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetRowsAndCells");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-rows-and-cells";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a specific row from a Excel XLSX spreadsheet, worksheet by path
   * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
   * @param input Document input request (required)
   * @return GetXlsxSpecificRowResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxSpecificRowResponse editDocumentXlsxGetSpecificRow(GetXlsxSpecificRowRequest input) throws ApiException {
    ApiResponse<GetXlsxSpecificRowResponse> localVarResponse = editDocumentXlsxGetSpecificRowWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get a specific row from a Excel XLSX spreadsheet, worksheet by path
   * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxSpecificRowResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxSpecificRowResponse> editDocumentXlsxGetSpecificRowWithHttpInfo(GetXlsxSpecificRowRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetSpecificRowRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetSpecificRow", localVarResponse);
        }
        return new ApiResponse<GetXlsxSpecificRowResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxSpecificRowResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetSpecificRowRequestBuilder(GetXlsxSpecificRowRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetSpecificRow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-specific-row";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get styles from a Excel XLSX spreadsheet, worksheet
   * Returns the style defined in the Excel Spreadsheet
   * @param input Document input request (required)
   * @return GetXlsxStylesResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxStylesResponse editDocumentXlsxGetStyles(GetXlsxStylesRequest input) throws ApiException {
    ApiResponse<GetXlsxStylesResponse> localVarResponse = editDocumentXlsxGetStylesWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get styles from a Excel XLSX spreadsheet, worksheet
   * Returns the style defined in the Excel Spreadsheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxStylesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxStylesResponse> editDocumentXlsxGetStylesWithHttpInfo(GetXlsxStylesRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetStylesRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetStyles", localVarResponse);
        }
        return new ApiResponse<GetXlsxStylesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxStylesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetStylesRequestBuilder(GetXlsxStylesRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetStyles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-styles";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get worksheets from a Excel XLSX spreadsheet
   * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
   * @param input Document input request (required)
   * @return GetXlsxWorksheetsResponse
   * @throws ApiException if fails to make API call
   */
  public GetXlsxWorksheetsResponse editDocumentXlsxGetWorksheets(GetXlsxWorksheetsRequest input) throws ApiException {
    ApiResponse<GetXlsxWorksheetsResponse> localVarResponse = editDocumentXlsxGetWorksheetsWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Get worksheets from a Excel XLSX spreadsheet
   * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
   * @param input Document input request (required)
   * @return ApiResponse&lt;GetXlsxWorksheetsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetXlsxWorksheetsResponse> editDocumentXlsxGetWorksheetsWithHttpInfo(GetXlsxWorksheetsRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxGetWorksheetsRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxGetWorksheets", localVarResponse);
        }
        return new ApiResponse<GetXlsxWorksheetsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetXlsxWorksheetsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxGetWorksheetsRequestBuilder(GetXlsxWorksheetsRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxGetWorksheets");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/get-worksheets";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Insert a new worksheet into an Excel XLSX spreadsheet
   * Inserts a new worksheet into an Excel Spreadsheet
   * @param input Document input request (required)
   * @return InsertXlsxWorksheetResponse
   * @throws ApiException if fails to make API call
   */
  public InsertXlsxWorksheetResponse editDocumentXlsxInsertWorksheet(InsertXlsxWorksheetRequest input) throws ApiException {
    ApiResponse<InsertXlsxWorksheetResponse> localVarResponse = editDocumentXlsxInsertWorksheetWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Insert a new worksheet into an Excel XLSX spreadsheet
   * Inserts a new worksheet into an Excel Spreadsheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;InsertXlsxWorksheetResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InsertXlsxWorksheetResponse> editDocumentXlsxInsertWorksheetWithHttpInfo(InsertXlsxWorksheetRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxInsertWorksheetRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxInsertWorksheet", localVarResponse);
        }
        return new ApiResponse<InsertXlsxWorksheetResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InsertXlsxWorksheetResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxInsertWorksheetRequestBuilder(InsertXlsxWorksheetRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxInsertWorksheet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/insert-worksheet";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a specific worksheet in a Excel XLSX spreadsheet
   * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
   * @param input Document input request (required)
   * @return RenameXlsxWorksheetResponse
   * @throws ApiException if fails to make API call
   */
  public RenameXlsxWorksheetResponse editDocumentXlsxRenameWorksheet(RenameXlsxWorksheetRequest input) throws ApiException {
    ApiResponse<RenameXlsxWorksheetResponse> localVarResponse = editDocumentXlsxRenameWorksheetWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Rename a specific worksheet in a Excel XLSX spreadsheet
   * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
   * @param input Document input request (required)
   * @return ApiResponse&lt;RenameXlsxWorksheetResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RenameXlsxWorksheetResponse> editDocumentXlsxRenameWorksheetWithHttpInfo(RenameXlsxWorksheetRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxRenameWorksheetRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxRenameWorksheet", localVarResponse);
        }
        return new ApiResponse<RenameXlsxWorksheetResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RenameXlsxWorksheetResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxRenameWorksheetRequestBuilder(RenameXlsxWorksheetRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxRenameWorksheet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/rename-worksheet";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
   * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
   * @param input Document input request (required)
   * @return SetXlsxCellByIdentifierResponse
   * @throws ApiException if fails to make API call
   */
  public SetXlsxCellByIdentifierResponse editDocumentXlsxSetCellByIdentifier(SetXlsxCellByIdentifierRequest input) throws ApiException {
    ApiResponse<SetXlsxCellByIdentifierResponse> localVarResponse = editDocumentXlsxSetCellByIdentifierWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
   * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;SetXlsxCellByIdentifierResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetXlsxCellByIdentifierResponse> editDocumentXlsxSetCellByIdentifierWithHttpInfo(SetXlsxCellByIdentifierRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxSetCellByIdentifierRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxSetCellByIdentifier", localVarResponse);
        }
        return new ApiResponse<SetXlsxCellByIdentifierResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetXlsxCellByIdentifierResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxSetCellByIdentifierRequestBuilder(SetXlsxCellByIdentifierRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxSetCellByIdentifier");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/set-cell/by-identifier";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
   * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
   * @param input Document input request (required)
   * @return SetXlsxCellResponse
   * @throws ApiException if fails to make API call
   */
  public SetXlsxCellResponse editDocumentXlsxSetCellByIndex(SetXlsxCellRequest input) throws ApiException {
    ApiResponse<SetXlsxCellResponse> localVarResponse = editDocumentXlsxSetCellByIndexWithHttpInfo(input);
    return localVarResponse.getData();
  }

  /**
   * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
   * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
   * @param input Document input request (required)
   * @return ApiResponse&lt;SetXlsxCellResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetXlsxCellResponse> editDocumentXlsxSetCellByIndexWithHttpInfo(SetXlsxCellRequest input) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDocumentXlsxSetCellByIndexRequestBuilder(input);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDocumentXlsxSetCellByIndex", localVarResponse);
        }
        return new ApiResponse<SetXlsxCellResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetXlsxCellResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDocumentXlsxSetCellByIndexRequestBuilder(SetXlsxCellRequest input) throws ApiException {
    // verify the required parameter 'input' is set
    if (input == null) {
      throw new ApiException(400, "Missing the required parameter 'input' when calling editDocumentXlsxSetCellByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/xlsx/set-cell/by-index";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(input);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
