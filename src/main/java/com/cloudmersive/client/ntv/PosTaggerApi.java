/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.ntv;

import com.cloudmersive.client.ntv.invoker.ApiClient;
import com.cloudmersive.client.ntv.invoker.ApiException;
import com.cloudmersive.client.ntv.invoker.ApiResponse;
import com.cloudmersive.client.ntv.invoker.Pair;

import com.cloudmersive.client.ntv.model.PosRequest;
import com.cloudmersive.client.ntv.model.PosResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:56:20.807345200-07:00[America/Los_Angeles]")
public class PosTaggerApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PosTaggerApi() {
    this(new ApiClient());
  }

  public PosTaggerApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Part-of-speech tag a string, filter to adjectives
   * Part-of-speech (POS) tag a string, find the adjectives, and return result as JSON
   * @param request Input string (required)
   * @return PosResponse
   * @throws ApiException if fails to make API call
   */
  public PosResponse posTaggerTagAdjectives(PosRequest request) throws ApiException {
    ApiResponse<PosResponse> localVarResponse = posTaggerTagAdjectivesWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Part-of-speech tag a string, filter to adjectives
   * Part-of-speech (POS) tag a string, find the adjectives, and return result as JSON
   * @param request Input string (required)
   * @return ApiResponse&lt;PosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PosResponse> posTaggerTagAdjectivesWithHttpInfo(PosRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = posTaggerTagAdjectivesRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("posTaggerTagAdjectives", localVarResponse);
        }
        return new ApiResponse<PosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder posTaggerTagAdjectivesRequestBuilder(PosRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling posTaggerTagAdjectives");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/pos/tag/adjectives";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Part-of-speech tag a string, filter to adverbs
   * Part-of-speech (POS) tag a string, find the adverbs, and return result as JSON
   * @param request Input string (required)
   * @return PosResponse
   * @throws ApiException if fails to make API call
   */
  public PosResponse posTaggerTagAdverbs(PosRequest request) throws ApiException {
    ApiResponse<PosResponse> localVarResponse = posTaggerTagAdverbsWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Part-of-speech tag a string, filter to adverbs
   * Part-of-speech (POS) tag a string, find the adverbs, and return result as JSON
   * @param request Input string (required)
   * @return ApiResponse&lt;PosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PosResponse> posTaggerTagAdverbsWithHttpInfo(PosRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = posTaggerTagAdverbsRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("posTaggerTagAdverbs", localVarResponse);
        }
        return new ApiResponse<PosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder posTaggerTagAdverbsRequestBuilder(PosRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling posTaggerTagAdverbs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/pos/tag/adverbs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Part-of-speech tag a string, filter to nouns
   * Part-of-speech (POS) tag a string, find the nouns, and return result as JSON
   * @param request Input string (required)
   * @return PosResponse
   * @throws ApiException if fails to make API call
   */
  public PosResponse posTaggerTagNouns(PosRequest request) throws ApiException {
    ApiResponse<PosResponse> localVarResponse = posTaggerTagNounsWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Part-of-speech tag a string, filter to nouns
   * Part-of-speech (POS) tag a string, find the nouns, and return result as JSON
   * @param request Input string (required)
   * @return ApiResponse&lt;PosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PosResponse> posTaggerTagNounsWithHttpInfo(PosRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = posTaggerTagNounsRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("posTaggerTagNouns", localVarResponse);
        }
        return new ApiResponse<PosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder posTaggerTagNounsRequestBuilder(PosRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling posTaggerTagNouns");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/pos/tag/nouns";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Part-of-speech tag a string, filter to pronouns
   * Part-of-speech (POS) tag a string, find the pronouns, and return result as JSON
   * @param request Input string (required)
   * @return PosResponse
   * @throws ApiException if fails to make API call
   */
  public PosResponse posTaggerTagPronouns(PosRequest request) throws ApiException {
    ApiResponse<PosResponse> localVarResponse = posTaggerTagPronounsWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Part-of-speech tag a string, filter to pronouns
   * Part-of-speech (POS) tag a string, find the pronouns, and return result as JSON
   * @param request Input string (required)
   * @return ApiResponse&lt;PosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PosResponse> posTaggerTagPronounsWithHttpInfo(PosRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = posTaggerTagPronounsRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("posTaggerTagPronouns", localVarResponse);
        }
        return new ApiResponse<PosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder posTaggerTagPronounsRequestBuilder(PosRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling posTaggerTagPronouns");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/pos/tag/pronouns";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Part-of-speech tag a string
   * Part-of-speech (POS) tag a string and return result as JSON
   * @param request Input string (required)
   * @return PosResponse
   * @throws ApiException if fails to make API call
   */
  public PosResponse posTaggerTagSentence(PosRequest request) throws ApiException {
    ApiResponse<PosResponse> localVarResponse = posTaggerTagSentenceWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Part-of-speech tag a string
   * Part-of-speech (POS) tag a string and return result as JSON
   * @param request Input string (required)
   * @return ApiResponse&lt;PosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PosResponse> posTaggerTagSentenceWithHttpInfo(PosRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = posTaggerTagSentenceRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("posTaggerTagSentence", localVarResponse);
        }
        return new ApiResponse<PosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder posTaggerTagSentenceRequestBuilder(PosRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling posTaggerTagSentence");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/pos/tag/sentence";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Part-of-speech tag a string, filter to verbs
   * Part-of-speech (POS) tag a string, find the verbs, and return result as JSON
   * @param request Input string (required)
   * @return PosResponse
   * @throws ApiException if fails to make API call
   */
  public PosResponse posTaggerTagVerbs(PosRequest request) throws ApiException {
    ApiResponse<PosResponse> localVarResponse = posTaggerTagVerbsWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Part-of-speech tag a string, filter to verbs
   * Part-of-speech (POS) tag a string, find the verbs, and return result as JSON
   * @param request Input string (required)
   * @return ApiResponse&lt;PosResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PosResponse> posTaggerTagVerbsWithHttpInfo(PosRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = posTaggerTagVerbsRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("posTaggerTagVerbs", localVarResponse);
        }
        return new ApiResponse<PosResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PosResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder posTaggerTagVerbsRequestBuilder(PosRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling posTaggerTagVerbs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/nlp-v2/pos/tag/verbs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
