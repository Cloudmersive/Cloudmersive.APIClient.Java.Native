/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.ntv;

import com.cloudmersive.client.ntv.invoker.ApiClient;
import com.cloudmersive.client.ntv.invoker.ApiException;
import com.cloudmersive.client.ntv.invoker.ApiResponse;
import com.cloudmersive.client.ntv.invoker.Pair;

import com.cloudmersive.client.ntv.model.CheckResponse;
import com.cloudmersive.client.ntv.model.DomainQualityResponse;
import com.cloudmersive.client.ntv.model.IsAdminPathResponse;
import com.cloudmersive.client.ntv.model.PhishingCheckRequest;
import com.cloudmersive.client.ntv.model.PhishingCheckResponse;
import com.cloudmersive.client.ntv.model.UrlHtmlSsrfRequestFull;
import com.cloudmersive.client.ntv.model.UrlHtmlSsrfResponseFull;
import com.cloudmersive.client.ntv.model.UrlSafetyCheckRequestFull;
import com.cloudmersive.client.ntv.model.UrlSafetyCheckResponseFull;
import com.cloudmersive.client.ntv.model.UrlSsrfRequestBatch;
import com.cloudmersive.client.ntv.model.UrlSsrfRequestFull;
import com.cloudmersive.client.ntv.model.UrlSsrfResponseBatch;
import com.cloudmersive.client.ntv.model.UrlSsrfResponseFull;
import com.cloudmersive.client.ntv.model.ValidateUrlRequestFull;
import com.cloudmersive.client.ntv.model.ValidateUrlRequestSyntaxOnly;
import com.cloudmersive.client.ntv.model.ValidateUrlResponseFull;
import com.cloudmersive.client.ntv.model.ValidateUrlResponseSyntaxOnly;
import com.cloudmersive.client.ntv.model.WhoisResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:56:16.404307500-07:00[America/Los_Angeles]")
public class DomainApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DomainApi() {
    this(new ApiClient());
  }

  public DomainApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Validate a domain name
   * Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
   * @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes. (required)
   * @return CheckResponse
   * @throws ApiException if fails to make API call
   */
  public CheckResponse domainCheck(String domain) throws ApiException {
    ApiResponse<CheckResponse> localVarResponse = domainCheckWithHttpInfo(domain);
    return localVarResponse.getData();
  }

  /**
   * Validate a domain name
   * Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
   * @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes. (required)
   * @return ApiResponse&lt;CheckResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CheckResponse> domainCheckWithHttpInfo(String domain) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainCheckRequestBuilder(domain);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainCheck", localVarResponse);
        }
        return new ApiResponse<CheckResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CheckResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainCheckRequestBuilder(String domain) throws ApiException {
    // verify the required parameter 'domain' is set
    if (domain == null) {
      throw new ApiException(400, "Missing the required parameter 'domain' when calling domainCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/check";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(domain));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get top-level domain name from URL
   * Gets the top-level domain name from a URL, such as mydomain.com.
   * @param request Input URL information (required)
   * @return ValidateUrlResponseSyntaxOnly
   * @throws ApiException if fails to make API call
   */
  public ValidateUrlResponseSyntaxOnly domainGetTopLevelDomainFromUrl(ValidateUrlRequestSyntaxOnly request) throws ApiException {
    ApiResponse<ValidateUrlResponseSyntaxOnly> localVarResponse = domainGetTopLevelDomainFromUrlWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Get top-level domain name from URL
   * Gets the top-level domain name from a URL, such as mydomain.com.
   * @param request Input URL information (required)
   * @return ApiResponse&lt;ValidateUrlResponseSyntaxOnly&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateUrlResponseSyntaxOnly> domainGetTopLevelDomainFromUrlWithHttpInfo(ValidateUrlRequestSyntaxOnly request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainGetTopLevelDomainFromUrlRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainGetTopLevelDomainFromUrl", localVarResponse);
        }
        return new ApiResponse<ValidateUrlResponseSyntaxOnly>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateUrlResponseSyntaxOnly>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainGetTopLevelDomainFromUrlRequestBuilder(ValidateUrlRequestSyntaxOnly request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainGetTopLevelDomainFromUrl");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/get-top-level-domain";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check if path is a high-risk or vulnerable server administration path
   * Check if the input URL or relative path is a server Administration Path, and therefore a risk or vulnerability for remote access.
   * @param value URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes. (required)
   * @return IsAdminPathResponse
   * @throws ApiException if fails to make API call
   */
  public IsAdminPathResponse domainIsAdminPath(String value) throws ApiException {
    ApiResponse<IsAdminPathResponse> localVarResponse = domainIsAdminPathWithHttpInfo(value);
    return localVarResponse.getData();
  }

  /**
   * Check if path is a high-risk or vulnerable server administration path
   * Check if the input URL or relative path is a server Administration Path, and therefore a risk or vulnerability for remote access.
   * @param value URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes. (required)
   * @return ApiResponse&lt;IsAdminPathResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IsAdminPathResponse> domainIsAdminPathWithHttpInfo(String value) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainIsAdminPathRequestBuilder(value);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainIsAdminPath", localVarResponse);
        }
        return new ApiResponse<IsAdminPathResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IsAdminPathResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainIsAdminPathRequestBuilder(String value) throws ApiException {
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling domainIsAdminPath");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/is-admin-path";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(value));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check a URL for Phishing threats
   * Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
   * @param request Input URL request (required)
   * @return PhishingCheckResponse
   * @throws ApiException if fails to make API call
   */
  public PhishingCheckResponse domainPhishingCheck(PhishingCheckRequest request) throws ApiException {
    ApiResponse<PhishingCheckResponse> localVarResponse = domainPhishingCheckWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Check a URL for Phishing threats
   * Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
   * @param request Input URL request (required)
   * @return ApiResponse&lt;PhishingCheckResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PhishingCheckResponse> domainPhishingCheckWithHttpInfo(PhishingCheckRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainPhishingCheckRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainPhishingCheck", localVarResponse);
        }
        return new ApiResponse<PhishingCheckResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PhishingCheckResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainPhishingCheckRequestBuilder(PhishingCheckRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainPhishingCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/phishing-threat-check";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get WHOIS information for a domain
   * Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
   * @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes. (required)
   * @return WhoisResponse
   * @throws ApiException if fails to make API call
   */
  public WhoisResponse domainPost(String domain) throws ApiException {
    ApiResponse<WhoisResponse> localVarResponse = domainPostWithHttpInfo(domain);
    return localVarResponse.getData();
  }

  /**
   * Get WHOIS information for a domain
   * Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
   * @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes. (required)
   * @return ApiResponse&lt;WhoisResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WhoisResponse> domainPostWithHttpInfo(String domain) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainPostRequestBuilder(domain);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainPost", localVarResponse);
        }
        return new ApiResponse<WhoisResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WhoisResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainPostRequestBuilder(String domain) throws ApiException {
    // verify the required parameter 'domain' is set
    if (domain == null) {
      throw new ApiException(400, "Missing the required parameter 'domain' when calling domainPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/whois";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(domain));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a domain name&#39;s quality score
   * Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
   * @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;. (required)
   * @return DomainQualityResponse
   * @throws ApiException if fails to make API call
   */
  public DomainQualityResponse domainQualityScore(String domain) throws ApiException {
    ApiResponse<DomainQualityResponse> localVarResponse = domainQualityScoreWithHttpInfo(domain);
    return localVarResponse.getData();
  }

  /**
   * Validate a domain name&#39;s quality score
   * Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
   * @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;. (required)
   * @return ApiResponse&lt;DomainQualityResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DomainQualityResponse> domainQualityScoreWithHttpInfo(String domain) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainQualityScoreRequestBuilder(domain);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainQualityScore", localVarResponse);
        }
        return new ApiResponse<DomainQualityResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DomainQualityResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainQualityScoreRequestBuilder(String domain) throws ApiException {
    // verify the required parameter 'domain' is set
    if (domain == null) {
      throw new ApiException(400, "Missing the required parameter 'domain' when calling domainQualityScore");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/quality-score";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(domain));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check a URL for safety threats
   * Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
   * @param request Input URL request (required)
   * @return UrlSafetyCheckResponseFull
   * @throws ApiException if fails to make API call
   */
  public UrlSafetyCheckResponseFull domainSafetyCheck(UrlSafetyCheckRequestFull request) throws ApiException {
    ApiResponse<UrlSafetyCheckResponseFull> localVarResponse = domainSafetyCheckWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Check a URL for safety threats
   * Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
   * @param request Input URL request (required)
   * @return ApiResponse&lt;UrlSafetyCheckResponseFull&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UrlSafetyCheckResponseFull> domainSafetyCheckWithHttpInfo(UrlSafetyCheckRequestFull request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainSafetyCheckRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainSafetyCheck", localVarResponse);
        }
        return new ApiResponse<UrlSafetyCheckResponseFull>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UrlSafetyCheckResponseFull>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainSafetyCheckRequestBuilder(UrlSafetyCheckRequestFull request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainSafetyCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/safety-threat-check";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check a URL for SSRF threats
   * Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
   * @param request Input URL request (required)
   * @return UrlSsrfResponseFull
   * @throws ApiException if fails to make API call
   */
  public UrlSsrfResponseFull domainSsrfCheck(UrlSsrfRequestFull request) throws ApiException {
    ApiResponse<UrlSsrfResponseFull> localVarResponse = domainSsrfCheckWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Check a URL for SSRF threats
   * Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
   * @param request Input URL request (required)
   * @return ApiResponse&lt;UrlSsrfResponseFull&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UrlSsrfResponseFull> domainSsrfCheckWithHttpInfo(UrlSsrfRequestFull request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainSsrfCheckRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainSsrfCheck", localVarResponse);
        }
        return new ApiResponse<UrlSsrfResponseFull>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UrlSsrfResponseFull>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainSsrfCheckRequestBuilder(UrlSsrfRequestFull request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainSsrfCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/ssrf-threat-check";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check a URL for SSRF threats in batches
   * Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
   * @param request Input URL request as a batch of multiple URLs (required)
   * @return UrlSsrfResponseBatch
   * @throws ApiException if fails to make API call
   */
  public UrlSsrfResponseBatch domainSsrfCheckBatch(UrlSsrfRequestBatch request) throws ApiException {
    ApiResponse<UrlSsrfResponseBatch> localVarResponse = domainSsrfCheckBatchWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Check a URL for SSRF threats in batches
   * Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
   * @param request Input URL request as a batch of multiple URLs (required)
   * @return ApiResponse&lt;UrlSsrfResponseBatch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UrlSsrfResponseBatch> domainSsrfCheckBatchWithHttpInfo(UrlSsrfRequestBatch request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainSsrfCheckBatchRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainSsrfCheckBatch", localVarResponse);
        }
        return new ApiResponse<UrlSsrfResponseBatch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UrlSsrfResponseBatch>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainSsrfCheckBatchRequestBuilder(UrlSsrfRequestBatch request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainSsrfCheckBatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/ssrf-threat-check/batch";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a URL fully
   * Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
   * @param request Input URL request (required)
   * @return ValidateUrlResponseFull
   * @throws ApiException if fails to make API call
   */
  public ValidateUrlResponseFull domainUrlFull(ValidateUrlRequestFull request) throws ApiException {
    ApiResponse<ValidateUrlResponseFull> localVarResponse = domainUrlFullWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Validate a URL fully
   * Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
   * @param request Input URL request (required)
   * @return ApiResponse&lt;ValidateUrlResponseFull&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateUrlResponseFull> domainUrlFullWithHttpInfo(ValidateUrlRequestFull request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainUrlFullRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainUrlFull", localVarResponse);
        }
        return new ApiResponse<ValidateUrlResponseFull>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateUrlResponseFull>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainUrlFullRequestBuilder(ValidateUrlRequestFull request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainUrlFull");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/full";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check a URL for HTML embedded SSRF threats
   * Checks if an input URL HTML is at risk of containing one or more embedded SSRF (Server-side request forgery) threats or attacks.
   * @param request Input URL request (required)
   * @return UrlHtmlSsrfResponseFull
   * @throws ApiException if fails to make API call
   */
  public UrlHtmlSsrfResponseFull domainUrlHtmlSsrfCheck(UrlHtmlSsrfRequestFull request) throws ApiException {
    ApiResponse<UrlHtmlSsrfResponseFull> localVarResponse = domainUrlHtmlSsrfCheckWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Check a URL for HTML embedded SSRF threats
   * Checks if an input URL HTML is at risk of containing one or more embedded SSRF (Server-side request forgery) threats or attacks.
   * @param request Input URL request (required)
   * @return ApiResponse&lt;UrlHtmlSsrfResponseFull&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UrlHtmlSsrfResponseFull> domainUrlHtmlSsrfCheckWithHttpInfo(UrlHtmlSsrfRequestFull request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainUrlHtmlSsrfCheckRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainUrlHtmlSsrfCheck", localVarResponse);
        }
        return new ApiResponse<UrlHtmlSsrfResponseFull>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UrlHtmlSsrfResponseFull>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainUrlHtmlSsrfCheckRequestBuilder(UrlHtmlSsrfRequestFull request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainUrlHtmlSsrfCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/ssrf-threat-check/html-embedded";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a URL syntactically
   * Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
   * @param request Input URL information (required)
   * @return ValidateUrlResponseSyntaxOnly
   * @throws ApiException if fails to make API call
   */
  public ValidateUrlResponseSyntaxOnly domainUrlSyntaxOnly(ValidateUrlRequestSyntaxOnly request) throws ApiException {
    ApiResponse<ValidateUrlResponseSyntaxOnly> localVarResponse = domainUrlSyntaxOnlyWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Validate a URL syntactically
   * Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
   * @param request Input URL information (required)
   * @return ApiResponse&lt;ValidateUrlResponseSyntaxOnly&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ValidateUrlResponseSyntaxOnly> domainUrlSyntaxOnlyWithHttpInfo(ValidateUrlRequestSyntaxOnly request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = domainUrlSyntaxOnlyRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("domainUrlSyntaxOnly", localVarResponse);
        }
        return new ApiResponse<ValidateUrlResponseSyntaxOnly>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ValidateUrlResponseSyntaxOnly>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder domainUrlSyntaxOnlyRequestBuilder(ValidateUrlRequestSyntaxOnly request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling domainUrlSyntaxOnly");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/validate/domain/url/syntax-only";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
