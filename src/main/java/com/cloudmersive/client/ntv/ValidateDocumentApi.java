/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.ntv;

import com.cloudmersive.client.ntv.invoker.ApiClient;
import com.cloudmersive.client.ntv.invoker.ApiException;
import com.cloudmersive.client.ntv.invoker.ApiResponse;
import com.cloudmersive.client.ntv.invoker.Pair;

import com.cloudmersive.client.ntv.model.AutodetectDocumentValidationResult;
import com.cloudmersive.client.ntv.model.DocumentValidationResult;
import java.io.File;
import com.cloudmersive.client.ntv.model.HtmlSsrfThreatCheckResult;
import com.cloudmersive.client.ntv.model.XxeThreatDetectionResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:56:36.059960-07:00[America/Los_Angeles]")
public class ValidateDocumentApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ValidateDocumentApi() {
    this(new ApiClient());
  }

  public ValidateDocumentApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Autodetect content type and validate
   * Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.
   * @param inputFile Input file to perform the operation on. (required)
   * @return AutodetectDocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public AutodetectDocumentValidationResult validateDocumentAutodetectValidation(File inputFile) throws ApiException {
    ApiResponse<AutodetectDocumentValidationResult> localVarResponse = validateDocumentAutodetectValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Autodetect content type and validate
   * Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;AutodetectDocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AutodetectDocumentValidationResult> validateDocumentAutodetectValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentAutodetectValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentAutodetectValidation", localVarResponse);
        }
        return new ApiResponse<AutodetectDocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AutodetectDocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentAutodetectValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentAutodetectValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/autodetect";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a CSV file document (CSV)
   * Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentCsvValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentCsvValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a CSV file document (CSV)
   * Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentCsvValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentCsvValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentCsvValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentCsvValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentCsvValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/csv";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a Word 97-2003 Legacy document (DOC)
   * Validate a Word 97-2003 Legacy document (DOC)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentDocValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentDocValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a Word 97-2003 Legacy document (DOC)
   * Validate a Word 97-2003 Legacy document (DOC)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentDocValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentDocValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentDocValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentDocValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentDocValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/doc";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a Word document (DOCX)
   * Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentDocxValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentDocxValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a Word document (DOCX)
   * Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentDocxValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentDocxValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentDocxValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentDocxValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentDocxValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/docx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate if input file is a valid EML file
   * Validate if an input file is an EML email file; if the document is not valid
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentEmlValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentEmlValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate if input file is a valid EML file
   * Validate if an input file is an EML email file; if the document is not valid
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentEmlValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentEmlValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentEmlValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentEmlValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentEmlValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/eml";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate if a file is executable
   * Validate if an input file is a binary executable file; if the document is not valid
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentExecutableValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentExecutableValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate if a file is executable
   * Validate if an input file is a binary executable file; if the document is not valid
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentExecutableValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentExecutableValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentExecutableValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentExecutableValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentExecutableValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/executable";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a GZip Archive file (gzip or gz)
   * Validate a GZip archive file (GZIP or GZ)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentGZipValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentGZipValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a GZip Archive file (gzip or gz)
   * Validate a GZip archive file (GZIP or GZ)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentGZipValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentGZipValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentGZipValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentGZipValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentGZipValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/gzip";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate an HTML file and checks for SSRF threats
   * Validate an HTML document file and checks for SSRF (Server-side Request Forgery) threats in the file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return HtmlSsrfThreatCheckResult
   * @throws ApiException if fails to make API call
   */
  public HtmlSsrfThreatCheckResult validateDocumentHtmlSsrfValidation(File inputFile) throws ApiException {
    ApiResponse<HtmlSsrfThreatCheckResult> localVarResponse = validateDocumentHtmlSsrfValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate an HTML file and checks for SSRF threats
   * Validate an HTML document file and checks for SSRF (Server-side Request Forgery) threats in the file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;HtmlSsrfThreatCheckResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlSsrfThreatCheckResult> validateDocumentHtmlSsrfValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentHtmlSsrfValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentHtmlSsrfValidation", localVarResponse);
        }
        return new ApiResponse<HtmlSsrfThreatCheckResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlSsrfThreatCheckResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentHtmlSsrfValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentHtmlSsrfValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/html/ssrf-threat-check";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate an HTML file
   * Validate an HTML document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentHtmlValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentHtmlValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate an HTML file
   * Validate an HTML document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentHtmlValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentHtmlValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentHtmlValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentHtmlValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentHtmlValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/html";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate an Image File
   * Validate an image file; if the document is not valid, identifies the errors in the document.  Formats supported include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV.
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentImageValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentImageValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate an Image File
   * Validate an image file; if the document is not valid, identifies the errors in the document.  Formats supported include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentImageValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentImageValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentImageValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentImageValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentImageValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/image";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a JPG File
   * Validate a JPEG image file; if the document is not valid, identifies the errors in the document..
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentJpgValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentJpgValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a JPG File
   * Validate a JPEG image file; if the document is not valid, identifies the errors in the document..
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentJpgValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentJpgValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentJpgValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentJpgValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentJpgValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/jpg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a JSON file
   * Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentJsonValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentJsonValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a JSON file
   * Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentJsonValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentJsonValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentJsonValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentJsonValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentJsonValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/json";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate if input file is a valid MSG file
   * Validate if an input file is an MSG email file; if the document is not valid
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentMsgValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentMsgValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate if input file is a valid MSG file
   * Validate if an input file is an MSG email file; if the document is not valid
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentMsgValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentMsgValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentMsgValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentMsgValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentMsgValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/msg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a PDF document file
   * Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentPdfValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentPdfValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a PDF document file
   * Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentPdfValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentPdfValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentPdfValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentPdfValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentPdfValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/pdf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a PNG File
   * Validate a PNG image file; if the document is not valid, identifies the errors in the document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentPngValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentPngValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a PNG File
   * Validate a PNG image file; if the document is not valid, identifies the errors in the document.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentPngValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentPngValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentPngValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentPngValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentPngValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/png";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a PowerPoint 97-2003 Legacy presentation (PPT)
   * Validate a PowerPoint 97-2003 Legacy presentation (PPT)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentPptValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentPptValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a PowerPoint 97-2003 Legacy presentation (PPT)
   * Validate a PowerPoint 97-2003 Legacy presentation (PPT)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentPptValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentPptValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentPptValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentPptValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentPptValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/ppt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a PowerPoint presentation (PPTX)
   * Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentPptxValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentPptxValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a PowerPoint presentation (PPTX)
   * Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentPptxValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentPptxValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentPptxValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentPptxValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentPptxValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/pptx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a RAR Archive file (RAR)
   * Validate a RAR archive file (RAR)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentRarValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentRarValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a RAR Archive file (RAR)
   * Validate a RAR archive file (RAR)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentRarValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentRarValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentRarValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentRarValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentRarValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/rar";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a Rich Text Format document (RTF)
   * Validate a Rich Text Format document (RTF)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentRtfValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentRtfValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a Rich Text Format document (RTF)
   * Validate a Rich Text Format document (RTF)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentRtfValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentRtfValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentRtfValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentRtfValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentRtfValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/rtf";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a TAR Tarball Archive file (TAR)
   * Validate a TAR tarball archive file (TAR)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentTarValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentTarValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a TAR Tarball Archive file (TAR)
   * Validate a TAR tarball archive file (TAR)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentTarValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentTarValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentTarValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentTarValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentTarValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/tar";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate an TXT file
   * Validate an TXT document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentTxtValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentTxtValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate an TXT file
   * Validate an TXT document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentTxtValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentTxtValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentTxtValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentTxtValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentTxtValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/txt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a Excel 97-2003 Legacy spreadsheet (XLS)
   * Validate a Excel 97-2003 Legacy spreadsheet (XLS)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentXlsValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentXlsValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a Excel 97-2003 Legacy spreadsheet (XLS)
   * Validate a Excel 97-2003 Legacy spreadsheet (XLS)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentXlsValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentXlsValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentXlsValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentXlsValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentXlsValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/xls";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a Excel document (XLSX)
   * Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentXlsxValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentXlsxValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a Excel document (XLSX)
   * Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentXlsxValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentXlsxValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentXlsxValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentXlsxValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentXlsxValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/xlsx";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate an XML file
   * Validate an XML document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentXmlValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentXmlValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate an XML file
   * Validate an XML document file; if the document is not valid, identifies the errors in the document
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentXmlValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentXmlValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentXmlValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentXmlValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentXmlValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/xml";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate an XML file for XML External Entity (XXE) threats
   * Validate an XML document file for XML External Entity (XXE) threats; if the document is not valid, identifies the errors in the document.  XXE threats are a type of threat that exploits vulnerabilities in the XML standard relating to external or local entity URIs in XML documents.
   * @param inputFile Input file to perform the operation on. (required)
   * @return XxeThreatDetectionResult
   * @throws ApiException if fails to make API call
   */
  public XxeThreatDetectionResult validateDocumentXmlXxeThreatValidation(File inputFile) throws ApiException {
    ApiResponse<XxeThreatDetectionResult> localVarResponse = validateDocumentXmlXxeThreatValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate an XML file for XML External Entity (XXE) threats
   * Validate an XML document file for XML External Entity (XXE) threats; if the document is not valid, identifies the errors in the document.  XXE threats are a type of threat that exploits vulnerabilities in the XML standard relating to external or local entity URIs in XML documents.
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;XxeThreatDetectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<XxeThreatDetectionResult> validateDocumentXmlXxeThreatValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentXmlXxeThreatValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentXmlXxeThreatValidation", localVarResponse);
        }
        return new ApiResponse<XxeThreatDetectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<XxeThreatDetectionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentXmlXxeThreatValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentXmlXxeThreatValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/xml/xxe-threats";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate a Zip Archive file (zip)
   * Validate a Zip archive file (ZIP)
   * @param inputFile Input file to perform the operation on. (required)
   * @return DocumentValidationResult
   * @throws ApiException if fails to make API call
   */
  public DocumentValidationResult validateDocumentZipValidation(File inputFile) throws ApiException {
    ApiResponse<DocumentValidationResult> localVarResponse = validateDocumentZipValidationWithHttpInfo(inputFile);
    return localVarResponse.getData();
  }

  /**
   * Validate a Zip Archive file (zip)
   * Validate a Zip archive file (ZIP)
   * @param inputFile Input file to perform the operation on. (required)
   * @return ApiResponse&lt;DocumentValidationResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DocumentValidationResult> validateDocumentZipValidationWithHttpInfo(File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDocumentZipValidationRequestBuilder(inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDocumentZipValidation", localVarResponse);
        }
        return new ApiResponse<DocumentValidationResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DocumentValidationResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDocumentZipValidationRequestBuilder(File inputFile) throws ApiException {
    // verify the required parameter 'inputFile' is set
    if (inputFile == null) {
      throw new ApiException(400, "Missing the required parameter 'inputFile' when calling validateDocumentZipValidation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/validate/zip";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
