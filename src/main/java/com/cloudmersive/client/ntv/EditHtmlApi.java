/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.ntv;

import com.cloudmersive.client.ntv.invoker.ApiClient;
import com.cloudmersive.client.ntv.invoker.ApiException;
import com.cloudmersive.client.ntv.invoker.ApiResponse;
import com.cloudmersive.client.ntv.invoker.Pair;

import java.io.File;
import com.cloudmersive.client.ntv.model.HtmlGetLanguageResult;
import com.cloudmersive.client.ntv.model.HtmlGetLinksResponse;
import com.cloudmersive.client.ntv.model.HtmlGetRelCanonicalUrlResult;
import com.cloudmersive.client.ntv.model.HtmlGetSitemapUrlResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:56:36.059960-07:00[America/Los_Angeles]")
public class EditHtmlApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EditHtmlApi() {
    this(new ApiClient());
  }

  public EditHtmlApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Append an HTML tag to the HEAD section of an HTML Document
   * Appends an HTML tag to the HEAD section of an HTML document.
   * @param htmlTag The HTML tag to append. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlAppendHeaderTag(String htmlTag, String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlAppendHeaderTagWithHttpInfo(htmlTag, inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Append an HTML tag to the HEAD section of an HTML Document
   * Appends an HTML tag to the HEAD section of an HTML document.
   * @param htmlTag The HTML tag to append. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlAppendHeaderTagWithHttpInfo(String htmlTag, String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlAppendHeaderTagRequestBuilder(htmlTag, inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlAppendHeaderTag", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlAppendHeaderTagRequestBuilder(String htmlTag, String inputFileUrl, File inputFile) throws ApiException {
    // verify the required parameter 'htmlTag' is set
    if (htmlTag == null) {
      throw new ApiException(400, "Missing the required parameter 'htmlTag' when calling editHtmlHtmlAppendHeaderTag");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/append/tag";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (htmlTag != null) {
      localVarRequestBuilder.header("htmlTag", htmlTag.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Append a Heading to an HTML Document
   * Appends a heading to the end of an HTML document.
   * @param headingText The text content to be used in the header. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
   * @param cssStyle Optional: The CSS style for the heading. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlAppendHeading(String headingText, String inputFileUrl, Integer headingSize, String cssStyle, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlAppendHeadingWithHttpInfo(headingText, inputFileUrl, headingSize, cssStyle, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Append a Heading to an HTML Document
   * Appends a heading to the end of an HTML document.
   * @param headingText The text content to be used in the header. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)
   * @param cssStyle Optional: The CSS style for the heading. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlAppendHeadingWithHttpInfo(String headingText, String inputFileUrl, Integer headingSize, String cssStyle, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlAppendHeadingRequestBuilder(headingText, inputFileUrl, headingSize, cssStyle, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlAppendHeading", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlAppendHeadingRequestBuilder(String headingText, String inputFileUrl, Integer headingSize, String cssStyle, File inputFile) throws ApiException {
    // verify the required parameter 'headingText' is set
    if (headingText == null) {
      throw new ApiException(400, "Missing the required parameter 'headingText' when calling editHtmlHtmlAppendHeading");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/append/heading";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (headingText != null) {
      localVarRequestBuilder.header("headingText", headingText.toString());
    }
    if (headingSize != null) {
      localVarRequestBuilder.header("headingSize", headingSize.toString());
    }
    if (cssStyle != null) {
      localVarRequestBuilder.header("cssStyle", cssStyle.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Append an Image to an HTML Document from a URL
   * Appends an image to the end of an HTML document using a URL.
   * @param imageUrl The URL for the image. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param cssStyle Optional: CSS style for the image. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlAppendImageFromUrl(String imageUrl, String inputFileUrl, String cssStyle, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlAppendImageFromUrlWithHttpInfo(imageUrl, inputFileUrl, cssStyle, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Append an Image to an HTML Document from a URL
   * Appends an image to the end of an HTML document using a URL.
   * @param imageUrl The URL for the image. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param cssStyle Optional: CSS style for the image. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlAppendImageFromUrlWithHttpInfo(String imageUrl, String inputFileUrl, String cssStyle, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlAppendImageFromUrlRequestBuilder(imageUrl, inputFileUrl, cssStyle, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlAppendImageFromUrl", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlAppendImageFromUrlRequestBuilder(String imageUrl, String inputFileUrl, String cssStyle, File inputFile) throws ApiException {
    // verify the required parameter 'imageUrl' is set
    if (imageUrl == null) {
      throw new ApiException(400, "Missing the required parameter 'imageUrl' when calling editHtmlHtmlAppendImageFromUrl");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/append/image/from-url";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (imageUrl != null) {
      localVarRequestBuilder.header("imageUrl", imageUrl.toString());
    }
    if (cssStyle != null) {
      localVarRequestBuilder.header("cssStyle", cssStyle.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Append a Base64 Inline Image to an HTML Document
   * Appends a base64 inline image to the end of an HTML document from an input file or URL.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
   * @param cssStyle Optional: CSS style for the image. (optional)
   * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlAppendImageInline(String inputFileUrl, String imageUrl, String cssStyle, String imageExtension, File inputFile, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlAppendImageInlineWithHttpInfo(inputFileUrl, imageUrl, cssStyle, imageExtension, inputFile, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Append a Base64 Inline Image to an HTML Document
   * Appends a base64 inline image to the end of an HTML document from an input file or URL.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param imageUrl Optional: Image URL to be appended as base64 inline image. (optional)
   * @param cssStyle Optional: CSS style for the image. (optional)
   * @param imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @param imageFile Optional: Image file to be appended as base64 inline image. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlAppendImageInlineWithHttpInfo(String inputFileUrl, String imageUrl, String cssStyle, String imageExtension, File inputFile, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlAppendImageInlineRequestBuilder(inputFileUrl, imageUrl, cssStyle, imageExtension, inputFile, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlAppendImageInline", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlAppendImageInlineRequestBuilder(String inputFileUrl, String imageUrl, String cssStyle, String imageExtension, File inputFile, File imageFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/append/image/inline";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (imageUrl != null) {
      localVarRequestBuilder.header("imageUrl", imageUrl.toString());
    }
    if (cssStyle != null) {
      localVarRequestBuilder.header("cssStyle", cssStyle.toString());
    }
    if (imageExtension != null) {
      localVarRequestBuilder.header("imageExtension", imageExtension.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Append a Paragraph to an HTML Document
   * Appends a paragraph to the end of an HTML document.
   * @param paragraphText The text content to be used in the paragraph. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param cssStyle Optional: The CSS style for the paragraph. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlAppendParagraph(String paragraphText, String inputFileUrl, String cssStyle, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlAppendParagraphWithHttpInfo(paragraphText, inputFileUrl, cssStyle, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Append a Paragraph to an HTML Document
   * Appends a paragraph to the end of an HTML document.
   * @param paragraphText The text content to be used in the paragraph. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param cssStyle Optional: The CSS style for the paragraph. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlAppendParagraphWithHttpInfo(String paragraphText, String inputFileUrl, String cssStyle, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlAppendParagraphRequestBuilder(paragraphText, inputFileUrl, cssStyle, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlAppendParagraph", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlAppendParagraphRequestBuilder(String paragraphText, String inputFileUrl, String cssStyle, File inputFile) throws ApiException {
    // verify the required parameter 'paragraphText' is set
    if (paragraphText == null) {
      throw new ApiException(400, "Missing the required parameter 'paragraphText' when calling editHtmlHtmlAppendParagraph");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/append/paragraph";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (paragraphText != null) {
      localVarRequestBuilder.header("paragraphText", paragraphText.toString());
    }
    if (cssStyle != null) {
      localVarRequestBuilder.header("cssStyle", cssStyle.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Blank HTML Document
   * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
   * @param title Optional: The title of the HTML document (optional)
   * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
   * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
   * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
   * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlCreateBlankDocument(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlCreateBlankDocumentWithHttpInfo(title, cssUrl, cssInline, javascriptUrl, javascriptInline);
    return localVarResponse.getData();
  }

  /**
   * Create a Blank HTML Document
   * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
   * @param title Optional: The title of the HTML document (optional)
   * @param cssUrl Optional: A CSS style URL to be added to the document. (optional)
   * @param cssInline Optional: An inline CSS style to be added to the document. (optional)
   * @param javascriptUrl Optional: Javascript URL to be added to the document. (optional)
   * @param javascriptInline Optional: Inline Javascript to be added to the document. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlCreateBlankDocumentWithHttpInfo(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlCreateBlankDocumentRequestBuilder(title, cssUrl, cssInline, javascriptUrl, javascriptInline);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlCreateBlankDocument", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlCreateBlankDocumentRequestBuilder(String title, String cssUrl, String cssInline, String javascriptUrl, String javascriptInline) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/create/blank";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (title != null) {
      localVarRequestBuilder.header("title", title.toString());
    }
    if (cssUrl != null) {
      localVarRequestBuilder.header("cssUrl", cssUrl.toString());
    }
    if (cssInline != null) {
      localVarRequestBuilder.header("cssInline", cssInline.toString());
    }
    if (javascriptUrl != null) {
      localVarRequestBuilder.header("javascriptUrl", javascriptUrl.toString());
    }
    if (javascriptInline != null) {
      localVarRequestBuilder.header("javascriptInline", javascriptInline.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the language for the HTML document
   * Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return HtmlGetLanguageResult
   * @throws ApiException if fails to make API call
   */
  public HtmlGetLanguageResult editHtmlHtmlGetLanguage(String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<HtmlGetLanguageResult> localVarResponse = editHtmlHtmlGetLanguageWithHttpInfo(inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Gets the language for the HTML document
   * Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;HtmlGetLanguageResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlGetLanguageResult> editHtmlHtmlGetLanguageWithHttpInfo(String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlGetLanguageRequestBuilder(inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlGetLanguage", localVarResponse);
        }
        return new ApiResponse<HtmlGetLanguageResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlGetLanguageResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlGetLanguageRequestBuilder(String inputFileUrl, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/get/language";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Extract resolved link URLs from HTML File
   * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return HtmlGetLinksResponse
   * @throws ApiException if fails to make API call
   */
  public HtmlGetLinksResponse editHtmlHtmlGetLinks(String inputFileUrl, String baseUrl, File inputFile) throws ApiException {
    ApiResponse<HtmlGetLinksResponse> localVarResponse = editHtmlHtmlGetLinksWithHttpInfo(inputFileUrl, baseUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Extract resolved link URLs from HTML File
   * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param baseUrl Optional: Base URL of the page, such as https://mydomain.com (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;HtmlGetLinksResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlGetLinksResponse> editHtmlHtmlGetLinksWithHttpInfo(String inputFileUrl, String baseUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlGetLinksRequestBuilder(inputFileUrl, baseUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlGetLinks", localVarResponse);
        }
        return new ApiResponse<HtmlGetLinksResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlGetLinksResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlGetLinksRequestBuilder(String inputFileUrl, String baseUrl, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/extract/links";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (baseUrl != null) {
      localVarRequestBuilder.header("baseUrl", baseUrl.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the rel canonical URL for the HTML document
   * Gets the rel canonical URL of an HTML document.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return HtmlGetRelCanonicalUrlResult
   * @throws ApiException if fails to make API call
   */
  public HtmlGetRelCanonicalUrlResult editHtmlHtmlGetRelCanonical(String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<HtmlGetRelCanonicalUrlResult> localVarResponse = editHtmlHtmlGetRelCanonicalWithHttpInfo(inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Gets the rel canonical URL for the HTML document
   * Gets the rel canonical URL of an HTML document.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;HtmlGetRelCanonicalUrlResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlGetRelCanonicalUrlResult> editHtmlHtmlGetRelCanonicalWithHttpInfo(String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlGetRelCanonicalRequestBuilder(inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlGetRelCanonical", localVarResponse);
        }
        return new ApiResponse<HtmlGetRelCanonicalUrlResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlGetRelCanonicalUrlResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlGetRelCanonicalRequestBuilder(String inputFileUrl, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/get/rel-canonical-url";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the sitemap URL for the HTML document
   * Gets the sitemap link URL of an HTML document.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return HtmlGetSitemapUrlResult
   * @throws ApiException if fails to make API call
   */
  public HtmlGetSitemapUrlResult editHtmlHtmlGetSitemap(String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<HtmlGetSitemapUrlResult> localVarResponse = editHtmlHtmlGetSitemapWithHttpInfo(inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Gets the sitemap URL for the HTML document
   * Gets the sitemap link URL of an HTML document.
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;HtmlGetSitemapUrlResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HtmlGetSitemapUrlResult> editHtmlHtmlGetSitemapWithHttpInfo(String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlGetSitemapRequestBuilder(inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlGetSitemap", localVarResponse);
        }
        return new ApiResponse<HtmlGetSitemapUrlResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HtmlGetSitemapUrlResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlGetSitemapRequestBuilder(String inputFileUrl, File inputFile) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/get/sitemap-url";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Sets the language for the HTML document
   * Sets the language code of an HTML document.
   * @param languageCode The HTML langauge code to set. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlSetLanguage(String languageCode, String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlSetLanguageWithHttpInfo(languageCode, inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Sets the language for the HTML document
   * Sets the language code of an HTML document.
   * @param languageCode The HTML langauge code to set. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlSetLanguageWithHttpInfo(String languageCode, String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlSetLanguageRequestBuilder(languageCode, inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlSetLanguage", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlSetLanguageRequestBuilder(String languageCode, String inputFileUrl, File inputFile) throws ApiException {
    // verify the required parameter 'languageCode' is set
    if (languageCode == null) {
      throw new ApiException(400, "Missing the required parameter 'languageCode' when calling editHtmlHtmlSetLanguage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/set/language";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (languageCode != null) {
      localVarRequestBuilder.header("languageCode", languageCode.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Sets the rel canonical URL for the HTML document
   * Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
   * @param canonicalUrl The HTML canonical URL to set. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlSetRelCanonical(String canonicalUrl, String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlSetRelCanonicalWithHttpInfo(canonicalUrl, inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Sets the rel canonical URL for the HTML document
   * Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
   * @param canonicalUrl The HTML canonical URL to set. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlSetRelCanonicalWithHttpInfo(String canonicalUrl, String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlSetRelCanonicalRequestBuilder(canonicalUrl, inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlSetRelCanonical", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlSetRelCanonicalRequestBuilder(String canonicalUrl, String inputFileUrl, File inputFile) throws ApiException {
    // verify the required parameter 'canonicalUrl' is set
    if (canonicalUrl == null) {
      throw new ApiException(400, "Missing the required parameter 'canonicalUrl' when calling editHtmlHtmlSetRelCanonical");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/set/rel-canonical-url";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (canonicalUrl != null) {
      localVarRequestBuilder.header("canonicalUrl", canonicalUrl.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Sets the sitemap URL for the HTML document
   * Sets the sitemap URL of an HTML document.
   * @param sitemapUrl The HTML sitemap URL to set. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editHtmlHtmlSetSitemapUrl(String sitemapUrl, String inputFileUrl, File inputFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editHtmlHtmlSetSitemapUrlWithHttpInfo(sitemapUrl, inputFileUrl, inputFile);
    return localVarResponse.getData();
  }

  /**
   * Sets the sitemap URL for the HTML document
   * Sets the sitemap URL of an HTML document.
   * @param sitemapUrl The HTML sitemap URL to set. (required)
   * @param inputFileUrl Optional: URL of a file to operate on as input. (optional)
   * @param inputFile Optional: Input file to perform the operation on. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editHtmlHtmlSetSitemapUrlWithHttpInfo(String sitemapUrl, String inputFileUrl, File inputFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editHtmlHtmlSetSitemapUrlRequestBuilder(sitemapUrl, inputFileUrl, inputFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editHtmlHtmlSetSitemapUrl", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editHtmlHtmlSetSitemapUrlRequestBuilder(String sitemapUrl, String inputFileUrl, File inputFile) throws ApiException {
    // verify the required parameter 'sitemapUrl' is set
    if (sitemapUrl == null) {
      throw new ApiException(400, "Missing the required parameter 'sitemapUrl' when calling editHtmlHtmlSetSitemapUrl");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/convert/edit/html/head/set/sitemap-url";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (inputFileUrl != null) {
      localVarRequestBuilder.header("inputFileUrl", inputFileUrl.toString());
    }
    if (sitemapUrl != null) {
      localVarRequestBuilder.header("sitemapUrl", sitemapUrl.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json, text/json, application/xml, text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
