/*
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cloudmersive.client.ntv;

import com.cloudmersive.client.ntv.invoker.ApiClient;
import com.cloudmersive.client.ntv.invoker.ApiException;
import com.cloudmersive.client.ntv.invoker.ApiResponse;
import com.cloudmersive.client.ntv.invoker.Pair;

import com.cloudmersive.client.ntv.model.DrawPolygonRequest;
import com.cloudmersive.client.ntv.model.DrawRectangleRequest;
import com.cloudmersive.client.ntv.model.DrawTextRequest;
import java.io.File;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-15T17:56:30.485754800-07:00[America/Los_Angeles]")
public class EditApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EditApi() {
    this(new ApiClient());
  }

  public EditApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Normalizes image rotation and removes EXIF rotation data
   * Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editAutoOrient(File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editAutoOrientWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Normalizes image rotation and removes EXIF rotation data
   * Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editAutoOrientWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editAutoOrientRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editAutoOrient", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editAutoOrientRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editAutoOrient");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/auto-orient/remove-exif";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Composite two images together
   * Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
   * @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot; (required)
   * @param baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param layeredImage Image to layer on top of the base image. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editCompositeBasic(String location, File baseImage, File layeredImage) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editCompositeBasicWithHttpInfo(location, baseImage, layeredImage);
    return localVarResponse.getData();
  }

  /**
   * Composite two images together
   * Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
   * @param location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot; (required)
   * @param baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param layeredImage Image to layer on top of the base image. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editCompositeBasicWithHttpInfo(String location, File baseImage, File layeredImage) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editCompositeBasicRequestBuilder(location, baseImage, layeredImage);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editCompositeBasic", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editCompositeBasicRequestBuilder(String location, File baseImage, File layeredImage) throws ApiException {
    // verify the required parameter 'location' is set
    if (location == null) {
      throw new ApiException(400, "Missing the required parameter 'location' when calling editCompositeBasic");
    }
    // verify the required parameter 'baseImage' is set
    if (baseImage == null) {
      throw new ApiException(400, "Missing the required parameter 'baseImage' when calling editCompositeBasic");
    }
    // verify the required parameter 'layeredImage' is set
    if (layeredImage == null) {
      throw new ApiException(400, "Missing the required parameter 'layeredImage' when calling editCompositeBasic");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/composite/{location}"
        .replace("{location}", ApiClient.urlEncode(location.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Composite two images together precisely
   * Composites two input images together; a layered image onto a base image. Position is based on distance in pixels from each side.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.  Providing multiple parameters in a single axis (for example top and bottom) is not recommended, since only one of the parameters will be used per axis.
   * @param baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param layeredImage Image to layer on top of the base image. (required)
   * @param top Optional; Desired distance in pixels from the top of the base image to the top of the layered image. (optional)
   * @param bottom Optional; Desired distance in pixels from the bottom of the base image to the bottom of the layered image. (optional)
   * @param left Optional; Desired distance in pixels from the left side of the base image to the left side of the layered image. (optional)
   * @param right Optional; Desired distance in pixels from the right side of the base image to the right side of the layered image. (optional)
   * @param width Optional; Desired width of the layered image in pixels. Leave height empty or 0 to automatically scale the image proportionally. (optional)
   * @param height Optional; Desired height of the layered image in pixels. Leave width empty or 0 to automatically scale the image proportionally. (optional)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editCompositePrecise(File baseImage, File layeredImage, Integer top, Integer bottom, Integer left, Integer right, Integer width, Integer height) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editCompositePreciseWithHttpInfo(baseImage, layeredImage, top, bottom, left, right, width, height);
    return localVarResponse.getData();
  }

  /**
   * Composite two images together precisely
   * Composites two input images together; a layered image onto a base image. Position is based on distance in pixels from each side.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.  Providing multiple parameters in a single axis (for example top and bottom) is not recommended, since only one of the parameters will be used per axis.
   * @param baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @param layeredImage Image to layer on top of the base image. (required)
   * @param top Optional; Desired distance in pixels from the top of the base image to the top of the layered image. (optional)
   * @param bottom Optional; Desired distance in pixels from the bottom of the base image to the bottom of the layered image. (optional)
   * @param left Optional; Desired distance in pixels from the left side of the base image to the left side of the layered image. (optional)
   * @param right Optional; Desired distance in pixels from the right side of the base image to the right side of the layered image. (optional)
   * @param width Optional; Desired width of the layered image in pixels. Leave height empty or 0 to automatically scale the image proportionally. (optional)
   * @param height Optional; Desired height of the layered image in pixels. Leave width empty or 0 to automatically scale the image proportionally. (optional)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editCompositePreciseWithHttpInfo(File baseImage, File layeredImage, Integer top, Integer bottom, Integer left, Integer right, Integer width, Integer height) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editCompositePreciseRequestBuilder(baseImage, layeredImage, top, bottom, left, right, width, height);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editCompositePrecise", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editCompositePreciseRequestBuilder(File baseImage, File layeredImage, Integer top, Integer bottom, Integer left, Integer right, Integer width, Integer height) throws ApiException {
    // verify the required parameter 'baseImage' is set
    if (baseImage == null) {
      throw new ApiException(400, "Missing the required parameter 'baseImage' when calling editCompositePrecise");
    }
    // verify the required parameter 'layeredImage' is set
    if (layeredImage == null) {
      throw new ApiException(400, "Missing the required parameter 'layeredImage' when calling editCompositePrecise");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/composite/precise";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (top != null) {
      localVarRequestBuilder.header("top", top.toString());
    }
    if (bottom != null) {
      localVarRequestBuilder.header("bottom", bottom.toString());
    }
    if (left != null) {
      localVarRequestBuilder.header("left", left.toString());
    }
    if (right != null) {
      localVarRequestBuilder.header("right", right.toString());
    }
    if (width != null) {
      localVarRequestBuilder.header("width", width.toString());
    }
    if (height != null) {
      localVarRequestBuilder.header("height", height.toString());
    }
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Adaptively adjust the contrast of the image to be more appealing and easy to see
   * Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
   * @param gamma Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editContrastAdaptive(Double gamma, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editContrastAdaptiveWithHttpInfo(gamma, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Adaptively adjust the contrast of the image to be more appealing and easy to see
   * Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
   * @param gamma Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editContrastAdaptiveWithHttpInfo(Double gamma, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editContrastAdaptiveRequestBuilder(gamma, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editContrastAdaptive", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editContrastAdaptiveRequestBuilder(Double gamma, File imageFile) throws ApiException {
    // verify the required parameter 'gamma' is set
    if (gamma == null) {
      throw new ApiException(400, "Missing the required parameter 'gamma' when calling editContrastAdaptive");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editContrastAdaptive");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/contrast/{gamma}/adaptive"
        .replace("{gamma}", ApiClient.urlEncode(gamma.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Crop an image to an circular area
   * Crop an image to a target circular area
   * @param left The left edge of the circular crop area in pixels (X). (required)
   * @param top The top edge of the circular crop area in pixels (Y). (required)
   * @param radius The radius of the circular crop area in pixels. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editCropCircle(Integer left, Integer top, Integer radius, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editCropCircleWithHttpInfo(left, top, radius, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Crop an image to an circular area
   * Crop an image to a target circular area
   * @param left The left edge of the circular crop area in pixels (X). (required)
   * @param top The top edge of the circular crop area in pixels (Y). (required)
   * @param radius The radius of the circular crop area in pixels. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editCropCircleWithHttpInfo(Integer left, Integer top, Integer radius, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editCropCircleRequestBuilder(left, top, radius, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editCropCircle", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editCropCircleRequestBuilder(Integer left, Integer top, Integer radius, File imageFile) throws ApiException {
    // verify the required parameter 'left' is set
    if (left == null) {
      throw new ApiException(400, "Missing the required parameter 'left' when calling editCropCircle");
    }
    // verify the required parameter 'top' is set
    if (top == null) {
      throw new ApiException(400, "Missing the required parameter 'top' when calling editCropCircle");
    }
    // verify the required parameter 'radius' is set
    if (radius == null) {
      throw new ApiException(400, "Missing the required parameter 'radius' when calling editCropCircle");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editCropCircle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/crop/circle/{left}/{top}/{radius}"
        .replace("{left}", ApiClient.urlEncode(left.toString()))
        .replace("{top}", ApiClient.urlEncode(top.toString()))
        .replace("{radius}", ApiClient.urlEncode(radius.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Crop an image to a rectangular area
   * Crop an image to a target rectangular area
   * @param left The left edge of the rectangular crop area in pixels (X). (required)
   * @param top The top edge of the rectangular crop area in pixels (Y). (required)
   * @param width The width of the rectangular crop area in pixels. (required)
   * @param height The height of the rectangular crop area in pixels. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editCropRectangle(Integer left, Integer top, Integer width, Integer height, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editCropRectangleWithHttpInfo(left, top, width, height, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Crop an image to a rectangular area
   * Crop an image to a target rectangular area
   * @param left The left edge of the rectangular crop area in pixels (X). (required)
   * @param top The top edge of the rectangular crop area in pixels (Y). (required)
   * @param width The width of the rectangular crop area in pixels. (required)
   * @param height The height of the rectangular crop area in pixels. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editCropRectangleWithHttpInfo(Integer left, Integer top, Integer width, Integer height, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editCropRectangleRequestBuilder(left, top, width, height, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editCropRectangle", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editCropRectangleRequestBuilder(Integer left, Integer top, Integer width, Integer height, File imageFile) throws ApiException {
    // verify the required parameter 'left' is set
    if (left == null) {
      throw new ApiException(400, "Missing the required parameter 'left' when calling editCropRectangle");
    }
    // verify the required parameter 'top' is set
    if (top == null) {
      throw new ApiException(400, "Missing the required parameter 'top' when calling editCropRectangle");
    }
    // verify the required parameter 'width' is set
    if (width == null) {
      throw new ApiException(400, "Missing the required parameter 'width' when calling editCropRectangle");
    }
    // verify the required parameter 'height' is set
    if (height == null) {
      throw new ApiException(400, "Missing the required parameter 'height' when calling editCropRectangle");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editCropRectangle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/crop/rectangle/{left}/{top}/{width}/{height}"
        .replace("{left}", ApiClient.urlEncode(left.toString()))
        .replace("{top}", ApiClient.urlEncode(top.toString()))
        .replace("{width}", ApiClient.urlEncode(width.toString()))
        .replace("{height}", ApiClient.urlEncode(height.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Draw a polygon onto an image
   * Draw one or more polygons, with customized visuals, onto an image
   * @param request Polygon drawing request parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDrawPolygon(DrawPolygonRequest request) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDrawPolygonWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Draw a polygon onto an image
   * Draw one or more polygons, with customized visuals, onto an image
   * @param request Polygon drawing request parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDrawPolygonWithHttpInfo(DrawPolygonRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDrawPolygonRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDrawPolygon", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDrawPolygonRequestBuilder(DrawPolygonRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editDrawPolygon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/draw/polygon";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Draw a rectangle onto an image
   * Draw one or more rectangles, with customized visuals, onto an image
   * @param request Draw rectangle parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDrawRectangle(DrawRectangleRequest request) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDrawRectangleWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Draw a rectangle onto an image
   * Draw one or more rectangles, with customized visuals, onto an image
   * @param request Draw rectangle parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDrawRectangleWithHttpInfo(DrawRectangleRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDrawRectangleRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDrawRectangle", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDrawRectangleRequestBuilder(DrawRectangleRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editDrawRectangle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/draw/rectangle";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Draw text onto an image
   * Draw one or more pieces of text, with customized visuals, onto an image
   * @param request Draw text parameters (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDrawText(DrawTextRequest request) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDrawTextWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Draw text onto an image
   * Draw one or more pieces of text, with customized visuals, onto an image
   * @param request Draw text parameters (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDrawTextWithHttpInfo(DrawTextRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDrawTextRequestBuilder(request);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDrawText", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDrawTextRequestBuilder(DrawTextRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling editDrawText");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/draw/text";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/octet-stream");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a customizeable drop shadow to an image
   * Add a customizeable drop shadow to the image
   * @param X Horizontal (X) offset of the drop shadow (required)
   * @param Y Vertical (Y) offset of the drop shadow (required)
   * @param sigma Sigma (blur distance) of the drop shadow (required)
   * @param opacity Opacity of the drop shadow; 0 is 0% and 100 is 100% (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editDropShadow(Integer X, Integer Y, Integer sigma, Integer opacity, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editDropShadowWithHttpInfo(X, Y, sigma, opacity, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Add a customizeable drop shadow to an image
   * Add a customizeable drop shadow to the image
   * @param X Horizontal (X) offset of the drop shadow (required)
   * @param Y Vertical (Y) offset of the drop shadow (required)
   * @param sigma Sigma (blur distance) of the drop shadow (required)
   * @param opacity Opacity of the drop shadow; 0 is 0% and 100 is 100% (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editDropShadowWithHttpInfo(Integer X, Integer Y, Integer sigma, Integer opacity, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDropShadowRequestBuilder(X, Y, sigma, opacity, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDropShadow", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDropShadowRequestBuilder(Integer X, Integer Y, Integer sigma, Integer opacity, File imageFile) throws ApiException {
    // verify the required parameter 'X' is set
    if (X == null) {
      throw new ApiException(400, "Missing the required parameter 'X' when calling editDropShadow");
    }
    // verify the required parameter 'Y' is set
    if (Y == null) {
      throw new ApiException(400, "Missing the required parameter 'Y' when calling editDropShadow");
    }
    // verify the required parameter 'sigma' is set
    if (sigma == null) {
      throw new ApiException(400, "Missing the required parameter 'sigma' when calling editDropShadow");
    }
    // verify the required parameter 'opacity' is set
    if (opacity == null) {
      throw new ApiException(400, "Missing the required parameter 'opacity' when calling editDropShadow");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editDropShadow");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/drop-shadow/{X}/{Y}/{sigma}/{opacity}"
        .replace("{X}", ApiClient.urlEncode(X.toString()))
        .replace("{Y}", ApiClient.urlEncode(Y.toString()))
        .replace("{sigma}", ApiClient.urlEncode(sigma.toString()))
        .replace("{opacity}", ApiClient.urlEncode(opacity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Invert, negate the colors in the image
   * Inverts (negates) all of the colors in the image.  If the image contains transparency, the transparency will first be removed prior to inverting the image.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editInvert(File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editInvertWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Invert, negate the colors in the image
   * Inverts (negates) all of the colors in the image.  If the image contains transparency, the transparency will first be removed prior to inverting the image.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editInvertWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editInvertRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editInvert", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editInvertRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editInvert");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/invert";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove EXIF data from the image
   * Removes any EXIF data and profiles .
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editRemoveExifData(File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editRemoveExifDataWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Remove EXIF data from the image
   * Removes any EXIF data and profiles .
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editRemoveExifDataWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editRemoveExifDataRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editRemoveExifData", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editRemoveExifDataRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editRemoveExifData");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/remove-exif";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove transparency from the image
   * Removes any active transparency in the image.  Effectively renders the image at the same resolution, in the same file format, over a white background, thus removing transparency.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editRemoveTransparency(File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editRemoveTransparencyWithHttpInfo(imageFile);
    return localVarResponse.getData();
  }

  /**
   * Remove transparency from the image
   * Removes any active transparency in the image.  Effectively renders the image at the same resolution, in the same file format, over a white background, thus removing transparency.
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editRemoveTransparencyWithHttpInfo(File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editRemoveTransparencyRequestBuilder(imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editRemoveTransparency", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editRemoveTransparencyRequestBuilder(File imageFile) throws ApiException {
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editRemoveTransparency");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/remove-transparency";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate an image any number of degrees
   * Rotates an image by an arbitrary number of degrees
   * @param degrees Degrees to rotate the image; values range from 0.0 to 360.0. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] editRotate(Double degrees, File imageFile) throws ApiException {
    ApiResponse<byte[]> localVarResponse = editRotateWithHttpInfo(degrees, imageFile);
    return localVarResponse.getData();
  }

  /**
   * Rotate an image any number of degrees
   * Rotates an image by an arbitrary number of degrees
   * @param degrees Degrees to rotate the image; values range from 0.0 to 360.0. (required)
   * @param imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported. (required)
   * @return ApiResponse&lt;byte[]&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<byte[]> editRotateWithHttpInfo(Double degrees, File imageFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editRotateRequestBuilder(degrees, imageFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editRotate", localVarResponse);
        }
        return new ApiResponse<byte[]>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<byte[]>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editRotateRequestBuilder(Double degrees, File imageFile) throws ApiException {
    // verify the required parameter 'degrees' is set
    if (degrees == null) {
      throw new ApiException(400, "Missing the required parameter 'degrees' when calling editRotate");
    }
    // verify the required parameter 'imageFile' is set
    if (imageFile == null) {
      throw new ApiException(400, "Missing the required parameter 'imageFile' when calling editRotate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/image/edit/rotate/{degrees}/angle"
        .replace("{degrees}", ApiClient.urlEncode(degrees.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
